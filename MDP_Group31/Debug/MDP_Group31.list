
MDP_Group31.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e078  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000de8  0800e208  0800e208  0001e208  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eff0  0800eff0  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800eff0  0800eff0  0001eff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eff8  0800eff8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eff8  0800eff8  0001eff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800effc  0800effc  0001effc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800f000  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          00005280  20000080  20000080  00020080  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20005300  20005300  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001cfe6  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003c76  00000000  00000000  0003d0d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001aa0  00000000  00000000  00040d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000014ec  00000000  00000000  000427f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00004717  00000000  00000000  00043cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001ebae  00000000  00000000  000483f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e6b13  00000000  00000000  00066fa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007c14  00000000  00000000  0014dab4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  001556c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e1f0 	.word	0x0800e1f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800e1f0 	.word	0x0800e1f0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b970 	b.w	8000fa0 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	460d      	mov	r5, r1
 8000ce0:	4604      	mov	r4, r0
 8000ce2:	460f      	mov	r7, r1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d14a      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce8:	428a      	cmp	r2, r1
 8000cea:	4694      	mov	ip, r2
 8000cec:	d965      	bls.n	8000dba <__udivmoddi4+0xe2>
 8000cee:	fab2 f382 	clz	r3, r2
 8000cf2:	b143      	cbz	r3, 8000d06 <__udivmoddi4+0x2e>
 8000cf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cf8:	f1c3 0220 	rsb	r2, r3, #32
 8000cfc:	409f      	lsls	r7, r3
 8000cfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000d02:	4317      	orrs	r7, r2
 8000d04:	409c      	lsls	r4, r3
 8000d06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d0a:	fa1f f58c 	uxth.w	r5, ip
 8000d0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d12:	0c22      	lsrs	r2, r4, #16
 8000d14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d1c:	fb01 f005 	mul.w	r0, r1, r5
 8000d20:	4290      	cmp	r0, r2
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x62>
 8000d24:	eb1c 0202 	adds.w	r2, ip, r2
 8000d28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d2c:	f080 811c 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d30:	4290      	cmp	r0, r2
 8000d32:	f240 8119 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d36:	3902      	subs	r1, #2
 8000d38:	4462      	add	r2, ip
 8000d3a:	1a12      	subs	r2, r2, r0
 8000d3c:	b2a4      	uxth	r4, r4
 8000d3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4a:	fb00 f505 	mul.w	r5, r0, r5
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	d90a      	bls.n	8000d68 <__udivmoddi4+0x90>
 8000d52:	eb1c 0404 	adds.w	r4, ip, r4
 8000d56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5a:	f080 8107 	bcs.w	8000f6c <__udivmoddi4+0x294>
 8000d5e:	42a5      	cmp	r5, r4
 8000d60:	f240 8104 	bls.w	8000f6c <__udivmoddi4+0x294>
 8000d64:	4464      	add	r4, ip
 8000d66:	3802      	subs	r0, #2
 8000d68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d6c:	1b64      	subs	r4, r4, r5
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11e      	cbz	r6, 8000d7a <__udivmoddi4+0xa2>
 8000d72:	40dc      	lsrs	r4, r3
 8000d74:	2300      	movs	r3, #0
 8000d76:	e9c6 4300 	strd	r4, r3, [r6]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0xbc>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80ed 	beq.w	8000f62 <__udivmoddi4+0x28a>
 8000d88:	2100      	movs	r1, #0
 8000d8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d94:	fab3 f183 	clz	r1, r3
 8000d98:	2900      	cmp	r1, #0
 8000d9a:	d149      	bne.n	8000e30 <__udivmoddi4+0x158>
 8000d9c:	42ab      	cmp	r3, r5
 8000d9e:	d302      	bcc.n	8000da6 <__udivmoddi4+0xce>
 8000da0:	4282      	cmp	r2, r0
 8000da2:	f200 80f8 	bhi.w	8000f96 <__udivmoddi4+0x2be>
 8000da6:	1a84      	subs	r4, r0, r2
 8000da8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dac:	2001      	movs	r0, #1
 8000dae:	4617      	mov	r7, r2
 8000db0:	2e00      	cmp	r6, #0
 8000db2:	d0e2      	beq.n	8000d7a <__udivmoddi4+0xa2>
 8000db4:	e9c6 4700 	strd	r4, r7, [r6]
 8000db8:	e7df      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000dba:	b902      	cbnz	r2, 8000dbe <__udivmoddi4+0xe6>
 8000dbc:	deff      	udf	#255	; 0xff
 8000dbe:	fab2 f382 	clz	r3, r2
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	f040 8090 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dc8:	1a8a      	subs	r2, r1, r2
 8000dca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dce:	fa1f fe8c 	uxth.w	lr, ip
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000ddc:	0c22      	lsrs	r2, r4, #16
 8000dde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000de2:	fb0e f005 	mul.w	r0, lr, r5
 8000de6:	4290      	cmp	r0, r2
 8000de8:	d908      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dea:	eb1c 0202 	adds.w	r2, ip, r2
 8000dee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4290      	cmp	r0, r2
 8000df6:	f200 80cb 	bhi.w	8000f90 <__udivmoddi4+0x2b8>
 8000dfa:	4645      	mov	r5, r8
 8000dfc:	1a12      	subs	r2, r2, r0
 8000dfe:	b2a4      	uxth	r4, r4
 8000e00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e04:	fb07 2210 	mls	r2, r7, r0, r2
 8000e08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e10:	45a6      	cmp	lr, r4
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x14e>
 8000e14:	eb1c 0404 	adds.w	r4, ip, r4
 8000e18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e1c:	d202      	bcs.n	8000e24 <__udivmoddi4+0x14c>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f200 80bb 	bhi.w	8000f9a <__udivmoddi4+0x2c2>
 8000e24:	4610      	mov	r0, r2
 8000e26:	eba4 040e 	sub.w	r4, r4, lr
 8000e2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e2e:	e79f      	b.n	8000d70 <__udivmoddi4+0x98>
 8000e30:	f1c1 0720 	rsb	r7, r1, #32
 8000e34:	408b      	lsls	r3, r1
 8000e36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e42:	fa20 f307 	lsr.w	r3, r0, r7
 8000e46:	40fd      	lsrs	r5, r7
 8000e48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e4c:	4323      	orrs	r3, r4
 8000e4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	fb09 5518 	mls	r5, r9, r8, r5
 8000e5a:	0c1c      	lsrs	r4, r3, #16
 8000e5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e60:	fb08 f50e 	mul.w	r5, r8, lr
 8000e64:	42a5      	cmp	r5, r4
 8000e66:	fa02 f201 	lsl.w	r2, r2, r1
 8000e6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e78:	f080 8088 	bcs.w	8000f8c <__udivmoddi4+0x2b4>
 8000e7c:	42a5      	cmp	r5, r4
 8000e7e:	f240 8085 	bls.w	8000f8c <__udivmoddi4+0x2b4>
 8000e82:	f1a8 0802 	sub.w	r8, r8, #2
 8000e86:	4464      	add	r4, ip
 8000e88:	1b64      	subs	r4, r4, r5
 8000e8a:	b29d      	uxth	r5, r3
 8000e8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e90:	fb09 4413 	mls	r4, r9, r3, r4
 8000e94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ea8:	d26c      	bcs.n	8000f84 <__udivmoddi4+0x2ac>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	d96a      	bls.n	8000f84 <__udivmoddi4+0x2ac>
 8000eae:	3b02      	subs	r3, #2
 8000eb0:	4464      	add	r4, ip
 8000eb2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000eb6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	42ac      	cmp	r4, r5
 8000ec0:	46c8      	mov	r8, r9
 8000ec2:	46ae      	mov	lr, r5
 8000ec4:	d356      	bcc.n	8000f74 <__udivmoddi4+0x29c>
 8000ec6:	d053      	beq.n	8000f70 <__udivmoddi4+0x298>
 8000ec8:	b156      	cbz	r6, 8000ee0 <__udivmoddi4+0x208>
 8000eca:	ebb0 0208 	subs.w	r2, r0, r8
 8000ece:	eb64 040e 	sbc.w	r4, r4, lr
 8000ed2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ed6:	40ca      	lsrs	r2, r1
 8000ed8:	40cc      	lsrs	r4, r1
 8000eda:	4317      	orrs	r7, r2
 8000edc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee8:	f1c3 0120 	rsb	r1, r3, #32
 8000eec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ef0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ef4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ef8:	409d      	lsls	r5, r3
 8000efa:	432a      	orrs	r2, r5
 8000efc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f00:	fa1f fe8c 	uxth.w	lr, ip
 8000f04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f08:	fb07 1510 	mls	r5, r7, r0, r1
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f12:	fb00 f50e 	mul.w	r5, r0, lr
 8000f16:	428d      	cmp	r5, r1
 8000f18:	fa04 f403 	lsl.w	r4, r4, r3
 8000f1c:	d908      	bls.n	8000f30 <__udivmoddi4+0x258>
 8000f1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f26:	d22f      	bcs.n	8000f88 <__udivmoddi4+0x2b0>
 8000f28:	428d      	cmp	r5, r1
 8000f2a:	d92d      	bls.n	8000f88 <__udivmoddi4+0x2b0>
 8000f2c:	3802      	subs	r0, #2
 8000f2e:	4461      	add	r1, ip
 8000f30:	1b49      	subs	r1, r1, r5
 8000f32:	b292      	uxth	r2, r2
 8000f34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f38:	fb07 1115 	mls	r1, r7, r5, r1
 8000f3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f40:	fb05 f10e 	mul.w	r1, r5, lr
 8000f44:	4291      	cmp	r1, r2
 8000f46:	d908      	bls.n	8000f5a <__udivmoddi4+0x282>
 8000f48:	eb1c 0202 	adds.w	r2, ip, r2
 8000f4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f50:	d216      	bcs.n	8000f80 <__udivmoddi4+0x2a8>
 8000f52:	4291      	cmp	r1, r2
 8000f54:	d914      	bls.n	8000f80 <__udivmoddi4+0x2a8>
 8000f56:	3d02      	subs	r5, #2
 8000f58:	4462      	add	r2, ip
 8000f5a:	1a52      	subs	r2, r2, r1
 8000f5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f60:	e738      	b.n	8000dd4 <__udivmoddi4+0xfc>
 8000f62:	4631      	mov	r1, r6
 8000f64:	4630      	mov	r0, r6
 8000f66:	e708      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000f68:	4639      	mov	r1, r7
 8000f6a:	e6e6      	b.n	8000d3a <__udivmoddi4+0x62>
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	e6fb      	b.n	8000d68 <__udivmoddi4+0x90>
 8000f70:	4548      	cmp	r0, r9
 8000f72:	d2a9      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f74:	ebb9 0802 	subs.w	r8, r9, r2
 8000f78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	e7a3      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f80:	4645      	mov	r5, r8
 8000f82:	e7ea      	b.n	8000f5a <__udivmoddi4+0x282>
 8000f84:	462b      	mov	r3, r5
 8000f86:	e794      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f88:	4640      	mov	r0, r8
 8000f8a:	e7d1      	b.n	8000f30 <__udivmoddi4+0x258>
 8000f8c:	46d0      	mov	r8, sl
 8000f8e:	e77b      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f90:	3d02      	subs	r5, #2
 8000f92:	4462      	add	r2, ip
 8000f94:	e732      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f96:	4608      	mov	r0, r1
 8000f98:	e70a      	b.n	8000db0 <__udivmoddi4+0xd8>
 8000f9a:	4464      	add	r4, ip
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	e742      	b.n	8000e26 <__udivmoddi4+0x14e>

08000fa0 <__aeabi_idiv0>:
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000fa8:	f3bf 8f4f 	dsb	sy
}
 8000fac:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <__NVIC_SystemReset+0x24>)
 8000fb0:	68db      	ldr	r3, [r3, #12]
 8000fb2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000fb6:	4904      	ldr	r1, [pc, #16]	; (8000fc8 <__NVIC_SystemReset+0x24>)
 8000fb8:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <__NVIC_SystemReset+0x28>)
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000fbe:	f3bf 8f4f 	dsb	sy
}
 8000fc2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000fc4:	bf00      	nop
 8000fc6:	e7fd      	b.n	8000fc4 <__NVIC_SystemReset+0x20>
 8000fc8:	e000ed00 	.word	0xe000ed00
 8000fcc:	05fa0004 	.word	0x05fa0004

08000fd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd4:	f003 fdd0 	bl	8004b78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd8:	f000 f894 	bl	8001104 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fdc:	f000 fc14 	bl	8001808 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fe0:	f000 f992 	bl	8001308 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000fe4:	f000 fbe6 	bl	80017b4 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000fe8:	f000 f9bc 	bl	8001364 <MX_TIM1_Init>
  MX_TIM8_Init();
 8000fec:	f000 fb38 	bl	8001660 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000ff0:	f000 fa3a 	bl	8001468 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ff4:	f000 fa8c 	bl	8001510 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ff8:	f000 fade 	bl	80015b8 <MX_TIM4_Init>
  MX_ADC1_Init();
 8000ffc:	f000 f8e0 	bl	80011c0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001000:	f000 f930 	bl	8001264 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
    OLED_Init();
 8001004:	f003 f968 	bl	80042d8 <OLED_Init>
    Motor_Init();
 8001008:	f000 fe78 	bl	8001cfc <Motor_Init>
    HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 800100c:	2100      	movs	r1, #0
 800100e:	4824      	ldr	r0, [pc, #144]	; (80010a0 <main+0xd0>)
 8001010:	f006 fb6c 	bl	80076ec <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001014:	f008 ff28 	bl	8009e68 <osKernelInitialize>
    /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001018:	4a22      	ldr	r2, [pc, #136]	; (80010a4 <main+0xd4>)
 800101a:	2100      	movs	r1, #0
 800101c:	4822      	ldr	r0, [pc, #136]	; (80010a8 <main+0xd8>)
 800101e:	f008 ff6d 	bl	8009efc <osThreadNew>
 8001022:	4603      	mov	r3, r0
 8001024:	4a21      	ldr	r2, [pc, #132]	; (80010ac <main+0xdc>)
 8001026:	6013      	str	r3, [r2, #0]

  /* creation of Encoder */
  EncoderHandle = osThreadNew(EncoderCheck, NULL, &Encoder_attributes);
 8001028:	4a21      	ldr	r2, [pc, #132]	; (80010b0 <main+0xe0>)
 800102a:	2100      	movs	r1, #0
 800102c:	4821      	ldr	r0, [pc, #132]	; (80010b4 <main+0xe4>)
 800102e:	f008 ff65 	bl	8009efc <osThreadNew>
 8001032:	4603      	mov	r3, r0
 8001034:	4a20      	ldr	r2, [pc, #128]	; (80010b8 <main+0xe8>)
 8001036:	6013      	str	r3, [r2, #0]

  /* creation of Gyro */
  GyroHandle = osThreadNew(GyroReadTask, NULL, &Gyro_attributes);
 8001038:	4a20      	ldr	r2, [pc, #128]	; (80010bc <main+0xec>)
 800103a:	2100      	movs	r1, #0
 800103c:	4820      	ldr	r0, [pc, #128]	; (80010c0 <main+0xf0>)
 800103e:	f008 ff5d 	bl	8009efc <osThreadNew>
 8001042:	4603      	mov	r3, r0
 8001044:	4a1f      	ldr	r2, [pc, #124]	; (80010c4 <main+0xf4>)
 8001046:	6013      	str	r3, [r2, #0]

  /* creation of Straighten */
  StraightenHandle = osThreadNew(KeepStraight, NULL, &Straighten_attributes);
 8001048:	4a1f      	ldr	r2, [pc, #124]	; (80010c8 <main+0xf8>)
 800104a:	2100      	movs	r1, #0
 800104c:	481f      	ldr	r0, [pc, #124]	; (80010cc <main+0xfc>)
 800104e:	f008 ff55 	bl	8009efc <osThreadNew>
 8001052:	4603      	mov	r3, r0
 8001054:	4a1e      	ldr	r2, [pc, #120]	; (80010d0 <main+0x100>)
 8001056:	6013      	str	r3, [r2, #0]

  /* creation of OLEDDisplay */
  OLEDDisplayHandle = osThreadNew(OLEDPrint, NULL, &OLEDDisplay_attributes);
 8001058:	4a1e      	ldr	r2, [pc, #120]	; (80010d4 <main+0x104>)
 800105a:	2100      	movs	r1, #0
 800105c:	481e      	ldr	r0, [pc, #120]	; (80010d8 <main+0x108>)
 800105e:	f008 ff4d 	bl	8009efc <osThreadNew>
 8001062:	4603      	mov	r3, r0
 8001064:	4a1d      	ldr	r2, [pc, #116]	; (80010dc <main+0x10c>)
 8001066:	6013      	str	r3, [r2, #0]

  /* creation of DistanceCalcula */
  DistanceCalculaHandle = osThreadNew(Calculate_Dist, NULL, &DistanceCalcula_attributes);
 8001068:	4a1d      	ldr	r2, [pc, #116]	; (80010e0 <main+0x110>)
 800106a:	2100      	movs	r1, #0
 800106c:	481d      	ldr	r0, [pc, #116]	; (80010e4 <main+0x114>)
 800106e:	f008 ff45 	bl	8009efc <osThreadNew>
 8001072:	4603      	mov	r3, r0
 8001074:	4a1c      	ldr	r2, [pc, #112]	; (80010e8 <main+0x118>)
 8001076:	6013      	str	r3, [r2, #0]

  /* creation of UltrasoundReadT */
  UltrasoundReadTHandle = osThreadNew(UltraSoundRead, NULL, &UltrasoundReadT_attributes);
 8001078:	4a1c      	ldr	r2, [pc, #112]	; (80010ec <main+0x11c>)
 800107a:	2100      	movs	r1, #0
 800107c:	481c      	ldr	r0, [pc, #112]	; (80010f0 <main+0x120>)
 800107e:	f008 ff3d 	bl	8009efc <osThreadNew>
 8001082:	4603      	mov	r3, r0
 8001084:	4a1b      	ldr	r2, [pc, #108]	; (80010f4 <main+0x124>)
 8001086:	6013      	str	r3, [r2, #0]

  /* creation of IRTask */
  IRTaskHandle = osThreadNew(IRReadPolling, NULL, &IRTask_attributes);
 8001088:	4a1b      	ldr	r2, [pc, #108]	; (80010f8 <main+0x128>)
 800108a:	2100      	movs	r1, #0
 800108c:	481b      	ldr	r0, [pc, #108]	; (80010fc <main+0x12c>)
 800108e:	f008 ff35 	bl	8009efc <osThreadNew>
 8001092:	4603      	mov	r3, r0
 8001094:	4a1a      	ldr	r2, [pc, #104]	; (8001100 <main+0x130>)
 8001096:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
    /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001098:	f008 ff0a 	bl	8009eb0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
 800109c:	e7fe      	b.n	800109c <main+0xcc>
 800109e:	bf00      	nop
 80010a0:	20000344 	.word	0x20000344
 80010a4:	0800e3f0 	.word	0x0800e3f0
 80010a8:	08002991 	.word	0x08002991
 80010ac:	20000418 	.word	0x20000418
 80010b0:	0800e414 	.word	0x0800e414
 80010b4:	08003191 	.word	0x08003191
 80010b8:	2000041c 	.word	0x2000041c
 80010bc:	0800e438 	.word	0x0800e438
 80010c0:	08003331 	.word	0x08003331
 80010c4:	20000420 	.word	0x20000420
 80010c8:	0800e45c 	.word	0x0800e45c
 80010cc:	08003591 	.word	0x08003591
 80010d0:	20000424 	.word	0x20000424
 80010d4:	0800e480 	.word	0x0800e480
 80010d8:	0800398d 	.word	0x0800398d
 80010dc:	20000428 	.word	0x20000428
 80010e0:	0800e4a4 	.word	0x0800e4a4
 80010e4:	08003ae9 	.word	0x08003ae9
 80010e8:	2000042c 	.word	0x2000042c
 80010ec:	0800e4c8 	.word	0x0800e4c8
 80010f0:	08003d79 	.word	0x08003d79
 80010f4:	20000430 	.word	0x20000430
 80010f8:	0800e4ec 	.word	0x0800e4ec
 80010fc:	08003da9 	.word	0x08003da9
 8001100:	20000434 	.word	0x20000434

08001104 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b094      	sub	sp, #80	; 0x50
 8001108:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800110a:	f107 0320 	add.w	r3, r7, #32
 800110e:	2230      	movs	r2, #48	; 0x30
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f00b fcc6 	bl	800caa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001128:	2300      	movs	r3, #0
 800112a:	60bb      	str	r3, [r7, #8]
 800112c:	4b22      	ldr	r3, [pc, #136]	; (80011b8 <SystemClock_Config+0xb4>)
 800112e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001130:	4a21      	ldr	r2, [pc, #132]	; (80011b8 <SystemClock_Config+0xb4>)
 8001132:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001136:	6413      	str	r3, [r2, #64]	; 0x40
 8001138:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <SystemClock_Config+0xb4>)
 800113a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001144:	2300      	movs	r3, #0
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <SystemClock_Config+0xb8>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a1b      	ldr	r2, [pc, #108]	; (80011bc <SystemClock_Config+0xb8>)
 800114e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001152:	6013      	str	r3, [r2, #0]
 8001154:	4b19      	ldr	r3, [pc, #100]	; (80011bc <SystemClock_Config+0xb8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800115c:	607b      	str	r3, [r7, #4]
 800115e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001160:	2302      	movs	r3, #2
 8001162:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001164:	2301      	movs	r3, #1
 8001166:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001168:	2310      	movs	r3, #16
 800116a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800116c:	2300      	movs	r3, #0
 800116e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001170:	f107 0320 	add.w	r3, r7, #32
 8001174:	4618      	mov	r0, r3
 8001176:	f005 fcab 	bl	8006ad0 <HAL_RCC_OscConfig>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001180:	f002 fefe 	bl	8003f80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001184:	230f      	movs	r3, #15
 8001186:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001188:	2300      	movs	r3, #0
 800118a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001190:	2300      	movs	r3, #0
 8001192:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001194:	2300      	movs	r3, #0
 8001196:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001198:	f107 030c 	add.w	r3, r7, #12
 800119c:	2100      	movs	r1, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f005 ff0e 	bl	8006fc0 <HAL_RCC_ClockConfig>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80011aa:	f002 fee9 	bl	8003f80 <Error_Handler>
  }
}
 80011ae:	bf00      	nop
 80011b0:	3750      	adds	r7, #80	; 0x50
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40007000 	.word	0x40007000

080011c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011c6:	463b      	mov	r3, r7
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011d2:	4b21      	ldr	r3, [pc, #132]	; (8001258 <MX_ADC1_Init+0x98>)
 80011d4:	4a21      	ldr	r2, [pc, #132]	; (800125c <MX_ADC1_Init+0x9c>)
 80011d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80011d8:	4b1f      	ldr	r3, [pc, #124]	; (8001258 <MX_ADC1_Init+0x98>)
 80011da:	2200      	movs	r2, #0
 80011dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011de:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <MX_ADC1_Init+0x98>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80011e4:	4b1c      	ldr	r3, [pc, #112]	; (8001258 <MX_ADC1_Init+0x98>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011ea:	4b1b      	ldr	r3, [pc, #108]	; (8001258 <MX_ADC1_Init+0x98>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011f0:	4b19      	ldr	r3, [pc, #100]	; (8001258 <MX_ADC1_Init+0x98>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011f8:	4b17      	ldr	r3, [pc, #92]	; (8001258 <MX_ADC1_Init+0x98>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011fe:	4b16      	ldr	r3, [pc, #88]	; (8001258 <MX_ADC1_Init+0x98>)
 8001200:	4a17      	ldr	r2, [pc, #92]	; (8001260 <MX_ADC1_Init+0xa0>)
 8001202:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001204:	4b14      	ldr	r3, [pc, #80]	; (8001258 <MX_ADC1_Init+0x98>)
 8001206:	2200      	movs	r2, #0
 8001208:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800120a:	4b13      	ldr	r3, [pc, #76]	; (8001258 <MX_ADC1_Init+0x98>)
 800120c:	2201      	movs	r2, #1
 800120e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001210:	4b11      	ldr	r3, [pc, #68]	; (8001258 <MX_ADC1_Init+0x98>)
 8001212:	2200      	movs	r2, #0
 8001214:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001218:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <MX_ADC1_Init+0x98>)
 800121a:	2201      	movs	r2, #1
 800121c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800121e:	480e      	ldr	r0, [pc, #56]	; (8001258 <MX_ADC1_Init+0x98>)
 8001220:	f003 fd40 	bl	8004ca4 <HAL_ADC_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800122a:	f002 fea9 	bl	8003f80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800122e:	230b      	movs	r3, #11
 8001230:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001232:	2301      	movs	r3, #1
 8001234:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800123a:	463b      	mov	r3, r7
 800123c:	4619      	mov	r1, r3
 800123e:	4806      	ldr	r0, [pc, #24]	; (8001258 <MX_ADC1_Init+0x98>)
 8001240:	f003 fede 	bl	8005000 <HAL_ADC_ConfigChannel>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800124a:	f002 fe99 	bl	8003f80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000188 	.word	0x20000188
 800125c:	40012000 	.word	0x40012000
 8001260:	0f000001 	.word	0x0f000001

08001264 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800126a:	463b      	mov	r3, r7
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	605a      	str	r2, [r3, #4]
 8001272:	609a      	str	r2, [r3, #8]
 8001274:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001276:	4b21      	ldr	r3, [pc, #132]	; (80012fc <MX_ADC2_Init+0x98>)
 8001278:	4a21      	ldr	r2, [pc, #132]	; (8001300 <MX_ADC2_Init+0x9c>)
 800127a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800127c:	4b1f      	ldr	r3, [pc, #124]	; (80012fc <MX_ADC2_Init+0x98>)
 800127e:	2200      	movs	r2, #0
 8001280:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001282:	4b1e      	ldr	r3, [pc, #120]	; (80012fc <MX_ADC2_Init+0x98>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001288:	4b1c      	ldr	r3, [pc, #112]	; (80012fc <MX_ADC2_Init+0x98>)
 800128a:	2200      	movs	r2, #0
 800128c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800128e:	4b1b      	ldr	r3, [pc, #108]	; (80012fc <MX_ADC2_Init+0x98>)
 8001290:	2200      	movs	r2, #0
 8001292:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001294:	4b19      	ldr	r3, [pc, #100]	; (80012fc <MX_ADC2_Init+0x98>)
 8001296:	2200      	movs	r2, #0
 8001298:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800129c:	4b17      	ldr	r3, [pc, #92]	; (80012fc <MX_ADC2_Init+0x98>)
 800129e:	2200      	movs	r2, #0
 80012a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012a2:	4b16      	ldr	r3, [pc, #88]	; (80012fc <MX_ADC2_Init+0x98>)
 80012a4:	4a17      	ldr	r2, [pc, #92]	; (8001304 <MX_ADC2_Init+0xa0>)
 80012a6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012a8:	4b14      	ldr	r3, [pc, #80]	; (80012fc <MX_ADC2_Init+0x98>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80012ae:	4b13      	ldr	r3, [pc, #76]	; (80012fc <MX_ADC2_Init+0x98>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80012b4:	4b11      	ldr	r3, [pc, #68]	; (80012fc <MX_ADC2_Init+0x98>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012bc:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <MX_ADC2_Init+0x98>)
 80012be:	2201      	movs	r2, #1
 80012c0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80012c2:	480e      	ldr	r0, [pc, #56]	; (80012fc <MX_ADC2_Init+0x98>)
 80012c4:	f003 fcee 	bl	8004ca4 <HAL_ADC_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80012ce:	f002 fe57 	bl	8003f80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80012d2:	230d      	movs	r3, #13
 80012d4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012d6:	2301      	movs	r3, #1
 80012d8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012da:	2300      	movs	r3, #0
 80012dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80012de:	463b      	mov	r3, r7
 80012e0:	4619      	mov	r1, r3
 80012e2:	4806      	ldr	r0, [pc, #24]	; (80012fc <MX_ADC2_Init+0x98>)
 80012e4:	f003 fe8c 	bl	8005000 <HAL_ADC_ConfigChannel>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80012ee:	f002 fe47 	bl	8003f80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200001d0 	.word	0x200001d0
 8001300:	40012100 	.word	0x40012100
 8001304:	0f000001 	.word	0x0f000001

08001308 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <MX_I2C1_Init+0x50>)
 800130e:	4a13      	ldr	r2, [pc, #76]	; (800135c <MX_I2C1_Init+0x54>)
 8001310:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001312:	4b11      	ldr	r3, [pc, #68]	; (8001358 <MX_I2C1_Init+0x50>)
 8001314:	4a12      	ldr	r2, [pc, #72]	; (8001360 <MX_I2C1_Init+0x58>)
 8001316:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001318:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <MX_I2C1_Init+0x50>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <MX_I2C1_Init+0x50>)
 8001320:	2200      	movs	r2, #0
 8001322:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <MX_I2C1_Init+0x50>)
 8001326:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800132a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800132c:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <MX_I2C1_Init+0x50>)
 800132e:	2200      	movs	r2, #0
 8001330:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <MX_I2C1_Init+0x50>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001338:	4b07      	ldr	r3, [pc, #28]	; (8001358 <MX_I2C1_Init+0x50>)
 800133a:	2200      	movs	r2, #0
 800133c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <MX_I2C1_Init+0x50>)
 8001340:	2200      	movs	r2, #0
 8001342:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001344:	4804      	ldr	r0, [pc, #16]	; (8001358 <MX_I2C1_Init+0x50>)
 8001346:	f004 fc05 	bl	8005b54 <HAL_I2C_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001350:	f002 fe16 	bl	8003f80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	20000218 	.word	0x20000218
 800135c:	40005400 	.word	0x40005400
 8001360:	000186a0 	.word	0x000186a0

08001364 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b092      	sub	sp, #72	; 0x48
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800136a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
 8001384:	615a      	str	r2, [r3, #20]
 8001386:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	2220      	movs	r2, #32
 800138c:	2100      	movs	r1, #0
 800138e:	4618      	mov	r0, r3
 8001390:	f00b fb88 	bl	800caa4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001394:	4b32      	ldr	r3, [pc, #200]	; (8001460 <MX_TIM1_Init+0xfc>)
 8001396:	4a33      	ldr	r2, [pc, #204]	; (8001464 <MX_TIM1_Init+0x100>)
 8001398:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 800139a:	4b31      	ldr	r3, [pc, #196]	; (8001460 <MX_TIM1_Init+0xfc>)
 800139c:	22a0      	movs	r2, #160	; 0xa0
 800139e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a0:	4b2f      	ldr	r3, [pc, #188]	; (8001460 <MX_TIM1_Init+0xfc>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80013a6:	4b2e      	ldr	r3, [pc, #184]	; (8001460 <MX_TIM1_Init+0xfc>)
 80013a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ae:	4b2c      	ldr	r3, [pc, #176]	; (8001460 <MX_TIM1_Init+0xfc>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013b4:	4b2a      	ldr	r3, [pc, #168]	; (8001460 <MX_TIM1_Init+0xfc>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ba:	4b29      	ldr	r3, [pc, #164]	; (8001460 <MX_TIM1_Init+0xfc>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013c0:	4827      	ldr	r0, [pc, #156]	; (8001460 <MX_TIM1_Init+0xfc>)
 80013c2:	f006 f82c 	bl	800741e <HAL_TIM_PWM_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80013cc:	f002 fdd8 	bl	8003f80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d0:	2300      	movs	r3, #0
 80013d2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d4:	2300      	movs	r3, #0
 80013d6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013dc:	4619      	mov	r1, r3
 80013de:	4820      	ldr	r0, [pc, #128]	; (8001460 <MX_TIM1_Init+0xfc>)
 80013e0:	f007 fbb4 	bl	8008b4c <HAL_TIMEx_MasterConfigSynchronization>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80013ea:	f002 fdc9 	bl	8003f80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ee:	2360      	movs	r3, #96	; 0x60
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013f6:	2300      	movs	r3, #0
 80013f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013fa:	2300      	movs	r3, #0
 80013fc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013fe:	2300      	movs	r3, #0
 8001400:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001402:	2300      	movs	r3, #0
 8001404:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001406:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800140a:	220c      	movs	r2, #12
 800140c:	4619      	mov	r1, r3
 800140e:	4814      	ldr	r0, [pc, #80]	; (8001460 <MX_TIM1_Init+0xfc>)
 8001410:	f006 fd6c 	bl	8007eec <HAL_TIM_PWM_ConfigChannel>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 800141a:	f002 fdb1 	bl	8003f80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800141e:	2300      	movs	r3, #0
 8001420:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001422:	2300      	movs	r3, #0
 8001424:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001432:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001436:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001438:	2300      	movs	r3, #0
 800143a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	4619      	mov	r1, r3
 8001440:	4807      	ldr	r0, [pc, #28]	; (8001460 <MX_TIM1_Init+0xfc>)
 8001442:	f007 fbff 	bl	8008c44 <HAL_TIMEx_ConfigBreakDeadTime>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 800144c:	f002 fd98 	bl	8003f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001450:	4803      	ldr	r0, [pc, #12]	; (8001460 <MX_TIM1_Init+0xfc>)
 8001452:	f003 fa09 	bl	8004868 <HAL_TIM_MspPostInit>

}
 8001456:	bf00      	nop
 8001458:	3748      	adds	r7, #72	; 0x48
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	2000026c 	.word	0x2000026c
 8001464:	40010000 	.word	0x40010000

08001468 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08c      	sub	sp, #48	; 0x30
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800146e:	f107 030c 	add.w	r3, r7, #12
 8001472:	2224      	movs	r2, #36	; 0x24
 8001474:	2100      	movs	r1, #0
 8001476:	4618      	mov	r0, r3
 8001478:	f00b fb14 	bl	800caa4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001484:	4b21      	ldr	r3, [pc, #132]	; (800150c <MX_TIM2_Init+0xa4>)
 8001486:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800148a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800148c:	4b1f      	ldr	r3, [pc, #124]	; (800150c <MX_TIM2_Init+0xa4>)
 800148e:	2200      	movs	r2, #0
 8001490:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001492:	4b1e      	ldr	r3, [pc, #120]	; (800150c <MX_TIM2_Init+0xa4>)
 8001494:	2200      	movs	r2, #0
 8001496:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001498:	4b1c      	ldr	r3, [pc, #112]	; (800150c <MX_TIM2_Init+0xa4>)
 800149a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800149e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a0:	4b1a      	ldr	r3, [pc, #104]	; (800150c <MX_TIM2_Init+0xa4>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a6:	4b19      	ldr	r3, [pc, #100]	; (800150c <MX_TIM2_Init+0xa4>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014ac:	2303      	movs	r3, #3
 80014ae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014b0:	2300      	movs	r3, #0
 80014b2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014b4:	2301      	movs	r3, #1
 80014b6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80014bc:	230a      	movs	r3, #10
 80014be:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014c0:	2300      	movs	r3, #0
 80014c2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014c4:	2301      	movs	r3, #1
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014c8:	2300      	movs	r3, #0
 80014ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80014cc:	230a      	movs	r3, #10
 80014ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80014d0:	f107 030c 	add.w	r3, r7, #12
 80014d4:	4619      	mov	r1, r3
 80014d6:	480d      	ldr	r0, [pc, #52]	; (800150c <MX_TIM2_Init+0xa4>)
 80014d8:	f006 fa30 	bl	800793c <HAL_TIM_Encoder_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80014e2:	f002 fd4d 	bl	8003f80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e6:	2300      	movs	r3, #0
 80014e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	4619      	mov	r1, r3
 80014f2:	4806      	ldr	r0, [pc, #24]	; (800150c <MX_TIM2_Init+0xa4>)
 80014f4:	f007 fb2a 	bl	8008b4c <HAL_TIMEx_MasterConfigSynchronization>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80014fe:	f002 fd3f 	bl	8003f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001502:	bf00      	nop
 8001504:	3730      	adds	r7, #48	; 0x30
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	200002b4 	.word	0x200002b4

08001510 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08c      	sub	sp, #48	; 0x30
 8001514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001516:	f107 030c 	add.w	r3, r7, #12
 800151a:	2224      	movs	r2, #36	; 0x24
 800151c:	2100      	movs	r1, #0
 800151e:	4618      	mov	r0, r3
 8001520:	f00b fac0 	bl	800caa4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800152c:	4b20      	ldr	r3, [pc, #128]	; (80015b0 <MX_TIM3_Init+0xa0>)
 800152e:	4a21      	ldr	r2, [pc, #132]	; (80015b4 <MX_TIM3_Init+0xa4>)
 8001530:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001532:	4b1f      	ldr	r3, [pc, #124]	; (80015b0 <MX_TIM3_Init+0xa0>)
 8001534:	2200      	movs	r2, #0
 8001536:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001538:	4b1d      	ldr	r3, [pc, #116]	; (80015b0 <MX_TIM3_Init+0xa0>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800153e:	4b1c      	ldr	r3, [pc, #112]	; (80015b0 <MX_TIM3_Init+0xa0>)
 8001540:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001544:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001546:	4b1a      	ldr	r3, [pc, #104]	; (80015b0 <MX_TIM3_Init+0xa0>)
 8001548:	2200      	movs	r2, #0
 800154a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800154c:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <MX_TIM3_Init+0xa0>)
 800154e:	2200      	movs	r2, #0
 8001550:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001552:	2303      	movs	r3, #3
 8001554:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001556:	2300      	movs	r3, #0
 8001558:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800155a:	2301      	movs	r3, #1
 800155c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800155e:	2300      	movs	r3, #0
 8001560:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001566:	2300      	movs	r3, #0
 8001568:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800156a:	2301      	movs	r3, #1
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800156e:	2300      	movs	r3, #0
 8001570:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001576:	f107 030c 	add.w	r3, r7, #12
 800157a:	4619      	mov	r1, r3
 800157c:	480c      	ldr	r0, [pc, #48]	; (80015b0 <MX_TIM3_Init+0xa0>)
 800157e:	f006 f9dd 	bl	800793c <HAL_TIM_Encoder_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001588:	f002 fcfa 	bl	8003f80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800158c:	2300      	movs	r3, #0
 800158e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001590:	2300      	movs	r3, #0
 8001592:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001594:	1d3b      	adds	r3, r7, #4
 8001596:	4619      	mov	r1, r3
 8001598:	4805      	ldr	r0, [pc, #20]	; (80015b0 <MX_TIM3_Init+0xa0>)
 800159a:	f007 fad7 	bl	8008b4c <HAL_TIMEx_MasterConfigSynchronization>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80015a4:	f002 fcec 	bl	8003f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015a8:	bf00      	nop
 80015aa:	3730      	adds	r7, #48	; 0x30
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	200002fc 	.word	0x200002fc
 80015b4:	40000400 	.word	0x40000400

080015b8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015be:	f107 0310 	add.w	r3, r7, #16
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80015c8:	463b      	mov	r3, r7
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015d4:	4b20      	ldr	r3, [pc, #128]	; (8001658 <MX_TIM4_Init+0xa0>)
 80015d6:	4a21      	ldr	r2, [pc, #132]	; (800165c <MX_TIM4_Init+0xa4>)
 80015d8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 80015da:	4b1f      	ldr	r3, [pc, #124]	; (8001658 <MX_TIM4_Init+0xa0>)
 80015dc:	2247      	movs	r2, #71	; 0x47
 80015de:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e0:	4b1d      	ldr	r3, [pc, #116]	; (8001658 <MX_TIM4_Init+0xa0>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xffff-1;
 80015e6:	4b1c      	ldr	r3, [pc, #112]	; (8001658 <MX_TIM4_Init+0xa0>)
 80015e8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80015ec:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ee:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <MX_TIM4_Init+0xa0>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f4:	4b18      	ldr	r3, [pc, #96]	; (8001658 <MX_TIM4_Init+0xa0>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80015fa:	4817      	ldr	r0, [pc, #92]	; (8001658 <MX_TIM4_Init+0xa0>)
 80015fc:	f006 f826 	bl	800764c <HAL_TIM_IC_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001606:	f002 fcbb 	bl	8003f80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800160a:	2300      	movs	r3, #0
 800160c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001612:	f107 0310 	add.w	r3, r7, #16
 8001616:	4619      	mov	r1, r3
 8001618:	480f      	ldr	r0, [pc, #60]	; (8001658 <MX_TIM4_Init+0xa0>)
 800161a:	f007 fa97 	bl	8008b4c <HAL_TIMEx_MasterConfigSynchronization>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001624:	f002 fcac 	bl	8003f80 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001628:	2300      	movs	r3, #0
 800162a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800162c:	2301      	movs	r3, #1
 800162e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001630:	2300      	movs	r3, #0
 8001632:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001638:	463b      	mov	r3, r7
 800163a:	2200      	movs	r2, #0
 800163c:	4619      	mov	r1, r3
 800163e:	4806      	ldr	r0, [pc, #24]	; (8001658 <MX_TIM4_Init+0xa0>)
 8001640:	f006 fbb8 	bl	8007db4 <HAL_TIM_IC_ConfigChannel>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800164a:	f002 fc99 	bl	8003f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800164e:	bf00      	nop
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000344 	.word	0x20000344
 800165c:	40000800 	.word	0x40000800

08001660 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b096      	sub	sp, #88	; 0x58
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001666:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001674:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800167e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	609a      	str	r2, [r3, #8]
 800168a:	60da      	str	r2, [r3, #12]
 800168c:	611a      	str	r2, [r3, #16]
 800168e:	615a      	str	r2, [r3, #20]
 8001690:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001692:	1d3b      	adds	r3, r7, #4
 8001694:	2220      	movs	r2, #32
 8001696:	2100      	movs	r1, #0
 8001698:	4618      	mov	r0, r3
 800169a:	f00b fa03 	bl	800caa4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800169e:	4b43      	ldr	r3, [pc, #268]	; (80017ac <MX_TIM8_Init+0x14c>)
 80016a0:	4a43      	ldr	r2, [pc, #268]	; (80017b0 <MX_TIM8_Init+0x150>)
 80016a2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80016a4:	4b41      	ldr	r3, [pc, #260]	; (80017ac <MX_TIM8_Init+0x14c>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016aa:	4b40      	ldr	r3, [pc, #256]	; (80017ac <MX_TIM8_Init+0x14c>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 80016b0:	4b3e      	ldr	r3, [pc, #248]	; (80017ac <MX_TIM8_Init+0x14c>)
 80016b2:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80016b6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b8:	4b3c      	ldr	r3, [pc, #240]	; (80017ac <MX_TIM8_Init+0x14c>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80016be:	4b3b      	ldr	r3, [pc, #236]	; (80017ac <MX_TIM8_Init+0x14c>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c4:	4b39      	ldr	r3, [pc, #228]	; (80017ac <MX_TIM8_Init+0x14c>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80016ca:	4838      	ldr	r0, [pc, #224]	; (80017ac <MX_TIM8_Init+0x14c>)
 80016cc:	f005 fe58 	bl	8007380 <HAL_TIM_Base_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80016d6:	f002 fc53 	bl	8003f80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016de:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80016e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016e4:	4619      	mov	r1, r3
 80016e6:	4831      	ldr	r0, [pc, #196]	; (80017ac <MX_TIM8_Init+0x14c>)
 80016e8:	f006 fcc2 	bl	8008070 <HAL_TIM_ConfigClockSource>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80016f2:	f002 fc45 	bl	8003f80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80016f6:	482d      	ldr	r0, [pc, #180]	; (80017ac <MX_TIM8_Init+0x14c>)
 80016f8:	f005 fe91 	bl	800741e <HAL_TIM_PWM_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001702:	f002 fc3d 	bl	8003f80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001706:	2300      	movs	r3, #0
 8001708:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800170a:	2300      	movs	r3, #0
 800170c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800170e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001712:	4619      	mov	r1, r3
 8001714:	4825      	ldr	r0, [pc, #148]	; (80017ac <MX_TIM8_Init+0x14c>)
 8001716:	f007 fa19 	bl	8008b4c <HAL_TIMEx_MasterConfigSynchronization>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001720:	f002 fc2e 	bl	8003f80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001724:	2360      	movs	r3, #96	; 0x60
 8001726:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800172c:	2300      	movs	r3, #0
 800172e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001730:	2300      	movs	r3, #0
 8001732:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001734:	2300      	movs	r3, #0
 8001736:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001738:	2300      	movs	r3, #0
 800173a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800173c:	2300      	movs	r3, #0
 800173e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001744:	2200      	movs	r2, #0
 8001746:	4619      	mov	r1, r3
 8001748:	4818      	ldr	r0, [pc, #96]	; (80017ac <MX_TIM8_Init+0x14c>)
 800174a:	f006 fbcf 	bl	8007eec <HAL_TIM_PWM_ConfigChannel>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001754:	f002 fc14 	bl	8003f80 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800175c:	2204      	movs	r2, #4
 800175e:	4619      	mov	r1, r3
 8001760:	4812      	ldr	r0, [pc, #72]	; (80017ac <MX_TIM8_Init+0x14c>)
 8001762:	f006 fbc3 	bl	8007eec <HAL_TIM_PWM_ConfigChannel>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 800176c:	f002 fc08 	bl	8003f80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001770:	2300      	movs	r3, #0
 8001772:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001774:	2300      	movs	r3, #0
 8001776:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001778:	2300      	movs	r3, #0
 800177a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001784:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001788:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800178a:	2300      	movs	r3, #0
 800178c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800178e:	1d3b      	adds	r3, r7, #4
 8001790:	4619      	mov	r1, r3
 8001792:	4806      	ldr	r0, [pc, #24]	; (80017ac <MX_TIM8_Init+0x14c>)
 8001794:	f007 fa56 	bl	8008c44 <HAL_TIMEx_ConfigBreakDeadTime>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 800179e:	f002 fbef 	bl	8003f80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80017a2:	bf00      	nop
 80017a4:	3758      	adds	r7, #88	; 0x58
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	2000038c 	.word	0x2000038c
 80017b0:	40010400 	.word	0x40010400

080017b4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017b8:	4b11      	ldr	r3, [pc, #68]	; (8001800 <MX_USART3_UART_Init+0x4c>)
 80017ba:	4a12      	ldr	r2, [pc, #72]	; (8001804 <MX_USART3_UART_Init+0x50>)
 80017bc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017be:	4b10      	ldr	r3, [pc, #64]	; (8001800 <MX_USART3_UART_Init+0x4c>)
 80017c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017c4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017c6:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <MX_USART3_UART_Init+0x4c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017cc:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <MX_USART3_UART_Init+0x4c>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017d2:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <MX_USART3_UART_Init+0x4c>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017d8:	4b09      	ldr	r3, [pc, #36]	; (8001800 <MX_USART3_UART_Init+0x4c>)
 80017da:	220c      	movs	r2, #12
 80017dc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017de:	4b08      	ldr	r3, [pc, #32]	; (8001800 <MX_USART3_UART_Init+0x4c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <MX_USART3_UART_Init+0x4c>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017ea:	4805      	ldr	r0, [pc, #20]	; (8001800 <MX_USART3_UART_Init+0x4c>)
 80017ec:	f007 fa90 	bl	8008d10 <HAL_UART_Init>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80017f6:	f002 fbc3 	bl	8003f80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	200003d4 	.word	0x200003d4
 8001804:	40004800 	.word	0x40004800

08001808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08a      	sub	sp, #40	; 0x28
 800180c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180e:	f107 0314 	add.w	r3, r7, #20
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	605a      	str	r2, [r3, #4]
 8001818:	609a      	str	r2, [r3, #8]
 800181a:	60da      	str	r2, [r3, #12]
 800181c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	613b      	str	r3, [r7, #16]
 8001822:	4b4d      	ldr	r3, [pc, #308]	; (8001958 <MX_GPIO_Init+0x150>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	4a4c      	ldr	r2, [pc, #304]	; (8001958 <MX_GPIO_Init+0x150>)
 8001828:	f043 0310 	orr.w	r3, r3, #16
 800182c:	6313      	str	r3, [r2, #48]	; 0x30
 800182e:	4b4a      	ldr	r3, [pc, #296]	; (8001958 <MX_GPIO_Init+0x150>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	f003 0310 	and.w	r3, r3, #16
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	4b46      	ldr	r3, [pc, #280]	; (8001958 <MX_GPIO_Init+0x150>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	4a45      	ldr	r2, [pc, #276]	; (8001958 <MX_GPIO_Init+0x150>)
 8001844:	f043 0304 	orr.w	r3, r3, #4
 8001848:	6313      	str	r3, [r2, #48]	; 0x30
 800184a:	4b43      	ldr	r3, [pc, #268]	; (8001958 <MX_GPIO_Init+0x150>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	f003 0304 	and.w	r3, r3, #4
 8001852:	60fb      	str	r3, [r7, #12]
 8001854:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	4b3f      	ldr	r3, [pc, #252]	; (8001958 <MX_GPIO_Init+0x150>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	4a3e      	ldr	r2, [pc, #248]	; (8001958 <MX_GPIO_Init+0x150>)
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	6313      	str	r3, [r2, #48]	; 0x30
 8001866:	4b3c      	ldr	r3, [pc, #240]	; (8001958 <MX_GPIO_Init+0x150>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	607b      	str	r3, [r7, #4]
 8001876:	4b38      	ldr	r3, [pc, #224]	; (8001958 <MX_GPIO_Init+0x150>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	4a37      	ldr	r2, [pc, #220]	; (8001958 <MX_GPIO_Init+0x150>)
 800187c:	f043 0308 	orr.w	r3, r3, #8
 8001880:	6313      	str	r3, [r2, #48]	; 0x30
 8001882:	4b35      	ldr	r3, [pc, #212]	; (8001958 <MX_GPIO_Init+0x150>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	f003 0308 	and.w	r3, r3, #8
 800188a:	607b      	str	r3, [r7, #4]
 800188c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	603b      	str	r3, [r7, #0]
 8001892:	4b31      	ldr	r3, [pc, #196]	; (8001958 <MX_GPIO_Init+0x150>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a30      	ldr	r2, [pc, #192]	; (8001958 <MX_GPIO_Init+0x150>)
 8001898:	f043 0302 	orr.w	r3, r3, #2
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b2e      	ldr	r3, [pc, #184]	; (8001958 <MX_GPIO_Init+0x150>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	603b      	str	r3, [r7, #0]
 80018a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DE_Pin
 80018aa:	2200      	movs	r2, #0
 80018ac:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 80018b0:	482a      	ldr	r0, [pc, #168]	; (800195c <MX_GPIO_Init+0x154>)
 80018b2:	f004 f903 	bl	8005abc <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 80018b6:	2200      	movs	r2, #0
 80018b8:	213c      	movs	r1, #60	; 0x3c
 80018ba:	4829      	ldr	r0, [pc, #164]	; (8001960 <MX_GPIO_Init+0x158>)
 80018bc:	f004 f8fe 	bl	8005abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 80018c0:	2200      	movs	r2, #0
 80018c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018c6:	4827      	ldr	r0, [pc, #156]	; (8001964 <MX_GPIO_Init+0x15c>)
 80018c8:	f004 f8f8 	bl	8005abc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DE_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DE_Pin
 80018cc:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 80018d0:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d2:	2301      	movs	r3, #1
 80018d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018da:	2300      	movs	r3, #0
 80018dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018de:	f107 0314 	add.w	r3, r7, #20
 80018e2:	4619      	mov	r1, r3
 80018e4:	481d      	ldr	r0, [pc, #116]	; (800195c <MX_GPIO_Init+0x154>)
 80018e6:	f003 ff4d 	bl	8005784 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 80018ea:	233c      	movs	r3, #60	; 0x3c
 80018ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ee:	2301      	movs	r3, #1
 80018f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f6:	2300      	movs	r3, #0
 80018f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fa:	f107 0314 	add.w	r3, r7, #20
 80018fe:	4619      	mov	r1, r3
 8001900:	4817      	ldr	r0, [pc, #92]	; (8001960 <MX_GPIO_Init+0x158>)
 8001902:	f003 ff3f 	bl	8005784 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8001906:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800190a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190c:	2301      	movs	r3, #1
 800190e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001914:	2300      	movs	r3, #0
 8001916:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	4619      	mov	r1, r3
 800191e:	4811      	ldr	r0, [pc, #68]	; (8001964 <MX_GPIO_Init+0x15c>)
 8001920:	f003 ff30 	bl	8005784 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001924:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001928:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800192a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800192e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	4619      	mov	r1, r3
 800193a:	4809      	ldr	r0, [pc, #36]	; (8001960 <MX_GPIO_Init+0x158>)
 800193c:	f003 ff22 	bl	8005784 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001940:	2200      	movs	r2, #0
 8001942:	2105      	movs	r1, #5
 8001944:	2028      	movs	r0, #40	; 0x28
 8001946:	f003 fe54 	bl	80055f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800194a:	2028      	movs	r0, #40	; 0x28
 800194c:	f003 fe6d 	bl	800562a <HAL_NVIC_EnableIRQ>

}
 8001950:	bf00      	nop
 8001952:	3728      	adds	r7, #40	; 0x28
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	40023800 	.word	0x40023800
 800195c:	40021000 	.word	0x40021000
 8001960:	40020000 	.word	0x40020000
 8001964:	40020c00 	.word	0x40020c00

08001968 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_12) {
 8001972:	88fb      	ldrh	r3, [r7, #6]
 8001974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001978:	d101      	bne.n	800197e <HAL_GPIO_EXTI_Callback+0x16>
        NVIC_SystemReset();
 800197a:	f7ff fb13 	bl	8000fa4 <__NVIC_SystemReset>
    }
}
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
	...

08001988 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
    UNUSED(huart);
    HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, 5);
 8001990:	2205      	movs	r2, #5
 8001992:	4905      	ldr	r1, [pc, #20]	; (80019a8 <HAL_UART_RxCpltCallback+0x20>)
 8001994:	4805      	ldr	r0, [pc, #20]	; (80019ac <HAL_UART_RxCpltCallback+0x24>)
 8001996:	f007 fa9a 	bl	8008ece <HAL_UART_Receive_IT>
    ack = 0; // global ack flag, if 2= default state, 0 = buffer received, triggered ISR, 1 = executed command, ready to send ACK back to RPI
 800199a:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <HAL_UART_RxCpltCallback+0x28>)
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
}
 80019a0:	bf00      	nop
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	2000009c 	.word	0x2000009c
 80019ac:	200003d4 	.word	0x200003d4
 80019b0:	20000000 	.word	0x20000000

080019b4 <readByte>:

// Gyro
void readByte(uint8_t addr, uint8_t *data)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af02      	add	r7, sp, #8
 80019ba:	4603      	mov	r3, r0
 80019bc:	6039      	str	r1, [r7, #0]
 80019be:	71fb      	strb	r3, [r7, #7]
    gyroBuffer[0] = addr;
 80019c0:	4a0e      	ldr	r2, [pc, #56]	; (80019fc <readByte+0x48>)
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	7013      	strb	r3, [r2, #0]
    HAL_I2C_Master_Transmit(&hi2c1, ICMAddress << 1, gyroBuffer, 1, 10);
 80019c6:	2368      	movs	r3, #104	; 0x68
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	b299      	uxth	r1, r3
 80019ce:	230a      	movs	r3, #10
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	2301      	movs	r3, #1
 80019d4:	4a09      	ldr	r2, [pc, #36]	; (80019fc <readByte+0x48>)
 80019d6:	480a      	ldr	r0, [pc, #40]	; (8001a00 <readByte+0x4c>)
 80019d8:	f004 fa00 	bl	8005ddc <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, ICMAddress << 1, data, 2, 20);
 80019dc:	2368      	movs	r3, #104	; 0x68
 80019de:	b29b      	uxth	r3, r3
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	b299      	uxth	r1, r3
 80019e4:	2314      	movs	r3, #20
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	2302      	movs	r3, #2
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	4804      	ldr	r0, [pc, #16]	; (8001a00 <readByte+0x4c>)
 80019ee:	f004 faf3 	bl	8005fd8 <HAL_I2C_Master_Receive>
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000120 	.word	0x20000120
 8001a00:	20000218 	.word	0x20000218

08001a04 <writeByte>:

void writeByte(uint8_t addr, uint8_t data)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af02      	add	r7, sp, #8
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	460a      	mov	r2, r1
 8001a0e:	71fb      	strb	r3, [r7, #7]
 8001a10:	4613      	mov	r3, r2
 8001a12:	71bb      	strb	r3, [r7, #6]
    gyroBuffer[0] = addr;
 8001a14:	4a0a      	ldr	r2, [pc, #40]	; (8001a40 <writeByte+0x3c>)
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	7013      	strb	r3, [r2, #0]
    gyroBuffer[1] = data;
 8001a1a:	4a09      	ldr	r2, [pc, #36]	; (8001a40 <writeByte+0x3c>)
 8001a1c:	79bb      	ldrb	r3, [r7, #6]
 8001a1e:	7053      	strb	r3, [r2, #1]
    HAL_I2C_Master_Transmit(&hi2c1, ICMAddress << 1, gyroBuffer, 2, 20);
 8001a20:	2368      	movs	r3, #104	; 0x68
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	b299      	uxth	r1, r3
 8001a28:	2314      	movs	r3, #20
 8001a2a:	9300      	str	r3, [sp, #0]
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	4a04      	ldr	r2, [pc, #16]	; (8001a40 <writeByte+0x3c>)
 8001a30:	4804      	ldr	r0, [pc, #16]	; (8001a44 <writeByte+0x40>)
 8001a32:	f004 f9d3 	bl	8005ddc <HAL_I2C_Master_Transmit>
}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000120 	.word	0x20000120
 8001a44:	20000218 	.word	0x20000218

08001a48 <gyroInit>:

void gyroInit()
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
    writeByte(0x06, 0x00);
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	2006      	movs	r0, #6
 8001a50:	f7ff ffd8 	bl	8001a04 <writeByte>
    osDelay(10);
 8001a54:	200a      	movs	r0, #10
 8001a56:	f008 fae3 	bl	800a020 <osDelay>
    writeByte(0x03, 0x80);
 8001a5a:	2180      	movs	r1, #128	; 0x80
 8001a5c:	2003      	movs	r0, #3
 8001a5e:	f7ff ffd1 	bl	8001a04 <writeByte>
    osDelay(10);
 8001a62:	200a      	movs	r0, #10
 8001a64:	f008 fadc 	bl	800a020 <osDelay>
    writeByte(0x07, 0x07);
 8001a68:	2107      	movs	r1, #7
 8001a6a:	2007      	movs	r0, #7
 8001a6c:	f7ff ffca 	bl	8001a04 <writeByte>
    osDelay(10);
 8001a70:	200a      	movs	r0, #10
 8001a72:	f008 fad5 	bl	800a020 <osDelay>
    writeByte(0x06, 0x01);
 8001a76:	2101      	movs	r1, #1
 8001a78:	2006      	movs	r0, #6
 8001a7a:	f7ff ffc3 	bl	8001a04 <writeByte>
    osDelay(10);
 8001a7e:	200a      	movs	r0, #10
 8001a80:	f008 face 	bl	800a020 <osDelay>
    writeByte(0x7F, 0x20);
 8001a84:	2120      	movs	r1, #32
 8001a86:	207f      	movs	r0, #127	; 0x7f
 8001a88:	f7ff ffbc 	bl	8001a04 <writeByte>
    osDelay(10);
 8001a8c:	200a      	movs	r0, #10
 8001a8e:	f008 fac7 	bl	800a020 <osDelay>
    writeByte(0x01, 0x2F);
 8001a92:	212f      	movs	r1, #47	; 0x2f
 8001a94:	2001      	movs	r0, #1
 8001a96:	f7ff ffb5 	bl	8001a04 <writeByte>
    osDelay(10);
 8001a9a:	200a      	movs	r0, #10
 8001a9c:	f008 fac0 	bl	800a020 <osDelay>
    writeByte(0x0, 0x00);
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	f7ff ffae 	bl	8001a04 <writeByte>
    osDelay(10);
 8001aa8:	200a      	movs	r0, #10
 8001aaa:	f008 fab9 	bl	800a020 <osDelay>
    writeByte(0x7F, 0x00);
 8001aae:	2100      	movs	r1, #0
 8001ab0:	207f      	movs	r0, #127	; 0x7f
 8001ab2:	f7ff ffa7 	bl	8001a04 <writeByte>
    osDelay(10);
 8001ab6:	200a      	movs	r0, #10
 8001ab8:	f008 fab2 	bl	800a020 <osDelay>
    writeByte(0x07, 0x00);
 8001abc:	2100      	movs	r1, #0
 8001abe:	2007      	movs	r0, #7
 8001ac0:	f7ff ffa0 	bl	8001a04 <writeByte>
    osDelay(10);
 8001ac4:	200a      	movs	r0, #10
 8001ac6:	f008 faab 	bl	800a020 <osDelay>
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
	...

08001ad0 <HAL_Delay_uS>:
// UltraSonic
void HAL_Delay_uS(uint16_t time)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim4, 0);
 8001ada:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <HAL_Delay_uS+0x30>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	625a      	str	r2, [r3, #36]	; 0x24
    while (__HAL_TIM_GET_COUNTER(&htim4) < time)
 8001ae2:	bf00      	nop
 8001ae4:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <HAL_Delay_uS+0x30>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001aea:	88fb      	ldrh	r3, [r7, #6]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d3f9      	bcc.n	8001ae4 <HAL_Delay_uS+0x14>
        ;
}
 8001af0:	bf00      	nop
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	20000344 	.word	0x20000344
 8001b04:	00000000 	.word	0x00000000

08001b08 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
    if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) // if the interrupt source is channel1
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	7f1b      	ldrb	r3, [r3, #28]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	f040 808a 	bne.w	8001c2e <HAL_TIM_IC_CaptureCallback+0x126>
    {
        if (Is_First_Captured == 0) // if the first value is not captured
 8001b1a:	4b49      	ldr	r3, [pc, #292]	; (8001c40 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d11b      	bne.n	8001b5a <HAL_TIM_IC_CaptureCallback+0x52>
        {
            IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8001b22:	2100      	movs	r1, #0
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f006 fb6b 	bl	8008200 <HAL_TIM_ReadCapturedValue>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4b45      	ldr	r3, [pc, #276]	; (8001c44 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001b30:	601a      	str	r2, [r3, #0]
            Is_First_Captured = 1;                                    // set the first captured as true
 8001b32:	4b43      	ldr	r3, [pc, #268]	; (8001c40 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001b34:	2201      	movs	r2, #1
 8001b36:	601a      	str	r2, [r3, #0]
            // Now change the polarity to falling edge
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6a1a      	ldr	r2, [r3, #32]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f022 020a 	bic.w	r2, r2, #10
 8001b46:	621a      	str	r2, [r3, #32]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6a1a      	ldr	r2, [r3, #32]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f042 0202 	orr.w	r2, r2, #2
 8001b56:	621a      	str	r2, [r3, #32]
            // set polarity to rising edge
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
            __HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
        }
    }
}
 8001b58:	e069      	b.n	8001c2e <HAL_TIM_IC_CaptureCallback+0x126>
        else if (Is_First_Captured == 1) // if the first is already captured
 8001b5a:	4b39      	ldr	r3, [pc, #228]	; (8001c40 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d165      	bne.n	8001c2e <HAL_TIM_IC_CaptureCallback+0x126>
            IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read second value
 8001b62:	2100      	movs	r1, #0
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f006 fb4b 	bl	8008200 <HAL_TIM_ReadCapturedValue>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4b36      	ldr	r3, [pc, #216]	; (8001c48 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001b70:	601a      	str	r2, [r3, #0]
            __HAL_TIM_SET_COUNTER(htim, 0);                           // reset the counter
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2200      	movs	r2, #0
 8001b78:	625a      	str	r2, [r3, #36]	; 0x24
            if (IC_Val2 > IC_Val1)
 8001b7a:	4b33      	ldr	r3, [pc, #204]	; (8001c48 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	4b31      	ldr	r3, [pc, #196]	; (8001c44 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	dd0d      	ble.n	8001ba2 <HAL_TIM_IC_CaptureCallback+0x9a>
                Difference = IC_Val2 - IC_Val1;
 8001b86:	4b30      	ldr	r3, [pc, #192]	; (8001c48 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	4b2e      	ldr	r3, [pc, #184]	; (8001c44 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7fe fcd7 	bl	8000544 <__aeabi_i2d>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	492c      	ldr	r1, [pc, #176]	; (8001c4c <HAL_TIM_IC_CaptureCallback+0x144>)
 8001b9c:	e9c1 2300 	strd	r2, r3, [r1]
 8001ba0:	e015      	b.n	8001bce <HAL_TIM_IC_CaptureCallback+0xc6>
            else if (IC_Val1 > IC_Val2)
 8001ba2:	4b28      	ldr	r3, [pc, #160]	; (8001c44 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	4b28      	ldr	r3, [pc, #160]	; (8001c48 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	dd0f      	ble.n	8001bce <HAL_TIM_IC_CaptureCallback+0xc6>
                Difference = (0xffff - IC_Val1) + IC_Val2;
 8001bae:	4b25      	ldr	r3, [pc, #148]	; (8001c44 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001bb6:	33ff      	adds	r3, #255	; 0xff
 8001bb8:	4a23      	ldr	r2, [pc, #140]	; (8001c48 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001bba:	6812      	ldr	r2, [r2, #0]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7fe fcc0 	bl	8000544 <__aeabi_i2d>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	4920      	ldr	r1, [pc, #128]	; (8001c4c <HAL_TIM_IC_CaptureCallback+0x144>)
 8001bca:	e9c1 2300 	strd	r2, r3, [r1]
            Distance = Difference * .034 / 2;
 8001bce:	4b1f      	ldr	r3, [pc, #124]	; (8001c4c <HAL_TIM_IC_CaptureCallback+0x144>)
 8001bd0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bd4:	a318      	add	r3, pc, #96	; (adr r3, 8001c38 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bda:	f7fe fd1d 	bl	8000618 <__aeabi_dmul>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	4610      	mov	r0, r2
 8001be4:	4619      	mov	r1, r3
 8001be6:	f04f 0200 	mov.w	r2, #0
 8001bea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bee:	f7fe fe3d 	bl	800086c <__aeabi_ddiv>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	4916      	ldr	r1, [pc, #88]	; (8001c50 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001bf8:	e9c1 2300 	strd	r2, r3, [r1]
            Is_First_Captured = 0; // set it back to false
 8001bfc:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6a1a      	ldr	r2, [r3, #32]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 020a 	bic.w	r2, r2, #10
 8001c10:	621a      	str	r2, [r3, #32]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	6a12      	ldr	r2, [r2, #32]
 8001c1c:	621a      	str	r2, [r3, #32]
            __HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 8001c1e:	4b0d      	ldr	r3, [pc, #52]	; (8001c54 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68da      	ldr	r2, [r3, #12]
 8001c24:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f022 0202 	bic.w	r2, r2, #2
 8001c2c:	60da      	str	r2, [r3, #12]
}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	b020c49c 	.word	0xb020c49c
 8001c3c:	3fa16872 	.word	0x3fa16872
 8001c40:	20000168 	.word	0x20000168
 8001c44:	2000016c 	.word	0x2000016c
 8001c48:	20000170 	.word	0x20000170
 8001c4c:	20000178 	.word	0x20000178
 8001c50:	20000180 	.word	0x20000180
 8001c54:	20000344 	.word	0x20000344

08001c58 <Ultrasonic_Read>:
void Ultrasonic_Read(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
    // Code for Ultrasonic Sensor
    HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET); // pull the TRIG pin HIGH
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c62:	480b      	ldr	r0, [pc, #44]	; (8001c90 <Ultrasonic_Read+0x38>)
 8001c64:	f003 ff2a 	bl	8005abc <HAL_GPIO_WritePin>
    HAL_Delay_uS(10);
 8001c68:	200a      	movs	r0, #10
 8001c6a:	f7ff ff31 	bl	8001ad0 <HAL_Delay_uS>
    HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET); // pull the TRIG pin low
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c74:	4806      	ldr	r0, [pc, #24]	; (8001c90 <Ultrasonic_Read+0x38>)
 8001c76:	f003 ff21 	bl	8005abc <HAL_GPIO_WritePin>

    __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
 8001c7a:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <Ultrasonic_Read+0x3c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	68da      	ldr	r2, [r3, #12]
 8001c80:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <Ultrasonic_Read+0x3c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f042 0202 	orr.w	r2, r2, #2
 8001c88:	60da      	str	r2, [r3, #12]
}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40020c00 	.word	0x40020c00
 8001c94:	20000344 	.word	0x20000344

08001c98 <PIDConfigInit>:

// PID for Straight line
void PIDConfigInit(PIDConfig *cfg, const float Kp, const float Ki, const float Kd)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	ed87 0a02 	vstr	s0, [r7, #8]
 8001ca4:	edc7 0a01 	vstr	s1, [r7, #4]
 8001ca8:	ed87 1a00 	vstr	s2, [r7]
    cfg->Kp = Kp;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	68ba      	ldr	r2, [r7, #8]
 8001cb0:	601a      	str	r2, [r3, #0]
    cfg->Ki = Ki;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	605a      	str	r2, [r3, #4]
    cfg->Kd = Kd;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	609a      	str	r2, [r3, #8]
    cfg->ek1 = 0;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f04f 0200 	mov.w	r2, #0
 8001cc4:	60da      	str	r2, [r3, #12]
    cfg->ekSum = 0;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f04f 0200 	mov.w	r2, #0
 8001ccc:	611a      	str	r2, [r3, #16]
}
 8001cce:	bf00      	nop
 8001cd0:	3714      	adds	r7, #20
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
	...

08001cdc <start_encoder>:
    cfg->ek1 = 0;
    cfg->ekSum = 0;
}

void start_encoder()
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); // encoder for motor A(left)
 8001ce0:	213c      	movs	r1, #60	; 0x3c
 8001ce2:	4804      	ldr	r0, [pc, #16]	; (8001cf4 <start_encoder+0x18>)
 8001ce4:	f005 fed0 	bl	8007a88 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); // encoder for motor B(right)
 8001ce8:	213c      	movs	r1, #60	; 0x3c
 8001cea:	4803      	ldr	r0, [pc, #12]	; (8001cf8 <start_encoder+0x1c>)
 8001cec:	f005 fecc 	bl	8007a88 <HAL_TIM_Encoder_Start>
}
 8001cf0:	bf00      	nop
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	200002b4 	.word	0x200002b4
 8001cf8:	200002fc 	.word	0x200002fc

08001cfc <Motor_Init>:

void Motor_Init()
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1); // left
 8001d00:	2100      	movs	r1, #0
 8001d02:	4806      	ldr	r0, [pc, #24]	; (8001d1c <Motor_Init+0x20>)
 8001d04:	f005 fbda 	bl	80074bc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2); // right
 8001d08:	2104      	movs	r1, #4
 8001d0a:	4804      	ldr	r0, [pc, #16]	; (8001d1c <Motor_Init+0x20>)
 8001d0c:	f005 fbd6 	bl	80074bc <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); // servo
 8001d10:	210c      	movs	r1, #12
 8001d12:	4803      	ldr	r0, [pc, #12]	; (8001d20 <Motor_Init+0x24>)
 8001d14:	f005 fbd2 	bl	80074bc <HAL_TIM_PWM_Start>
}
 8001d18:	bf00      	nop
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	2000038c 	.word	0x2000038c
 8001d20:	2000026c 	.word	0x2000026c

08001d24 <setSpeed>:

void setSpeed(int left, int right)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
    __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, left);  // set left pwm to speed
 8001d2e:	4b07      	ldr	r3, [pc, #28]	; (8001d4c <setSpeed+0x28>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, right); // set right pwm to speed
 8001d36:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <setSpeed+0x28>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	2000038c 	.word	0x2000038c

08001d50 <setDirection>:

void setDirection(int left, int right)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
    if (left == 1)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d10a      	bne.n	8001d76 <setDirection+0x26>
    {
        HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET); // set direction forward
 8001d60:	2201      	movs	r2, #1
 8001d62:	2108      	movs	r1, #8
 8001d64:	481a      	ldr	r0, [pc, #104]	; (8001dd0 <setDirection+0x80>)
 8001d66:	f003 fea9 	bl	8005abc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2104      	movs	r1, #4
 8001d6e:	4818      	ldr	r0, [pc, #96]	; (8001dd0 <setDirection+0x80>)
 8001d70:	f003 fea4 	bl	8005abc <HAL_GPIO_WritePin>
 8001d74:	e00c      	b.n	8001d90 <setDirection+0x40>
    }
    else if (left == 0)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d109      	bne.n	8001d90 <setDirection+0x40>
    {
        HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET); // set direction forward
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2108      	movs	r1, #8
 8001d80:	4813      	ldr	r0, [pc, #76]	; (8001dd0 <setDirection+0x80>)
 8001d82:	f003 fe9b 	bl	8005abc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8001d86:	2201      	movs	r2, #1
 8001d88:	2104      	movs	r1, #4
 8001d8a:	4811      	ldr	r0, [pc, #68]	; (8001dd0 <setDirection+0x80>)
 8001d8c:	f003 fe96 	bl	8005abc <HAL_GPIO_WritePin>
    }
    if (right == 1)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d10a      	bne.n	8001dac <setDirection+0x5c>
    {
        HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8001d96:	2201      	movs	r2, #1
 8001d98:	2110      	movs	r1, #16
 8001d9a:	480d      	ldr	r0, [pc, #52]	; (8001dd0 <setDirection+0x80>)
 8001d9c:	f003 fe8e 	bl	8005abc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001da0:	2200      	movs	r2, #0
 8001da2:	2120      	movs	r1, #32
 8001da4:	480a      	ldr	r0, [pc, #40]	; (8001dd0 <setDirection+0x80>)
 8001da6:	f003 fe89 	bl	8005abc <HAL_GPIO_WritePin>
    else if (right == 0)
    {
        HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
        HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
    }
}
 8001daa:	e00c      	b.n	8001dc6 <setDirection+0x76>
    else if (right == 0)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d109      	bne.n	8001dc6 <setDirection+0x76>
        HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8001db2:	2200      	movs	r2, #0
 8001db4:	2110      	movs	r1, #16
 8001db6:	4806      	ldr	r0, [pc, #24]	; (8001dd0 <setDirection+0x80>)
 8001db8:	f003 fe80 	bl	8005abc <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	2120      	movs	r1, #32
 8001dc0:	4803      	ldr	r0, [pc, #12]	; (8001dd0 <setDirection+0x80>)
 8001dc2:	f003 fe7b 	bl	8005abc <HAL_GPIO_WritePin>
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40020000 	.word	0x40020000

08001dd4 <MotorStop>:

void MotorStop()
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
    isMoving = false;
 8001dd8:	4b04      	ldr	r3, [pc, #16]	; (8001dec <MotorStop+0x18>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	701a      	strb	r2, [r3, #0]
    setSpeed(0, 0);
 8001dde:	2100      	movs	r1, #0
 8001de0:	2000      	movs	r0, #0
 8001de2:	f7ff ff9f 	bl	8001d24 <setSpeed>
    //	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0);//set left pwm to 0
    //	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 0);//set right pwm to 0
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	200000ba 	.word	0x200000ba

08001df0 <MotorForward>:

int MotorForward(int speed, int distance)
{
 8001df0:	b5b0      	push	{r4, r5, r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
    isMoving = true;
 8001dfa:	4b48      	ldr	r3, [pc, #288]	; (8001f1c <MotorForward+0x12c>)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	701a      	strb	r2, [r3, #0]
    isStraight = true;
 8001e00:	4b47      	ldr	r3, [pc, #284]	; (8001f20 <MotorForward+0x130>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	701a      	strb	r2, [r3, #0]
    // total_angle=0;//set angle so that it can keep straight
    htim1.Instance->CCR4 = 149; // set servo to center
 8001e06:	4b47      	ldr	r3, [pc, #284]	; (8001f24 <MotorForward+0x134>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2295      	movs	r2, #149	; 0x95
 8001e0c:	641a      	str	r2, [r3, #64]	; 0x40

    total_angle = 0;
 8001e0e:	4946      	ldr	r1, [pc, #280]	; (8001f28 <MotorForward+0x138>)
 8001e10:	f04f 0200 	mov.w	r2, #0
 8001e14:	f04f 0300 	mov.w	r3, #0
 8001e18:	e9c1 2300 	strd	r2, r3, [r1]

    TargetDistanceDebug = distance; // only for debug mode
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	4b42      	ldr	r3, [pc, #264]	; (8001f2c <MotorForward+0x13c>)
 8001e22:	701a      	strb	r2, [r3, #0]

    pwmLeft = speed;
 8001e24:	4a42      	ldr	r2, [pc, #264]	; (8001f30 <MotorForward+0x140>)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6013      	str	r3, [r2, #0]
    pwmRight = speed;
 8001e2a:	4a42      	ldr	r2, [pc, #264]	; (8001f34 <MotorForward+0x144>)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6013      	str	r3, [r2, #0]

    setSpeed(pwmLeft, pwmRight);
 8001e30:	4b3f      	ldr	r3, [pc, #252]	; (8001f30 <MotorForward+0x140>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a3f      	ldr	r2, [pc, #252]	; (8001f34 <MotorForward+0x144>)
 8001e36:	6812      	ldr	r2, [r2, #0]
 8001e38:	4611      	mov	r1, r2
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff ff72 	bl	8001d24 <setSpeed>

    if (speed == 1200)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001e46:	d109      	bne.n	8001e5c <MotorForward+0x6c>
    {
        PIDConfigInit(&SpeedSlow, 100, 0.0, 0.0);
 8001e48:	ed9f 1a3b 	vldr	s2, [pc, #236]	; 8001f38 <MotorForward+0x148>
 8001e4c:	eddf 0a3a 	vldr	s1, [pc, #232]	; 8001f38 <MotorForward+0x148>
 8001e50:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 8001f3c <MotorForward+0x14c>
 8001e54:	483a      	ldr	r0, [pc, #232]	; (8001f40 <MotorForward+0x150>)
 8001e56:	f7ff ff1f 	bl	8001c98 <PIDConfigInit>
 8001e5a:	e00d      	b.n	8001e78 <MotorForward+0x88>
    }
    else if (speed == 3000)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d108      	bne.n	8001e78 <MotorForward+0x88>
    {
        PIDConfigInit(&SpeedFast, 100, 0.0 , 0.0);
 8001e66:	ed9f 1a34 	vldr	s2, [pc, #208]	; 8001f38 <MotorForward+0x148>
 8001e6a:	eddf 0a33 	vldr	s1, [pc, #204]	; 8001f38 <MotorForward+0x148>
 8001e6e:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8001f3c <MotorForward+0x14c>
 8001e72:	4834      	ldr	r0, [pc, #208]	; (8001f44 <MotorForward+0x154>)
 8001e74:	f7ff ff10 	bl	8001c98 <PIDConfigInit>
    }

    __HAL_TIM_SET_COUNTER(&htim3, 0);     // Set the encoder counter value of right to 0
 8001e78:	4b33      	ldr	r3, [pc, #204]	; (8001f48 <MotorForward+0x158>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_TIM_SET_COUNTER(&htim2, 65535); // Set the encoder counter value of left to 65535
 8001e80:	4b32      	ldr	r3, [pc, #200]	; (8001f4c <MotorForward+0x15c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e88:	625a      	str	r2, [r3, #36]	; 0x24
    leftcount = 0, rightcount = 0;
 8001e8a:	4b31      	ldr	r3, [pc, #196]	; (8001f50 <MotorForward+0x160>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	4b30      	ldr	r3, [pc, #192]	; (8001f54 <MotorForward+0x164>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
    distance_travelledA = 0;
 8001e96:	4930      	ldr	r1, [pc, #192]	; (8001f58 <MotorForward+0x168>)
 8001e98:	f04f 0200 	mov.w	r2, #0
 8001e9c:	f04f 0300 	mov.w	r3, #0
 8001ea0:	e9c1 2300 	strd	r2, r3, [r1]
    distance_travelledB = 0;
 8001ea4:	492d      	ldr	r1, [pc, #180]	; (8001f5c <MotorForward+0x16c>)
 8001ea6:	f04f 0200 	mov.w	r2, #0
 8001eaa:	f04f 0300 	mov.w	r3, #0
 8001eae:	e9c1 2300 	strd	r2, r3, [r1]
    averagedistance = 0;
 8001eb2:	492b      	ldr	r1, [pc, #172]	; (8001f60 <MotorForward+0x170>)
 8001eb4:	f04f 0200 	mov.w	r2, #0
 8001eb8:	f04f 0300 	mov.w	r3, #0
 8001ebc:	e9c1 2300 	strd	r2, r3, [r1]

    while (averagedistance < distance)
 8001ec0:	e006      	b.n	8001ed0 <MotorForward+0xe0>
    {
        // set right pwm to speed
        setDirection(1, 1);
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	f7ff ff43 	bl	8001d50 <setDirection>
        isForward = 1;
 8001eca:	4b26      	ldr	r3, [pc, #152]	; (8001f64 <MotorForward+0x174>)
 8001ecc:	2201      	movs	r2, #1
 8001ece:	601a      	str	r2, [r3, #0]
    while (averagedistance < distance)
 8001ed0:	6838      	ldr	r0, [r7, #0]
 8001ed2:	f7fe fb37 	bl	8000544 <__aeabi_i2d>
 8001ed6:	4b22      	ldr	r3, [pc, #136]	; (8001f60 <MotorForward+0x170>)
 8001ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001edc:	f7fe fe2c 	bl	8000b38 <__aeabi_dcmpgt>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1ed      	bne.n	8001ec2 <MotorForward+0xd2>
    }
    offsetdistance = averagedistance - distance;
 8001ee6:	4b1e      	ldr	r3, [pc, #120]	; (8001f60 <MotorForward+0x170>)
 8001ee8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001eec:	6838      	ldr	r0, [r7, #0]
 8001eee:	f7fe fb29 	bl	8000544 <__aeabi_i2d>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	4620      	mov	r0, r4
 8001ef8:	4629      	mov	r1, r5
 8001efa:	f7fe f9d5 	bl	80002a8 <__aeabi_dsub>
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	4919      	ldr	r1, [pc, #100]	; (8001f68 <MotorForward+0x178>)
 8001f04:	e9c1 2300 	strd	r2, r3, [r1]
    isForward = 2;
 8001f08:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <MotorForward+0x174>)
 8001f0a:	2202      	movs	r2, #2
 8001f0c:	601a      	str	r2, [r3, #0]
    MotorStop();
 8001f0e:	f7ff ff61 	bl	8001dd4 <MotorStop>
    //    osDelay(500);
    //    if (offsetdistance>0){
    //    	MotorBack(1200,offsetdistance);
    //    }
    return 1;
 8001f12:	2301      	movs	r3, #1
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bdb0      	pop	{r4, r5, r7, pc}
 8001f1c:	200000ba 	.word	0x200000ba
 8001f20:	200000bb 	.word	0x200000bb
 8001f24:	2000026c 	.word	0x2000026c
 8001f28:	20000118 	.word	0x20000118
 8001f2c:	200000b5 	.word	0x200000b5
 8001f30:	200000bc 	.word	0x200000bc
 8001f34:	200000c0 	.word	0x200000c0
 8001f38:	00000000 	.word	0x00000000
 8001f3c:	42c80000 	.word	0x42c80000
 8001f40:	20000140 	.word	0x20000140
 8001f44:	20000154 	.word	0x20000154
 8001f48:	200002fc 	.word	0x200002fc
 8001f4c:	200002b4 	.word	0x200002b4
 8001f50:	200000c8 	.word	0x200000c8
 8001f54:	200000cc 	.word	0x200000cc
 8001f58:	20000108 	.word	0x20000108
 8001f5c:	20000110 	.word	0x20000110
 8001f60:	200000d0 	.word	0x200000d0
 8001f64:	20000004 	.word	0x20000004
 8001f68:	200000e0 	.word	0x200000e0

08001f6c <MotorBack>:

int MotorBack(int speed, int distance)
{
 8001f6c:	b5b0      	push	{r4, r5, r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
    isMoving = true;
 8001f76:	4b3c      	ldr	r3, [pc, #240]	; (8002068 <MotorBack+0xfc>)
 8001f78:	2201      	movs	r2, #1
 8001f7a:	701a      	strb	r2, [r3, #0]
    isStraight = true;
 8001f7c:	4b3b      	ldr	r3, [pc, #236]	; (800206c <MotorBack+0x100>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	701a      	strb	r2, [r3, #0]
    // total_angle=0;
    htim1.Instance->CCR4 = 149; // set servo to center
 8001f82:	4b3b      	ldr	r3, [pc, #236]	; (8002070 <MotorBack+0x104>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2295      	movs	r2, #149	; 0x95
 8001f88:	641a      	str	r2, [r3, #64]	; 0x40

    total_angle = 0;
 8001f8a:	493a      	ldr	r1, [pc, #232]	; (8002074 <MotorBack+0x108>)
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	f04f 0300 	mov.w	r3, #0
 8001f94:	e9c1 2300 	strd	r2, r3, [r1]

    TargetDistanceDebug = distance; // only for debug mode
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	4b36      	ldr	r3, [pc, #216]	; (8002078 <MotorBack+0x10c>)
 8001f9e:	701a      	strb	r2, [r3, #0]

    pwmLeft = speed;
 8001fa0:	4a36      	ldr	r2, [pc, #216]	; (800207c <MotorBack+0x110>)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6013      	str	r3, [r2, #0]
    pwmRight = speed;
 8001fa6:	4a36      	ldr	r2, [pc, #216]	; (8002080 <MotorBack+0x114>)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6013      	str	r3, [r2, #0]

    setSpeed(pwmLeft, pwmRight);
 8001fac:	4b33      	ldr	r3, [pc, #204]	; (800207c <MotorBack+0x110>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a33      	ldr	r2, [pc, #204]	; (8002080 <MotorBack+0x114>)
 8001fb2:	6812      	ldr	r2, [r2, #0]
 8001fb4:	4611      	mov	r1, r2
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff feb4 	bl	8001d24 <setSpeed>

    __HAL_TIM_SET_COUNTER(&htim3, 65535); // Set the encoder counter value of right to 0
 8001fbc:	4b31      	ldr	r3, [pc, #196]	; (8002084 <MotorBack+0x118>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fc4:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_TIM_SET_COUNTER(&htim2, 0);     // Set the encoder counter value of left to 0
 8001fc6:	4b30      	ldr	r3, [pc, #192]	; (8002088 <MotorBack+0x11c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	625a      	str	r2, [r3, #36]	; 0x24
    leftcount = 0, rightcount = 0;
 8001fce:	4b2f      	ldr	r3, [pc, #188]	; (800208c <MotorBack+0x120>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	4b2e      	ldr	r3, [pc, #184]	; (8002090 <MotorBack+0x124>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]
    distance_travelledA = 0;
 8001fda:	492e      	ldr	r1, [pc, #184]	; (8002094 <MotorBack+0x128>)
 8001fdc:	f04f 0200 	mov.w	r2, #0
 8001fe0:	f04f 0300 	mov.w	r3, #0
 8001fe4:	e9c1 2300 	strd	r2, r3, [r1]
    distance_travelledB = 0;
 8001fe8:	492b      	ldr	r1, [pc, #172]	; (8002098 <MotorBack+0x12c>)
 8001fea:	f04f 0200 	mov.w	r2, #0
 8001fee:	f04f 0300 	mov.w	r3, #0
 8001ff2:	e9c1 2300 	strd	r2, r3, [r1]
    averagedistance = 0;
 8001ff6:	4929      	ldr	r1, [pc, #164]	; (800209c <MotorBack+0x130>)
 8001ff8:	f04f 0200 	mov.w	r2, #0
 8001ffc:	f04f 0300 	mov.w	r3, #0
 8002000:	e9c1 2300 	strd	r2, r3, [r1]

    while (averagedistance < distance)
 8002004:	e006      	b.n	8002014 <MotorBack+0xa8>
    {
        setDirection(0, 0);
 8002006:	2100      	movs	r1, #0
 8002008:	2000      	movs	r0, #0
 800200a:	f7ff fea1 	bl	8001d50 <setDirection>
        isForward = 0;
 800200e:	4b24      	ldr	r3, [pc, #144]	; (80020a0 <MotorBack+0x134>)
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
    while (averagedistance < distance)
 8002014:	6838      	ldr	r0, [r7, #0]
 8002016:	f7fe fa95 	bl	8000544 <__aeabi_i2d>
 800201a:	4b20      	ldr	r3, [pc, #128]	; (800209c <MotorBack+0x130>)
 800201c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002020:	f7fe fd8a 	bl	8000b38 <__aeabi_dcmpgt>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d1ed      	bne.n	8002006 <MotorBack+0x9a>
    }
    offsetdistance = averagedistance - distance;
 800202a:	4b1c      	ldr	r3, [pc, #112]	; (800209c <MotorBack+0x130>)
 800202c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002030:	6838      	ldr	r0, [r7, #0]
 8002032:	f7fe fa87 	bl	8000544 <__aeabi_i2d>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	4620      	mov	r0, r4
 800203c:	4629      	mov	r1, r5
 800203e:	f7fe f933 	bl	80002a8 <__aeabi_dsub>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	4917      	ldr	r1, [pc, #92]	; (80020a4 <MotorBack+0x138>)
 8002048:	e9c1 2300 	strd	r2, r3, [r1]
    isForward = 2;
 800204c:	4b14      	ldr	r3, [pc, #80]	; (80020a0 <MotorBack+0x134>)
 800204e:	2202      	movs	r2, #2
 8002050:	601a      	str	r2, [r3, #0]
    MotorStop();
 8002052:	f7ff febf 	bl	8001dd4 <MotorStop>
    osDelay(sleeping);
 8002056:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800205a:	f007 ffe1 	bl	800a020 <osDelay>
    //    if (offsetdistance>0) MotorForward(1200,offsetdistance);
    return 1;
 800205e:	2301      	movs	r3, #1
}
 8002060:	4618      	mov	r0, r3
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bdb0      	pop	{r4, r5, r7, pc}
 8002068:	200000ba 	.word	0x200000ba
 800206c:	200000bb 	.word	0x200000bb
 8002070:	2000026c 	.word	0x2000026c
 8002074:	20000118 	.word	0x20000118
 8002078:	200000b5 	.word	0x200000b5
 800207c:	200000bc 	.word	0x200000bc
 8002080:	200000c0 	.word	0x200000c0
 8002084:	200002fc 	.word	0x200002fc
 8002088:	200002b4 	.word	0x200002b4
 800208c:	200000c8 	.word	0x200000c8
 8002090:	200000cc 	.word	0x200000cc
 8002094:	20000108 	.word	0x20000108
 8002098:	20000110 	.word	0x20000110
 800209c:	200000d0 	.word	0x200000d0
 80020a0:	20000004 	.word	0x20000004
 80020a4:	200000e0 	.word	0x200000e0

080020a8 <MotorLeft>:

int MotorLeft(int speed, int degreeTarget)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
    isMoving = true;
 80020b2:	4b1f      	ldr	r3, [pc, #124]	; (8002130 <MotorLeft+0x88>)
 80020b4:	2201      	movs	r2, #1
 80020b6:	701a      	strb	r2, [r3, #0]
    isStraight = false;
 80020b8:	4b1e      	ldr	r3, [pc, #120]	; (8002134 <MotorLeft+0x8c>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	701a      	strb	r2, [r3, #0]

    distance_travelledA = 0;
 80020be:	491e      	ldr	r1, [pc, #120]	; (8002138 <MotorLeft+0x90>)
 80020c0:	f04f 0200 	mov.w	r2, #0
 80020c4:	f04f 0300 	mov.w	r3, #0
 80020c8:	e9c1 2300 	strd	r2, r3, [r1]
    distance_travelledB = 0;
 80020cc:	491b      	ldr	r1, [pc, #108]	; (800213c <MotorLeft+0x94>)
 80020ce:	f04f 0200 	mov.w	r2, #0
 80020d2:	f04f 0300 	mov.w	r3, #0
 80020d6:	e9c1 2300 	strd	r2, r3, [r1]
    total_angle = 0;
 80020da:	4919      	ldr	r1, [pc, #100]	; (8002140 <MotorLeft+0x98>)
 80020dc:	f04f 0200 	mov.w	r2, #0
 80020e0:	f04f 0300 	mov.w	r3, #0
 80020e4:	e9c1 2300 	strd	r2, r3, [r1]

    htim1.Instance->CCR4 = 100; // hard left
 80020e8:	4b16      	ldr	r3, [pc, #88]	; (8002144 <MotorLeft+0x9c>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2264      	movs	r2, #100	; 0x64
 80020ee:	641a      	str	r2, [r3, #64]	; 0x40

    // switch (lab,inside isaac etc)
    setSpeed(0, speed);
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	2000      	movs	r0, #0
 80020f4:	f7ff fe16 	bl	8001d24 <setSpeed>

    while (total_angle < degreeTarget)
 80020f8:	e003      	b.n	8002102 <MotorLeft+0x5a>
    { // for now, degreeTarget is set as distance
        setDirection(0, 1);
 80020fa:	2101      	movs	r1, #1
 80020fc:	2000      	movs	r0, #0
 80020fe:	f7ff fe27 	bl	8001d50 <setDirection>
    while (total_angle < degreeTarget)
 8002102:	6838      	ldr	r0, [r7, #0]
 8002104:	f7fe fa1e 	bl	8000544 <__aeabi_i2d>
 8002108:	4b0d      	ldr	r3, [pc, #52]	; (8002140 <MotorLeft+0x98>)
 800210a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210e:	f7fe fd13 	bl	8000b38 <__aeabi_dcmpgt>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1f0      	bne.n	80020fa <MotorLeft+0x52>
    }
    MotorStop();
 8002118:	f7ff fe5c 	bl	8001dd4 <MotorStop>
    htim1.Instance->CCR4 = 149; // centre
 800211c:	4b09      	ldr	r3, [pc, #36]	; (8002144 <MotorLeft+0x9c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2295      	movs	r2, #149	; 0x95
 8002122:	641a      	str	r2, [r3, #64]	; 0x40
    //	osDelay(500);
    return 1;
 8002124:	2301      	movs	r3, #1
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	200000ba 	.word	0x200000ba
 8002134:	200000bb 	.word	0x200000bb
 8002138:	20000108 	.word	0x20000108
 800213c:	20000110 	.word	0x20000110
 8002140:	20000118 	.word	0x20000118
 8002144:	2000026c 	.word	0x2000026c

08002148 <MotorBackLeft>:

int MotorBackLeft(int speed, int degreeTarget)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
    isMoving = true;
 8002152:	4b21      	ldr	r3, [pc, #132]	; (80021d8 <MotorBackLeft+0x90>)
 8002154:	2201      	movs	r2, #1
 8002156:	701a      	strb	r2, [r3, #0]
    isStraight = false;
 8002158:	4b20      	ldr	r3, [pc, #128]	; (80021dc <MotorBackLeft+0x94>)
 800215a:	2200      	movs	r2, #0
 800215c:	701a      	strb	r2, [r3, #0]
    htim1.Instance->CCR4 = 100; // hard left
 800215e:	4b20      	ldr	r3, [pc, #128]	; (80021e0 <MotorBackLeft+0x98>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2264      	movs	r2, #100	; 0x64
 8002164:	641a      	str	r2, [r3, #64]	; 0x40

    distance_travelledA = 0;
 8002166:	491f      	ldr	r1, [pc, #124]	; (80021e4 <MotorBackLeft+0x9c>)
 8002168:	f04f 0200 	mov.w	r2, #0
 800216c:	f04f 0300 	mov.w	r3, #0
 8002170:	e9c1 2300 	strd	r2, r3, [r1]
    distance_travelledB = 0;
 8002174:	491c      	ldr	r1, [pc, #112]	; (80021e8 <MotorBackLeft+0xa0>)
 8002176:	f04f 0200 	mov.w	r2, #0
 800217a:	f04f 0300 	mov.w	r3, #0
 800217e:	e9c1 2300 	strd	r2, r3, [r1]
    total_angle = 0;
 8002182:	491a      	ldr	r1, [pc, #104]	; (80021ec <MotorBackLeft+0xa4>)
 8002184:	f04f 0200 	mov.w	r2, #0
 8002188:	f04f 0300 	mov.w	r3, #0
 800218c:	e9c1 2300 	strd	r2, r3, [r1]

    setSpeed(0, speed);
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	2000      	movs	r0, #0
 8002194:	f7ff fdc6 	bl	8001d24 <setSpeed>

    //	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0);//set left pwm to 0
    //	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, speed);//set right pwm to speed

    while (total_angle > degreeTarget)
 8002198:	e003      	b.n	80021a2 <MotorBackLeft+0x5a>
    { // for now, degreeTarget is set as distance
        setDirection(1, 0);
 800219a:	2100      	movs	r1, #0
 800219c:	2001      	movs	r0, #1
 800219e:	f7ff fdd7 	bl	8001d50 <setDirection>
    while (total_angle > degreeTarget)
 80021a2:	6838      	ldr	r0, [r7, #0]
 80021a4:	f7fe f9ce 	bl	8000544 <__aeabi_i2d>
 80021a8:	4b10      	ldr	r3, [pc, #64]	; (80021ec <MotorBackLeft+0xa4>)
 80021aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ae:	f7fe fca5 	bl	8000afc <__aeabi_dcmplt>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1f0      	bne.n	800219a <MotorBackLeft+0x52>
    }
    MotorStop();
 80021b8:	f7ff fe0c 	bl	8001dd4 <MotorStop>
    htim1.Instance->CCR4 = 149; // centre
 80021bc:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <MotorBackLeft+0x98>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2295      	movs	r2, #149	; 0x95
 80021c2:	641a      	str	r2, [r3, #64]	; 0x40
    osDelay(sleeping);
 80021c4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80021c8:	f007 ff2a 	bl	800a020 <osDelay>
    return 1;
 80021cc:	2301      	movs	r3, #1
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3708      	adds	r7, #8
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	200000ba 	.word	0x200000ba
 80021dc:	200000bb 	.word	0x200000bb
 80021e0:	2000026c 	.word	0x2000026c
 80021e4:	20000108 	.word	0x20000108
 80021e8:	20000110 	.word	0x20000110
 80021ec:	20000118 	.word	0x20000118

080021f0 <MotorRight>:

int MotorRight(int speed, int degreeTarget)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
    isMoving = true;
 80021fa:	4b1f      	ldr	r3, [pc, #124]	; (8002278 <MotorRight+0x88>)
 80021fc:	2201      	movs	r2, #1
 80021fe:	701a      	strb	r2, [r3, #0]
    isStraight = false;
 8002200:	4b1e      	ldr	r3, [pc, #120]	; (800227c <MotorRight+0x8c>)
 8002202:	2200      	movs	r2, #0
 8002204:	701a      	strb	r2, [r3, #0]
    htim1.Instance->CCR4 = 200; // hard right
 8002206:	4b1e      	ldr	r3, [pc, #120]	; (8002280 <MotorRight+0x90>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	22c8      	movs	r2, #200	; 0xc8
 800220c:	641a      	str	r2, [r3, #64]	; 0x40

    distance_travelledA = 0;
 800220e:	491d      	ldr	r1, [pc, #116]	; (8002284 <MotorRight+0x94>)
 8002210:	f04f 0200 	mov.w	r2, #0
 8002214:	f04f 0300 	mov.w	r3, #0
 8002218:	e9c1 2300 	strd	r2, r3, [r1]
    distance_travelledB = 0;
 800221c:	491a      	ldr	r1, [pc, #104]	; (8002288 <MotorRight+0x98>)
 800221e:	f04f 0200 	mov.w	r2, #0
 8002222:	f04f 0300 	mov.w	r3, #0
 8002226:	e9c1 2300 	strd	r2, r3, [r1]
    total_angle = 0;
 800222a:	4918      	ldr	r1, [pc, #96]	; (800228c <MotorRight+0x9c>)
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	f04f 0300 	mov.w	r3, #0
 8002234:	e9c1 2300 	strd	r2, r3, [r1]

    setSpeed(speed, 0);
 8002238:	2100      	movs	r1, #0
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7ff fd72 	bl	8001d24 <setSpeed>

    while (total_angle > degreeTarget)
 8002240:	e003      	b.n	800224a <MotorRight+0x5a>
    { // for now, degreeTarget is set as distance
        setDirection(1, 0);
 8002242:	2100      	movs	r1, #0
 8002244:	2001      	movs	r0, #1
 8002246:	f7ff fd83 	bl	8001d50 <setDirection>
    while (total_angle > degreeTarget)
 800224a:	6838      	ldr	r0, [r7, #0]
 800224c:	f7fe f97a 	bl	8000544 <__aeabi_i2d>
 8002250:	4b0e      	ldr	r3, [pc, #56]	; (800228c <MotorRight+0x9c>)
 8002252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002256:	f7fe fc51 	bl	8000afc <__aeabi_dcmplt>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1f0      	bne.n	8002242 <MotorRight+0x52>
    }
    MotorStop();
 8002260:	f7ff fdb8 	bl	8001dd4 <MotorStop>
    htim1.Instance->CCR4 = 149; // centre
 8002264:	4b06      	ldr	r3, [pc, #24]	; (8002280 <MotorRight+0x90>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2295      	movs	r2, #149	; 0x95
 800226a:	641a      	str	r2, [r3, #64]	; 0x40
    //	osDelay(500);
    return 1;
 800226c:	2301      	movs	r3, #1
}
 800226e:	4618      	mov	r0, r3
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	200000ba 	.word	0x200000ba
 800227c:	200000bb 	.word	0x200000bb
 8002280:	2000026c 	.word	0x2000026c
 8002284:	20000108 	.word	0x20000108
 8002288:	20000110 	.word	0x20000110
 800228c:	20000118 	.word	0x20000118

08002290 <MotorBackRight>:

int MotorBackRight(int speed, int degreeTarget)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
    isMoving = true;
 800229a:	4b21      	ldr	r3, [pc, #132]	; (8002320 <MotorBackRight+0x90>)
 800229c:	2201      	movs	r2, #1
 800229e:	701a      	strb	r2, [r3, #0]
    isStraight = false;
 80022a0:	4b20      	ldr	r3, [pc, #128]	; (8002324 <MotorBackRight+0x94>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	701a      	strb	r2, [r3, #0]
    htim1.Instance->CCR4 = 200; // hard right
 80022a6:	4b20      	ldr	r3, [pc, #128]	; (8002328 <MotorBackRight+0x98>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	22c8      	movs	r2, #200	; 0xc8
 80022ac:	641a      	str	r2, [r3, #64]	; 0x40

    distance_travelledA = 0;
 80022ae:	491f      	ldr	r1, [pc, #124]	; (800232c <MotorBackRight+0x9c>)
 80022b0:	f04f 0200 	mov.w	r2, #0
 80022b4:	f04f 0300 	mov.w	r3, #0
 80022b8:	e9c1 2300 	strd	r2, r3, [r1]
    distance_travelledB = 0;
 80022bc:	491c      	ldr	r1, [pc, #112]	; (8002330 <MotorBackRight+0xa0>)
 80022be:	f04f 0200 	mov.w	r2, #0
 80022c2:	f04f 0300 	mov.w	r3, #0
 80022c6:	e9c1 2300 	strd	r2, r3, [r1]
    total_angle = 0;
 80022ca:	491a      	ldr	r1, [pc, #104]	; (8002334 <MotorBackRight+0xa4>)
 80022cc:	f04f 0200 	mov.w	r2, #0
 80022d0:	f04f 0300 	mov.w	r3, #0
 80022d4:	e9c1 2300 	strd	r2, r3, [r1]

    setSpeed(speed, 0);
 80022d8:	2100      	movs	r1, #0
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f7ff fd22 	bl	8001d24 <setSpeed>

    while (total_angle < degreeTarget)
 80022e0:	e003      	b.n	80022ea <MotorBackRight+0x5a>
    { // for now, degreeTarget is set as distance
        setDirection(0, 1);
 80022e2:	2101      	movs	r1, #1
 80022e4:	2000      	movs	r0, #0
 80022e6:	f7ff fd33 	bl	8001d50 <setDirection>
    while (total_angle < degreeTarget)
 80022ea:	6838      	ldr	r0, [r7, #0]
 80022ec:	f7fe f92a 	bl	8000544 <__aeabi_i2d>
 80022f0:	4b10      	ldr	r3, [pc, #64]	; (8002334 <MotorBackRight+0xa4>)
 80022f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f6:	f7fe fc1f 	bl	8000b38 <__aeabi_dcmpgt>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1f0      	bne.n	80022e2 <MotorBackRight+0x52>
    }
    MotorStop();
 8002300:	f7ff fd68 	bl	8001dd4 <MotorStop>
    htim1.Instance->CCR4 = 149; // centre
 8002304:	4b08      	ldr	r3, [pc, #32]	; (8002328 <MotorBackRight+0x98>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2295      	movs	r2, #149	; 0x95
 800230a:	641a      	str	r2, [r3, #64]	; 0x40
    osDelay(500);
 800230c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002310:	f007 fe86 	bl	800a020 <osDelay>
    return 1;
 8002314:	2301      	movs	r3, #1
}
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	200000ba 	.word	0x200000ba
 8002324:	200000bb 	.word	0x200000bb
 8002328:	2000026c 	.word	0x2000026c
 800232c:	20000108 	.word	0x20000108
 8002330:	20000110 	.word	0x20000110
 8002334:	20000118 	.word	0x20000118

08002338 <T1MotorForward>:

    return 1;
}

double T1MotorForward(int speed)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
    isMoving = true;
 8002340:	4b4d      	ldr	r3, [pc, #308]	; (8002478 <T1MotorForward+0x140>)
 8002342:	2201      	movs	r2, #1
 8002344:	701a      	strb	r2, [r3, #0]
    isStraight = true;
 8002346:	4b4d      	ldr	r3, [pc, #308]	; (800247c <T1MotorForward+0x144>)
 8002348:	2201      	movs	r2, #1
 800234a:	701a      	strb	r2, [r3, #0]
    // total_angle=0;//set angle so that it can keep straight
    htim1.Instance->CCR4 = 149; // set servo to center
 800234c:	4b4c      	ldr	r3, [pc, #304]	; (8002480 <T1MotorForward+0x148>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2295      	movs	r2, #149	; 0x95
 8002352:	641a      	str	r2, [r3, #64]	; 0x40
    distance_travelledA = 0;
 8002354:	494b      	ldr	r1, [pc, #300]	; (8002484 <T1MotorForward+0x14c>)
 8002356:	f04f 0200 	mov.w	r2, #0
 800235a:	f04f 0300 	mov.w	r3, #0
 800235e:	e9c1 2300 	strd	r2, r3, [r1]
    distance_travelledB = 0;
 8002362:	4949      	ldr	r1, [pc, #292]	; (8002488 <T1MotorForward+0x150>)
 8002364:	f04f 0200 	mov.w	r2, #0
 8002368:	f04f 0300 	mov.w	r3, #0
 800236c:	e9c1 2300 	strd	r2, r3, [r1]
    total_angle = 0;
 8002370:	4946      	ldr	r1, [pc, #280]	; (800248c <T1MotorForward+0x154>)
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	f04f 0300 	mov.w	r3, #0
 800237a:	e9c1 2300 	strd	r2, r3, [r1]

    pwmLeft = speed;
 800237e:	4a44      	ldr	r2, [pc, #272]	; (8002490 <T1MotorForward+0x158>)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6013      	str	r3, [r2, #0]
    pwmRight = speed;
 8002384:	4a43      	ldr	r2, [pc, #268]	; (8002494 <T1MotorForward+0x15c>)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6013      	str	r3, [r2, #0]

    setSpeed(pwmLeft, pwmRight);
 800238a:	4b41      	ldr	r3, [pc, #260]	; (8002490 <T1MotorForward+0x158>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a41      	ldr	r2, [pc, #260]	; (8002494 <T1MotorForward+0x15c>)
 8002390:	6812      	ldr	r2, [r2, #0]
 8002392:	4611      	mov	r1, r2
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff fcc5 	bl	8001d24 <setSpeed>

    if (speed == 1200)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80023a0:	d109      	bne.n	80023b6 <T1MotorForward+0x7e>
    {
        PIDConfigInit(&SpeedSlow, 2.5, 2.0, 0.8);
 80023a2:	ed9f 1a3d 	vldr	s2, [pc, #244]	; 8002498 <T1MotorForward+0x160>
 80023a6:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80023aa:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 80023ae:	483b      	ldr	r0, [pc, #236]	; (800249c <T1MotorForward+0x164>)
 80023b0:	f7ff fc72 	bl	8001c98 <PIDConfigInit>
 80023b4:	e00d      	b.n	80023d2 <T1MotorForward+0x9a>
    }
    else if (speed == 3000)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80023bc:	4293      	cmp	r3, r2
 80023be:	d108      	bne.n	80023d2 <T1MotorForward+0x9a>
    {
        PIDConfigInit(&SpeedFast, 100.0, 0.0, 0.0);
 80023c0:	ed9f 1a37 	vldr	s2, [pc, #220]	; 80024a0 <T1MotorForward+0x168>
 80023c4:	eddf 0a36 	vldr	s1, [pc, #216]	; 80024a0 <T1MotorForward+0x168>
 80023c8:	ed9f 0a36 	vldr	s0, [pc, #216]	; 80024a4 <T1MotorForward+0x16c>
 80023cc:	4836      	ldr	r0, [pc, #216]	; (80024a8 <T1MotorForward+0x170>)
 80023ce:	f7ff fc63 	bl	8001c98 <PIDConfigInit>
    }

    __HAL_TIM_SET_COUNTER(&htim3, 0);     // Set the encoder counter value of right to 0
 80023d2:	4b36      	ldr	r3, [pc, #216]	; (80024ac <T1MotorForward+0x174>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2200      	movs	r2, #0
 80023d8:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_TIM_SET_COUNTER(&htim2, 65535); // Set the encoder counter value of left to 65535
 80023da:	4b35      	ldr	r3, [pc, #212]	; (80024b0 <T1MotorForward+0x178>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023e2:	625a      	str	r2, [r3, #36]	; 0x24
    leftcount = 0, rightcount = 0;
 80023e4:	4b33      	ldr	r3, [pc, #204]	; (80024b4 <T1MotorForward+0x17c>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	4b33      	ldr	r3, [pc, #204]	; (80024b8 <T1MotorForward+0x180>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
    averagedistance = 0;
 80023f0:	4932      	ldr	r1, [pc, #200]	; (80024bc <T1MotorForward+0x184>)
 80023f2:	f04f 0200 	mov.w	r2, #0
 80023f6:	f04f 0300 	mov.w	r3, #0
 80023fa:	e9c1 2300 	strd	r2, r3, [r1]
    averagecount = 0;
 80023fe:	4930      	ldr	r1, [pc, #192]	; (80024c0 <T1MotorForward+0x188>)
 8002400:	f04f 0200 	mov.w	r2, #0
 8002404:	f04f 0300 	mov.w	r3, #0
 8002408:	e9c1 2300 	strd	r2, r3, [r1]

    int Ydists = 0;
 800240c:	2300      	movs	r3, #0
 800240e:	60fb      	str	r3, [r7, #12]
    while (Distance > 6.5)
 8002410:	e00f      	b.n	8002432 <T1MotorForward+0xfa>
    {
        // set right pwm to speed
        setDirection(1, 1);
 8002412:	2101      	movs	r1, #1
 8002414:	2001      	movs	r0, #1
 8002416:	f7ff fc9b 	bl	8001d50 <setDirection>
        Ydists = averagecount;
 800241a:	4b29      	ldr	r3, [pc, #164]	; (80024c0 <T1MotorForward+0x188>)
 800241c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002420:	4610      	mov	r0, r2
 8002422:	4619      	mov	r1, r3
 8002424:	f7fe fba8 	bl	8000b78 <__aeabi_d2iz>
 8002428:	4603      	mov	r3, r0
 800242a:	60fb      	str	r3, [r7, #12]
        isForward = 1;
 800242c:	4b25      	ldr	r3, [pc, #148]	; (80024c4 <T1MotorForward+0x18c>)
 800242e:	2201      	movs	r2, #1
 8002430:	601a      	str	r2, [r3, #0]
    while (Distance > 6.5)
 8002432:	4b25      	ldr	r3, [pc, #148]	; (80024c8 <T1MotorForward+0x190>)
 8002434:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002438:	f04f 0200 	mov.w	r2, #0
 800243c:	4b23      	ldr	r3, [pc, #140]	; (80024cc <T1MotorForward+0x194>)
 800243e:	f7fe fb7b 	bl	8000b38 <__aeabi_dcmpgt>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1e4      	bne.n	8002412 <T1MotorForward+0xda>
    }
    isForward = 2;
 8002448:	4b1e      	ldr	r3, [pc, #120]	; (80024c4 <T1MotorForward+0x18c>)
 800244a:	2202      	movs	r2, #2
 800244c:	601a      	str	r2, [r3, #0]
    MotorStop();
 800244e:	f7ff fcc1 	bl	8001dd4 <MotorStop>
    osDelay(sleeping);
 8002452:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002456:	f007 fde3 	bl	800a020 <osDelay>
    //    if (offsetdistance>0){
    //    	MotorBack(1200,offsetdistance);
    //    }
    return Ydists;
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f7fe f872 	bl	8000544 <__aeabi_i2d>
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	ec43 2b17 	vmov	d7, r2, r3
}
 8002468:	eeb0 0a47 	vmov.f32	s0, s14
 800246c:	eef0 0a67 	vmov.f32	s1, s15
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	200000ba 	.word	0x200000ba
 800247c:	200000bb 	.word	0x200000bb
 8002480:	2000026c 	.word	0x2000026c
 8002484:	20000108 	.word	0x20000108
 8002488:	20000110 	.word	0x20000110
 800248c:	20000118 	.word	0x20000118
 8002490:	200000bc 	.word	0x200000bc
 8002494:	200000c0 	.word	0x200000c0
 8002498:	3f4ccccd 	.word	0x3f4ccccd
 800249c:	20000140 	.word	0x20000140
 80024a0:	00000000 	.word	0x00000000
 80024a4:	42c80000 	.word	0x42c80000
 80024a8:	20000154 	.word	0x20000154
 80024ac:	200002fc 	.word	0x200002fc
 80024b0:	200002b4 	.word	0x200002b4
 80024b4:	200000c8 	.word	0x200000c8
 80024b8:	200000cc 	.word	0x200000cc
 80024bc:	200000d0 	.word	0x200000d0
 80024c0:	200000d8 	.word	0x200000d8
 80024c4:	20000004 	.word	0x20000004
 80024c8:	20000180 	.word	0x20000180
 80024cc:	401a0000 	.word	0x401a0000

080024d0 <T2MotorForward>:

int T2MotorForward(int speed)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
    isMoving = true;
 80024d8:	4b51      	ldr	r3, [pc, #324]	; (8002620 <T2MotorForward+0x150>)
 80024da:	2201      	movs	r2, #1
 80024dc:	701a      	strb	r2, [r3, #0]
    isStraight = true;
 80024de:	4b51      	ldr	r3, [pc, #324]	; (8002624 <T2MotorForward+0x154>)
 80024e0:	2201      	movs	r2, #1
 80024e2:	701a      	strb	r2, [r3, #0]
    // total_angle=0;//set angle so that it can keep straight
    htim1.Instance->CCR4 = 149; // set servo to center
 80024e4:	4b50      	ldr	r3, [pc, #320]	; (8002628 <T2MotorForward+0x158>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2295      	movs	r2, #149	; 0x95
 80024ea:	641a      	str	r2, [r3, #64]	; 0x40
    distance_travelledA = 0;
 80024ec:	494f      	ldr	r1, [pc, #316]	; (800262c <T2MotorForward+0x15c>)
 80024ee:	f04f 0200 	mov.w	r2, #0
 80024f2:	f04f 0300 	mov.w	r3, #0
 80024f6:	e9c1 2300 	strd	r2, r3, [r1]
    distance_travelledB = 0;
 80024fa:	494d      	ldr	r1, [pc, #308]	; (8002630 <T2MotorForward+0x160>)
 80024fc:	f04f 0200 	mov.w	r2, #0
 8002500:	f04f 0300 	mov.w	r3, #0
 8002504:	e9c1 2300 	strd	r2, r3, [r1]
    total_angle = 0;
 8002508:	494a      	ldr	r1, [pc, #296]	; (8002634 <T2MotorForward+0x164>)
 800250a:	f04f 0200 	mov.w	r2, #0
 800250e:	f04f 0300 	mov.w	r3, #0
 8002512:	e9c1 2300 	strd	r2, r3, [r1]

    pwmLeft = speed;
 8002516:	4a48      	ldr	r2, [pc, #288]	; (8002638 <T2MotorForward+0x168>)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6013      	str	r3, [r2, #0]
    pwmRight = speed;
 800251c:	4a47      	ldr	r2, [pc, #284]	; (800263c <T2MotorForward+0x16c>)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6013      	str	r3, [r2, #0]

    setSpeed(pwmLeft, pwmRight);
 8002522:	4b45      	ldr	r3, [pc, #276]	; (8002638 <T2MotorForward+0x168>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a45      	ldr	r2, [pc, #276]	; (800263c <T2MotorForward+0x16c>)
 8002528:	6812      	ldr	r2, [r2, #0]
 800252a:	4611      	mov	r1, r2
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff fbf9 	bl	8001d24 <setSpeed>

    if (speed == 1200)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8002538:	d109      	bne.n	800254e <T2MotorForward+0x7e>
    {
        //    	PIDConfigInit(&SpeedSlow, 2.5, 2.0, 0.8);
        PIDConfigInit(&SpeedSlow, 100.0, 0.0, 0.0);
 800253a:	ed9f 1a41 	vldr	s2, [pc, #260]	; 8002640 <T2MotorForward+0x170>
 800253e:	eddf 0a40 	vldr	s1, [pc, #256]	; 8002640 <T2MotorForward+0x170>
 8002542:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8002644 <T2MotorForward+0x174>
 8002546:	4840      	ldr	r0, [pc, #256]	; (8002648 <T2MotorForward+0x178>)
 8002548:	f7ff fba6 	bl	8001c98 <PIDConfigInit>
 800254c:	e00d      	b.n	800256a <T2MotorForward+0x9a>
    }
    else if (speed == 3000)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002554:	4293      	cmp	r3, r2
 8002556:	d108      	bne.n	800256a <T2MotorForward+0x9a>
    {
        PIDConfigInit(&SpeedFast, 100.0, 0.0, 0.0);
 8002558:	ed9f 1a39 	vldr	s2, [pc, #228]	; 8002640 <T2MotorForward+0x170>
 800255c:	eddf 0a38 	vldr	s1, [pc, #224]	; 8002640 <T2MotorForward+0x170>
 8002560:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8002644 <T2MotorForward+0x174>
 8002564:	4839      	ldr	r0, [pc, #228]	; (800264c <T2MotorForward+0x17c>)
 8002566:	f7ff fb97 	bl	8001c98 <PIDConfigInit>
    }

    __HAL_TIM_SET_COUNTER(&htim3, 0);     // Set the encoder counter value of right to 0
 800256a:	4b39      	ldr	r3, [pc, #228]	; (8002650 <T2MotorForward+0x180>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2200      	movs	r2, #0
 8002570:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_TIM_SET_COUNTER(&htim2, 65535); // Set the encoder counter value of left to 65535
 8002572:	4b38      	ldr	r3, [pc, #224]	; (8002654 <T2MotorForward+0x184>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800257a:	625a      	str	r2, [r3, #36]	; 0x24
    leftcount = 0, rightcount = 0;
 800257c:	4b36      	ldr	r3, [pc, #216]	; (8002658 <T2MotorForward+0x188>)
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	4b36      	ldr	r3, [pc, #216]	; (800265c <T2MotorForward+0x18c>)
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
    averagedistance = 0;
 8002588:	4935      	ldr	r1, [pc, #212]	; (8002660 <T2MotorForward+0x190>)
 800258a:	f04f 0200 	mov.w	r2, #0
 800258e:	f04f 0300 	mov.w	r3, #0
 8002592:	e9c1 2300 	strd	r2, r3, [r1]
    averagecount = 0;
 8002596:	4933      	ldr	r1, [pc, #204]	; (8002664 <T2MotorForward+0x194>)
 8002598:	f04f 0200 	mov.w	r2, #0
 800259c:	f04f 0300 	mov.w	r3, #0
 80025a0:	e9c1 2300 	strd	r2, r3, [r1]

    while (Distance > 3)
 80025a4:	e01c      	b.n	80025e0 <T2MotorForward+0x110>
    {
        // set right pwm to speed
    	if (RightIR<10){
 80025a6:	4b30      	ldr	r3, [pc, #192]	; (8002668 <T2MotorForward+0x198>)
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	2b09      	cmp	r3, #9
 80025ac:	d804      	bhi.n	80025b8 <T2MotorForward+0xe8>
    	    htim1.Instance->CCR4 = 100; // hard left
 80025ae:	4b1e      	ldr	r3, [pc, #120]	; (8002628 <T2MotorForward+0x158>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2264      	movs	r2, #100	; 0x64
 80025b4:	641a      	str	r2, [r3, #64]	; 0x40
 80025b6:	e00c      	b.n	80025d2 <T2MotorForward+0x102>
    	}
    	else if(LeftIR<10){
 80025b8:	4b2c      	ldr	r3, [pc, #176]	; (800266c <T2MotorForward+0x19c>)
 80025ba:	881b      	ldrh	r3, [r3, #0]
 80025bc:	2b09      	cmp	r3, #9
 80025be:	d804      	bhi.n	80025ca <T2MotorForward+0xfa>
    	    htim1.Instance->CCR4 = 200; // hard right
 80025c0:	4b19      	ldr	r3, [pc, #100]	; (8002628 <T2MotorForward+0x158>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	22c8      	movs	r2, #200	; 0xc8
 80025c6:	641a      	str	r2, [r3, #64]	; 0x40
 80025c8:	e003      	b.n	80025d2 <T2MotorForward+0x102>
    	}
    	else{
    	    htim1.Instance->CCR4 = 149; // center
 80025ca:	4b17      	ldr	r3, [pc, #92]	; (8002628 <T2MotorForward+0x158>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2295      	movs	r2, #149	; 0x95
 80025d0:	641a      	str	r2, [r3, #64]	; 0x40
    	}
        setDirection(1, 1);
 80025d2:	2101      	movs	r1, #1
 80025d4:	2001      	movs	r0, #1
 80025d6:	f7ff fbbb 	bl	8001d50 <setDirection>

        isForward = 1;
 80025da:	4b25      	ldr	r3, [pc, #148]	; (8002670 <T2MotorForward+0x1a0>)
 80025dc:	2201      	movs	r2, #1
 80025de:	601a      	str	r2, [r3, #0]
    while (Distance > 3)
 80025e0:	4b24      	ldr	r3, [pc, #144]	; (8002674 <T2MotorForward+0x1a4>)
 80025e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025e6:	f04f 0200 	mov.w	r2, #0
 80025ea:	4b23      	ldr	r3, [pc, #140]	; (8002678 <T2MotorForward+0x1a8>)
 80025ec:	f7fe faa4 	bl	8000b38 <__aeabi_dcmpgt>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1d7      	bne.n	80025a6 <T2MotorForward+0xd6>
    }
    isForward = 2;
 80025f6:	4b1e      	ldr	r3, [pc, #120]	; (8002670 <T2MotorForward+0x1a0>)
 80025f8:	2202      	movs	r2, #2
 80025fa:	601a      	str	r2, [r3, #0]
    MotorStop();
 80025fc:	f7ff fbea 	bl	8001dd4 <MotorStop>
    osDelay(sleeping);
 8002600:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002604:	f007 fd0c 	bl	800a020 <osDelay>
    //    if (offsetdistance>0){
    //    	MotorBack(1200,offsetdistance);
    //    }
    return averagecount;
 8002608:	4b16      	ldr	r3, [pc, #88]	; (8002664 <T2MotorForward+0x194>)
 800260a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260e:	4610      	mov	r0, r2
 8002610:	4619      	mov	r1, r3
 8002612:	f7fe fab1 	bl	8000b78 <__aeabi_d2iz>
 8002616:	4603      	mov	r3, r0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	200000ba 	.word	0x200000ba
 8002624:	200000bb 	.word	0x200000bb
 8002628:	2000026c 	.word	0x2000026c
 800262c:	20000108 	.word	0x20000108
 8002630:	20000110 	.word	0x20000110
 8002634:	20000118 	.word	0x20000118
 8002638:	200000bc 	.word	0x200000bc
 800263c:	200000c0 	.word	0x200000c0
 8002640:	00000000 	.word	0x00000000
 8002644:	42c80000 	.word	0x42c80000
 8002648:	20000140 	.word	0x20000140
 800264c:	20000154 	.word	0x20000154
 8002650:	200002fc 	.word	0x200002fc
 8002654:	200002b4 	.word	0x200002b4
 8002658:	200000c8 	.word	0x200000c8
 800265c:	200000cc 	.word	0x200000cc
 8002660:	200000d0 	.word	0x200000d0
 8002664:	200000d8 	.word	0x200000d8
 8002668:	200000b8 	.word	0x200000b8
 800266c:	200000b6 	.word	0x200000b6
 8002670:	20000004 	.word	0x20000004
 8002674:	20000180 	.word	0x20000180
 8002678:	40080000 	.word	0x40080000

0800267c <ForwardCheckIR>:

int ForwardCheckIR(int speed, char direction)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	460b      	mov	r3, r1
 8002686:	70fb      	strb	r3, [r7, #3]
    isMoving = true;
 8002688:	4b57      	ldr	r3, [pc, #348]	; (80027e8 <ForwardCheckIR+0x16c>)
 800268a:	2201      	movs	r2, #1
 800268c:	701a      	strb	r2, [r3, #0]
    isStraight = true;
 800268e:	4b57      	ldr	r3, [pc, #348]	; (80027ec <ForwardCheckIR+0x170>)
 8002690:	2201      	movs	r2, #1
 8002692:	701a      	strb	r2, [r3, #0]
    htim1.Instance->CCR4 = 149; // set servo to center
 8002694:	4b56      	ldr	r3, [pc, #344]	; (80027f0 <ForwardCheckIR+0x174>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2295      	movs	r2, #149	; 0x95
 800269a:	641a      	str	r2, [r3, #64]	; 0x40
    distance_travelledA = 0;
 800269c:	4955      	ldr	r1, [pc, #340]	; (80027f4 <ForwardCheckIR+0x178>)
 800269e:	f04f 0200 	mov.w	r2, #0
 80026a2:	f04f 0300 	mov.w	r3, #0
 80026a6:	e9c1 2300 	strd	r2, r3, [r1]
    distance_travelledB = 0;
 80026aa:	4953      	ldr	r1, [pc, #332]	; (80027f8 <ForwardCheckIR+0x17c>)
 80026ac:	f04f 0200 	mov.w	r2, #0
 80026b0:	f04f 0300 	mov.w	r3, #0
 80026b4:	e9c1 2300 	strd	r2, r3, [r1]
    total_angle = 0;
 80026b8:	4950      	ldr	r1, [pc, #320]	; (80027fc <ForwardCheckIR+0x180>)
 80026ba:	f04f 0200 	mov.w	r2, #0
 80026be:	f04f 0300 	mov.w	r3, #0
 80026c2:	e9c1 2300 	strd	r2, r3, [r1]
    int IRdist = 50;
 80026c6:	2332      	movs	r3, #50	; 0x32
 80026c8:	60bb      	str	r3, [r7, #8]

    pwmLeft = speed;
 80026ca:	4a4d      	ldr	r2, [pc, #308]	; (8002800 <ForwardCheckIR+0x184>)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6013      	str	r3, [r2, #0]
    pwmRight = speed;
 80026d0:	4a4c      	ldr	r2, [pc, #304]	; (8002804 <ForwardCheckIR+0x188>)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6013      	str	r3, [r2, #0]

    setSpeed(pwmLeft, pwmRight);
 80026d6:	4b4a      	ldr	r3, [pc, #296]	; (8002800 <ForwardCheckIR+0x184>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a4a      	ldr	r2, [pc, #296]	; (8002804 <ForwardCheckIR+0x188>)
 80026dc:	6812      	ldr	r2, [r2, #0]
 80026de:	4611      	mov	r1, r2
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff fb1f 	bl	8001d24 <setSpeed>

    if (speed == 1200)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80026ec:	d109      	bne.n	8002702 <ForwardCheckIR+0x86>
    {
        PIDConfigInit(&SpeedSlow, 2.5, 2.0, 0.8);
 80026ee:	ed9f 1a46 	vldr	s2, [pc, #280]	; 8002808 <ForwardCheckIR+0x18c>
 80026f2:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80026f6:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 80026fa:	4844      	ldr	r0, [pc, #272]	; (800280c <ForwardCheckIR+0x190>)
 80026fc:	f7ff facc 	bl	8001c98 <PIDConfigInit>
 8002700:	e00d      	b.n	800271e <ForwardCheckIR+0xa2>
    }
    else if (speed == 3000)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002708:	4293      	cmp	r3, r2
 800270a:	d108      	bne.n	800271e <ForwardCheckIR+0xa2>
    {
        PIDConfigInit(&SpeedFast, 100.0, 0.0, 0.0);
 800270c:	ed9f 1a40 	vldr	s2, [pc, #256]	; 8002810 <ForwardCheckIR+0x194>
 8002710:	eddf 0a3f 	vldr	s1, [pc, #252]	; 8002810 <ForwardCheckIR+0x194>
 8002714:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 8002814 <ForwardCheckIR+0x198>
 8002718:	483f      	ldr	r0, [pc, #252]	; (8002818 <ForwardCheckIR+0x19c>)
 800271a:	f7ff fabd 	bl	8001c98 <PIDConfigInit>
    }

    __HAL_TIM_SET_COUNTER(&htim3, 0);     // Set the encoder counter value of right to 0
 800271e:	4b3f      	ldr	r3, [pc, #252]	; (800281c <ForwardCheckIR+0x1a0>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2200      	movs	r2, #0
 8002724:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_TIM_SET_COUNTER(&htim2, 65535); // Set the encoder counter value of left to 65535
 8002726:	4b3e      	ldr	r3, [pc, #248]	; (8002820 <ForwardCheckIR+0x1a4>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800272e:	625a      	str	r2, [r3, #36]	; 0x24
    leftcount = 0, rightcount = 0;
 8002730:	4b3c      	ldr	r3, [pc, #240]	; (8002824 <ForwardCheckIR+0x1a8>)
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	4b3c      	ldr	r3, [pc, #240]	; (8002828 <ForwardCheckIR+0x1ac>)
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
    averagedistance = 0;
 800273c:	493b      	ldr	r1, [pc, #236]	; (800282c <ForwardCheckIR+0x1b0>)
 800273e:	f04f 0200 	mov.w	r2, #0
 8002742:	f04f 0300 	mov.w	r3, #0
 8002746:	e9c1 2300 	strd	r2, r3, [r1]
    averagecount = 0;
 800274a:	4939      	ldr	r1, [pc, #228]	; (8002830 <ForwardCheckIR+0x1b4>)
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	f04f 0300 	mov.w	r3, #0
 8002754:	e9c1 2300 	strd	r2, r3, [r1]

    int Ydist = 0;
 8002758:	2300      	movs	r3, #0
 800275a:	60fb      	str	r3, [r7, #12]
    if (direction == 'L')
 800275c:	78fb      	ldrb	r3, [r7, #3]
 800275e:	2b4c      	cmp	r3, #76	; 0x4c
 8002760:	d117      	bne.n	8002792 <ForwardCheckIR+0x116>
    {
        while (RightIR <= IRdist)
 8002762:	e00f      	b.n	8002784 <ForwardCheckIR+0x108>
        {
            // set right pwm to speed
            setDirection(1, 1);
 8002764:	2101      	movs	r1, #1
 8002766:	2001      	movs	r0, #1
 8002768:	f7ff faf2 	bl	8001d50 <setDirection>
            Ydist = averagecount;
 800276c:	4b30      	ldr	r3, [pc, #192]	; (8002830 <ForwardCheckIR+0x1b4>)
 800276e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002772:	4610      	mov	r0, r2
 8002774:	4619      	mov	r1, r3
 8002776:	f7fe f9ff 	bl	8000b78 <__aeabi_d2iz>
 800277a:	4603      	mov	r3, r0
 800277c:	60fb      	str	r3, [r7, #12]
            isForward = 1;
 800277e:	4b2d      	ldr	r3, [pc, #180]	; (8002834 <ForwardCheckIR+0x1b8>)
 8002780:	2201      	movs	r2, #1
 8002782:	601a      	str	r2, [r3, #0]
        while (RightIR <= IRdist)
 8002784:	4b2c      	ldr	r3, [pc, #176]	; (8002838 <ForwardCheckIR+0x1bc>)
 8002786:	881b      	ldrh	r3, [r3, #0]
 8002788:	461a      	mov	r2, r3
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	4293      	cmp	r3, r2
 800278e:	dae9      	bge.n	8002764 <ForwardCheckIR+0xe8>
 8002790:	e019      	b.n	80027c6 <ForwardCheckIR+0x14a>
        }
    }
    else if (direction == 'R')
 8002792:	78fb      	ldrb	r3, [r7, #3]
 8002794:	2b52      	cmp	r3, #82	; 0x52
 8002796:	d116      	bne.n	80027c6 <ForwardCheckIR+0x14a>
    {
        while (LeftIR <= IRdist)
 8002798:	e00f      	b.n	80027ba <ForwardCheckIR+0x13e>
        {
            // set right pwm to speed
            setDirection(1, 1);
 800279a:	2101      	movs	r1, #1
 800279c:	2001      	movs	r0, #1
 800279e:	f7ff fad7 	bl	8001d50 <setDirection>
            Ydist = averagecount;
 80027a2:	4b23      	ldr	r3, [pc, #140]	; (8002830 <ForwardCheckIR+0x1b4>)
 80027a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a8:	4610      	mov	r0, r2
 80027aa:	4619      	mov	r1, r3
 80027ac:	f7fe f9e4 	bl	8000b78 <__aeabi_d2iz>
 80027b0:	4603      	mov	r3, r0
 80027b2:	60fb      	str	r3, [r7, #12]
            isForward = 1;
 80027b4:	4b1f      	ldr	r3, [pc, #124]	; (8002834 <ForwardCheckIR+0x1b8>)
 80027b6:	2201      	movs	r2, #1
 80027b8:	601a      	str	r2, [r3, #0]
        while (LeftIR <= IRdist)
 80027ba:	4b20      	ldr	r3, [pc, #128]	; (800283c <ForwardCheckIR+0x1c0>)
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	461a      	mov	r2, r3
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	4293      	cmp	r3, r2
 80027c4:	dae9      	bge.n	800279a <ForwardCheckIR+0x11e>
        }
    }

    isForward = 2;
 80027c6:	4b1b      	ldr	r3, [pc, #108]	; (8002834 <ForwardCheckIR+0x1b8>)
 80027c8:	2202      	movs	r2, #2
 80027ca:	601a      	str	r2, [r3, #0]
    isStraight = false;
 80027cc:	4b07      	ldr	r3, [pc, #28]	; (80027ec <ForwardCheckIR+0x170>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	701a      	strb	r2, [r3, #0]
    MotorStop();
 80027d2:	f7ff faff 	bl	8001dd4 <MotorStop>
    osDelay(sleeping);
 80027d6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80027da:	f007 fc21 	bl	800a020 <osDelay>
    //    if (offsetdistance>0){
    //    	MotorBack(1200,offsetdistance);
    //    }
    return Ydist;
 80027de:	68fb      	ldr	r3, [r7, #12]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	200000ba 	.word	0x200000ba
 80027ec:	200000bb 	.word	0x200000bb
 80027f0:	2000026c 	.word	0x2000026c
 80027f4:	20000108 	.word	0x20000108
 80027f8:	20000110 	.word	0x20000110
 80027fc:	20000118 	.word	0x20000118
 8002800:	200000bc 	.word	0x200000bc
 8002804:	200000c0 	.word	0x200000c0
 8002808:	3f4ccccd 	.word	0x3f4ccccd
 800280c:	20000140 	.word	0x20000140
 8002810:	00000000 	.word	0x00000000
 8002814:	42c80000 	.word	0x42c80000
 8002818:	20000154 	.word	0x20000154
 800281c:	200002fc 	.word	0x200002fc
 8002820:	200002b4 	.word	0x200002b4
 8002824:	200000c8 	.word	0x200000c8
 8002828:	200000cc 	.word	0x200000cc
 800282c:	200000d0 	.word	0x200000d0
 8002830:	200000d8 	.word	0x200000d8
 8002834:	20000004 	.word	0x20000004
 8002838:	200000b8 	.word	0x200000b8
 800283c:	200000b6 	.word	0x200000b6

08002840 <customMotor>:
// temp gamepad code implementation
int go = 10;

void customMotor(char *dir, int val)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
    htim1.Instance->CCR4 = 149; // set servo to center
 800284a:	4b47      	ldr	r3, [pc, #284]	; (8002968 <customMotor+0x128>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2295      	movs	r2, #149	; 0x95
 8002850:	641a      	str	r2, [r3, #64]	; 0x40
    int speed = 3000;
 8002852:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002856:	617b      	str	r3, [r7, #20]
    int turnspeed = 3000;
 8002858:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800285c:	613b      	str	r3, [r7, #16]
    int turnangle = 90;
 800285e:	235a      	movs	r3, #90	; 0x5a
 8002860:	60fb      	str	r3, [r7, #12]
    while (ack == 0)
 8002862:	e077      	b.n	8002954 <customMotor+0x114>
        //			ack = MotorBackRight(turnspeed, 90);
        //		else{
        //			MotorStop();
        //			ack=2;
        //		}
        if (strcmp(dir, "FW") == 0)
 8002864:	4941      	ldr	r1, [pc, #260]	; (800296c <customMotor+0x12c>)
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7fd fcb2 	bl	80001d0 <strcmp>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d107      	bne.n	8002882 <customMotor+0x42>
            ack = MotorForward(speed, val);
 8002872:	6839      	ldr	r1, [r7, #0]
 8002874:	6978      	ldr	r0, [r7, #20]
 8002876:	f7ff fabb 	bl	8001df0 <MotorForward>
 800287a:	4603      	mov	r3, r0
 800287c:	4a3c      	ldr	r2, [pc, #240]	; (8002970 <customMotor+0x130>)
 800287e:	6013      	str	r3, [r2, #0]
 8002880:	e05f      	b.n	8002942 <customMotor+0x102>
        else if (strcmp(dir, "BW") == 0)
 8002882:	493c      	ldr	r1, [pc, #240]	; (8002974 <customMotor+0x134>)
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f7fd fca3 	bl	80001d0 <strcmp>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d107      	bne.n	80028a0 <customMotor+0x60>
            ack = MotorBack(speed, val);
 8002890:	6839      	ldr	r1, [r7, #0]
 8002892:	6978      	ldr	r0, [r7, #20]
 8002894:	f7ff fb6a 	bl	8001f6c <MotorBack>
 8002898:	4603      	mov	r3, r0
 800289a:	4a35      	ldr	r2, [pc, #212]	; (8002970 <customMotor+0x130>)
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	e050      	b.n	8002942 <customMotor+0x102>
        else if (strcmp(dir, "FL") == 0)
 80028a0:	4935      	ldr	r1, [pc, #212]	; (8002978 <customMotor+0x138>)
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7fd fc94 	bl	80001d0 <strcmp>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d107      	bne.n	80028be <customMotor+0x7e>
            ack = MotorLeft(turnspeed, 87);
 80028ae:	2157      	movs	r1, #87	; 0x57
 80028b0:	6938      	ldr	r0, [r7, #16]
 80028b2:	f7ff fbf9 	bl	80020a8 <MotorLeft>
 80028b6:	4603      	mov	r3, r0
 80028b8:	4a2d      	ldr	r2, [pc, #180]	; (8002970 <customMotor+0x130>)
 80028ba:	6013      	str	r3, [r2, #0]
 80028bc:	e041      	b.n	8002942 <customMotor+0x102>
        else if (strcmp(dir, "FR") == 0)
 80028be:	492f      	ldr	r1, [pc, #188]	; (800297c <customMotor+0x13c>)
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f7fd fc85 	bl	80001d0 <strcmp>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d108      	bne.n	80028de <customMotor+0x9e>
            ack = MotorRight(turnspeed, -87);
 80028cc:	f06f 0156 	mvn.w	r1, #86	; 0x56
 80028d0:	6938      	ldr	r0, [r7, #16]
 80028d2:	f7ff fc8d 	bl	80021f0 <MotorRight>
 80028d6:	4603      	mov	r3, r0
 80028d8:	4a25      	ldr	r2, [pc, #148]	; (8002970 <customMotor+0x130>)
 80028da:	6013      	str	r3, [r2, #0]
 80028dc:	e031      	b.n	8002942 <customMotor+0x102>
        else if (strcmp(dir, "BL") == 0)
 80028de:	4928      	ldr	r1, [pc, #160]	; (8002980 <customMotor+0x140>)
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f7fd fc75 	bl	80001d0 <strcmp>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d108      	bne.n	80028fe <customMotor+0xbe>
            ack = MotorBackLeft(turnspeed, -87);
 80028ec:	f06f 0156 	mvn.w	r1, #86	; 0x56
 80028f0:	6938      	ldr	r0, [r7, #16]
 80028f2:	f7ff fc29 	bl	8002148 <MotorBackLeft>
 80028f6:	4603      	mov	r3, r0
 80028f8:	4a1d      	ldr	r2, [pc, #116]	; (8002970 <customMotor+0x130>)
 80028fa:	6013      	str	r3, [r2, #0]
 80028fc:	e021      	b.n	8002942 <customMotor+0x102>
        else if (strcmp(dir, "BR") == 0)
 80028fe:	4921      	ldr	r1, [pc, #132]	; (8002984 <customMotor+0x144>)
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f7fd fc65 	bl	80001d0 <strcmp>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d107      	bne.n	800291c <customMotor+0xdc>
            ack = MotorBackRight(turnspeed, 88);
 800290c:	2158      	movs	r1, #88	; 0x58
 800290e:	6938      	ldr	r0, [r7, #16]
 8002910:	f7ff fcbe 	bl	8002290 <MotorBackRight>
 8002914:	4603      	mov	r3, r0
 8002916:	4a16      	ldr	r2, [pc, #88]	; (8002970 <customMotor+0x130>)
 8002918:	6013      	str	r3, [r2, #0]
 800291a:	e012      	b.n	8002942 <customMotor+0x102>
        else if (strcmp(dir, "TT") == 0)
 800291c:	491a      	ldr	r1, [pc, #104]	; (8002988 <customMotor+0x148>)
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7fd fc56 	bl	80001d0 <strcmp>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d106      	bne.n	8002938 <customMotor+0xf8>
        {
            Task2 = 1;
 800292a:	4b18      	ldr	r3, [pc, #96]	; (800298c <customMotor+0x14c>)
 800292c:	2201      	movs	r2, #1
 800292e:	601a      	str	r2, [r3, #0]
            ack = 1;
 8002930:	4b0f      	ldr	r3, [pc, #60]	; (8002970 <customMotor+0x130>)
 8002932:	2201      	movs	r2, #1
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	e004      	b.n	8002942 <customMotor+0x102>
        }
        else
        {
            MotorStop();
 8002938:	f7ff fa4c 	bl	8001dd4 <MotorStop>
            ack = 2;
 800293c:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <customMotor+0x130>)
 800293e:	2202      	movs	r2, #2
 8002940:	601a      	str	r2, [r3, #0]
        }

        MotorStop();
 8002942:	f7ff fa47 	bl	8001dd4 <MotorStop>
        htim1.Instance->CCR4 = 149;
 8002946:	4b08      	ldr	r3, [pc, #32]	; (8002968 <customMotor+0x128>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2295      	movs	r2, #149	; 0x95
 800294c:	641a      	str	r2, [r3, #64]	; 0x40
        osDelay(1);
 800294e:	2001      	movs	r0, #1
 8002950:	f007 fb66 	bl	800a020 <osDelay>
    while (ack == 0)
 8002954:	4b06      	ldr	r3, [pc, #24]	; (8002970 <customMotor+0x130>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d083      	beq.n	8002864 <customMotor+0x24>
    }
}
 800295c:	bf00      	nop
 800295e:	bf00      	nop
 8002960:	3718      	adds	r7, #24
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	2000026c 	.word	0x2000026c
 800296c:	0800e264 	.word	0x0800e264
 8002970:	20000000 	.word	0x20000000
 8002974:	0800e268 	.word	0x0800e268
 8002978:	0800e26c 	.word	0x0800e26c
 800297c:	0800e270 	.word	0x0800e270
 8002980:	0800e274 	.word	0x0800e274
 8002984:	0800e278 	.word	0x0800e278
 8002988:	0800e27c 	.word	0x0800e27c
 800298c:	200000ac 	.word	0x200000ac

08002990 <StartDefaultTask>:
double turnDistance = 0;
double cmDistance = 0;
double offsetdistx = 0;
double offsetdisty = 0;
void StartDefaultTask(void *argument)
{
 8002990:	b5b0      	push	{r4, r5, r7, lr}
 8002992:	b09a      	sub	sp, #104	; 0x68
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
    uint8_t OLEDstr[20] = "";
 8002998:	2300      	movs	r3, #0
 800299a:	623b      	str	r3, [r7, #32]
 800299c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
 80029a4:	605a      	str	r2, [r3, #4]
 80029a6:	609a      	str	r2, [r3, #8]
 80029a8:	60da      	str	r2, [r3, #12]
    uint8_t OLEDstr1[20] = "";
 80029aa:	2300      	movs	r3, #0
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	f107 0310 	add.w	r3, r7, #16
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]
 80029b6:	605a      	str	r2, [r3, #4]
 80029b8:	609a      	str	r2, [r3, #8]
 80029ba:	60da      	str	r2, [r3, #12]
    uint8_t integer1_str[4] = ""; // aaa-aaa-aaa-a
 80029bc:	2300      	movs	r3, #0
 80029be:	60bb      	str	r3, [r7, #8]
    uint8_t old_Speed, old_Turnangle = 0;
 80029c0:	2300      	movs	r3, #0
 80029c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    int aaaaa = 0;
 80029c6:	2300      	movs	r3, #0
 80029c8:	65bb      	str	r3, [r7, #88]	; 0x58

    int flag = 0;
 80029ca:	2300      	movs	r3, #0
 80029cc:	657b      	str	r3, [r7, #84]	; 0x54

    htim1.Instance->CCR4 = 149; // set servo to center
 80029ce:	4bae      	ldr	r3, [pc, #696]	; (8002c88 <StartDefaultTask+0x2f8>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2295      	movs	r2, #149	; 0x95
 80029d4:	641a      	str	r2, [r3, #64]	; 0x40
    osDelay(6000);              // approx time taken to initiate gyro
 80029d6:	f241 7070 	movw	r0, #6000	; 0x1770
 80029da:	f007 fb21 	bl	800a020 <osDelay>
    //	MotorLeft(3000,87);
    //	MotorRight(3000,-87);
    //	MotorRight(3000,-87);
    //	MotorLeft(3000,87);
    //	MotorBack(3000,20);
    HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, 5);
 80029de:	2205      	movs	r2, #5
 80029e0:	49aa      	ldr	r1, [pc, #680]	; (8002c8c <StartDefaultTask+0x2fc>)
 80029e2:	48ab      	ldr	r0, [pc, #684]	; (8002c90 <StartDefaultTask+0x300>)
 80029e4:	f006 fa73 	bl	8008ece <HAL_UART_Receive_IT>

    for (;;)
    {
        if (Task2 == 0)
 80029e8:	4baa      	ldr	r3, [pc, #680]	; (8002c94 <StartDefaultTask+0x304>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d14b      	bne.n	8002a88 <StartDefaultTask+0xf8>
        {
            // task 1
            if (ack == 0)
 80029f0:	4ba9      	ldr	r3, [pc, #676]	; (8002c98 <StartDefaultTask+0x308>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1f7      	bne.n	80029e8 <StartDefaultTask+0x58>
            { // if have ISR

                slice(aRxBuffer, Command, 0, 2);
 80029f8:	2302      	movs	r3, #2
 80029fa:	2200      	movs	r2, #0
 80029fc:	49a7      	ldr	r1, [pc, #668]	; (8002c9c <StartDefaultTask+0x30c>)
 80029fe:	48a3      	ldr	r0, [pc, #652]	; (8002c8c <StartDefaultTask+0x2fc>)
 8002a00:	f002 f826 	bl	8004a50 <slice>
                slice(aRxBuffer, integer1_str, 2, 4);
 8002a04:	f107 0108 	add.w	r1, r7, #8
 8002a08:	2304      	movs	r3, #4
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	489f      	ldr	r0, [pc, #636]	; (8002c8c <StartDefaultTask+0x2fc>)
 8002a0e:	f002 f81f 	bl	8004a50 <slice>
                TargetDistance = strtoint(integer1_str);
 8002a12:	f107 0308 	add.w	r3, r7, #8
 8002a16:	4618      	mov	r0, r3
 8002a18:	f001 fff4 	bl	8004a04 <strtoint>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	4b9f      	ldr	r3, [pc, #636]	; (8002ca0 <StartDefaultTask+0x310>)
 8002a22:	701a      	strb	r2, [r3, #0]

                if (strcmp(aRxBuffer, "FINN") != 0)
 8002a24:	499f      	ldr	r1, [pc, #636]	; (8002ca4 <StartDefaultTask+0x314>)
 8002a26:	4899      	ldr	r0, [pc, #612]	; (8002c8c <StartDefaultTask+0x2fc>)
 8002a28:	f7fd fbd2 	bl	80001d0 <strcmp>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d006      	beq.n	8002a40 <StartDefaultTask+0xb0>
                {
                    customMotor(Command, TargetDistance);
 8002a32:	4b9b      	ldr	r3, [pc, #620]	; (8002ca0 <StartDefaultTask+0x310>)
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	4619      	mov	r1, r3
 8002a38:	4898      	ldr	r0, [pc, #608]	; (8002c9c <StartDefaultTask+0x30c>)
 8002a3a:	f7ff ff01 	bl	8002840 <customMotor>
 8002a3e:	e005      	b.n	8002a4c <StartDefaultTask+0xbc>
                }
                else
                {
                    MotorStop();
 8002a40:	f7ff f9c8 	bl	8001dd4 <MotorStop>
                    htim1.Instance->CCR4 = 149;
 8002a44:	4b90      	ldr	r3, [pc, #576]	; (8002c88 <StartDefaultTask+0x2f8>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2295      	movs	r2, #149	; 0x95
 8002a4a:	641a      	str	r2, [r3, #64]	; 0x40
                }
                if (ack == 1)
 8002a4c:	4b92      	ldr	r3, [pc, #584]	; (8002c98 <StartDefaultTask+0x308>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d1c9      	bne.n	80029e8 <StartDefaultTask+0x58>
                { // check if done with custom motor
                    MotorStop();
 8002a54:	f7ff f9be 	bl	8001dd4 <MotorStop>
                    htim1.Instance->CCR4 = 149;
 8002a58:	4b8b      	ldr	r3, [pc, #556]	; (8002c88 <StartDefaultTask+0x2f8>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2295      	movs	r2, #149	; 0x95
 8002a5e:	641a      	str	r2, [r3, #64]	; 0x40
                    HAL_UART_Transmit(&huart3, "ACK\n\r", 5, 0xFFFF);
 8002a60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a64:	2205      	movs	r2, #5
 8002a66:	4990      	ldr	r1, [pc, #576]	; (8002ca8 <StartDefaultTask+0x318>)
 8002a68:	4889      	ldr	r0, [pc, #548]	; (8002c90 <StartDefaultTask+0x300>)
 8002a6a:	f006 f99e 	bl	8008daa <HAL_UART_Transmit>
                    ack = 2; // set back to default
 8002a6e:	4b8a      	ldr	r3, [pc, #552]	; (8002c98 <StartDefaultTask+0x308>)
 8002a70:	2202      	movs	r2, #2
 8002a72:	601a      	str	r2, [r3, #0]
                    memset(aRxBuffer, '0', strlen(aRxBuffer));
 8002a74:	4885      	ldr	r0, [pc, #532]	; (8002c8c <StartDefaultTask+0x2fc>)
 8002a76:	f7fd fbb5 	bl	80001e4 <strlen>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	2130      	movs	r1, #48	; 0x30
 8002a80:	4882      	ldr	r0, [pc, #520]	; (8002c8c <StartDefaultTask+0x2fc>)
 8002a82:	f00a f80f 	bl	800caa4 <memset>
 8002a86:	e7af      	b.n	80029e8 <StartDefaultTask+0x58>
                }
            } // end ack check
        }     // end check for task 2
        else if (Task2 == 1)
 8002a88:	4b82      	ldr	r3, [pc, #520]	; (8002c94 <StartDefaultTask+0x304>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d1ab      	bne.n	80029e8 <StartDefaultTask+0x58>
        {
            // task 2
            // move to first obstacle
            double initialDistance = T1MotorForward(3000); // record distance1
 8002a90:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002a94:	f7ff fc50 	bl	8002338 <T1MotorForward>
 8002a98:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48

            HAL_UART_Transmit(&huart3, "SNAP\n\r", 6, 0xFFFF);
 8002a9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002aa0:	2206      	movs	r2, #6
 8002aa2:	4982      	ldr	r1, [pc, #520]	; (8002cac <StartDefaultTask+0x31c>)
 8002aa4:	487a      	ldr	r0, [pc, #488]	; (8002c90 <StartDefaultTask+0x300>)
 8002aa6:	f006 f980 	bl	8008daa <HAL_UART_Transmit>
            HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, 5);
 8002aaa:	2205      	movs	r2, #5
 8002aac:	4977      	ldr	r1, [pc, #476]	; (8002c8c <StartDefaultTask+0x2fc>)
 8002aae:	4878      	ldr	r0, [pc, #480]	; (8002c90 <StartDefaultTask+0x300>)
 8002ab0:	f006 fa0d 	bl	8008ece <HAL_UART_Receive_IT>
            for (;;)
            { // wait for rpi to sent L/R
                if (ack == 0)
 8002ab4:	4b78      	ldr	r3, [pc, #480]	; (8002c98 <StartDefaultTask+0x308>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1fb      	bne.n	8002ab4 <StartDefaultTask+0x124>
                {
                    if (aRxBuffer[0] == 'L')
 8002abc:	4b73      	ldr	r3, [pc, #460]	; (8002c8c <StartDefaultTask+0x2fc>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b4c      	cmp	r3, #76	; 0x4c
 8002ac2:	d127      	bne.n	8002b14 <StartDefaultTask+0x184>
//					//		osDelay(500);
//							MotorForward(3000,10);
//							MotorLeft(3000,51);

                        // 45degree left
                        MotorLeft(3000, 45);
 8002ac4:	212d      	movs	r1, #45	; 0x2d
 8002ac6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002aca:	f7ff faed 	bl	80020a8 <MotorLeft>
                        //		osDelay(500);
                        MotorForward(3000, 10);
 8002ace:	210a      	movs	r1, #10
 8002ad0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002ad4:	f7ff f98c 	bl	8001df0 <MotorForward>
                        MotorRight(3000, -90);
 8002ad8:	f06f 0159 	mvn.w	r1, #89	; 0x59
 8002adc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002ae0:	f7ff fb86 	bl	80021f0 <MotorRight>
                        //		osDelay(500);
                        MotorForward(3000, 20);
 8002ae4:	2114      	movs	r1, #20
 8002ae6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002aea:	f7ff f981 	bl	8001df0 <MotorForward>
                        MotorLeft(3000, 42);
 8002aee:	212a      	movs	r1, #42	; 0x2a
 8002af0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002af4:	f7ff fad8 	bl	80020a8 <MotorLeft>

                        //Set some distance
                        turnDistance += 90;
 8002af8:	4b6d      	ldr	r3, [pc, #436]	; (8002cb0 <StartDefaultTask+0x320>)
 8002afa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002afe:	f04f 0200 	mov.w	r2, #0
 8002b02:	4b6c      	ldr	r3, [pc, #432]	; (8002cb4 <StartDefaultTask+0x324>)
 8002b04:	f7fd fbd2 	bl	80002ac <__adddf3>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4968      	ldr	r1, [pc, #416]	; (8002cb0 <StartDefaultTask+0x320>)
 8002b0e:	e9c1 2300 	strd	r2, r3, [r1]
 8002b12:	e02b      	b.n	8002b6c <StartDefaultTask+0x1dc>
                    }
                    else if (aRxBuffer[0] == 'R')
 8002b14:	4b5d      	ldr	r3, [pc, #372]	; (8002c8c <StartDefaultTask+0x2fc>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b52      	cmp	r3, #82	; 0x52
 8002b1a:	d127      	bne.n	8002b6c <StartDefaultTask+0x1dc>
                    {
                        // Right
                        MotorRight(3000, -45);
 8002b1c:	f06f 012c 	mvn.w	r1, #44	; 0x2c
 8002b20:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002b24:	f7ff fb64 	bl	80021f0 <MotorRight>
                        MotorForward(3000, 15);
 8002b28:	210f      	movs	r1, #15
 8002b2a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002b2e:	f7ff f95f 	bl	8001df0 <MotorForward>
                        MotorLeft(3000, 88);
 8002b32:	2158      	movs	r1, #88	; 0x58
 8002b34:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002b38:	f7ff fab6 	bl	80020a8 <MotorLeft>
                        MotorForward(3000, 20);
 8002b3c:	2114      	movs	r1, #20
 8002b3e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002b42:	f7ff f955 	bl	8001df0 <MotorForward>
                        MotorRight(3000, -43);
 8002b46:	f06f 012a 	mvn.w	r1, #42	; 0x2a
 8002b4a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002b4e:	f7ff fb4f 	bl	80021f0 <MotorRight>

                        //Set some distance to be set
                        turnDistance += 90;
 8002b52:	4b57      	ldr	r3, [pc, #348]	; (8002cb0 <StartDefaultTask+0x320>)
 8002b54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b58:	f04f 0200 	mov.w	r2, #0
 8002b5c:	4b55      	ldr	r3, [pc, #340]	; (8002cb4 <StartDefaultTask+0x324>)
 8002b5e:	f7fd fba5 	bl	80002ac <__adddf3>
 8002b62:	4602      	mov	r2, r0
 8002b64:	460b      	mov	r3, r1
 8002b66:	4952      	ldr	r1, [pc, #328]	; (8002cb0 <StartDefaultTask+0x320>)
 8002b68:	e9c1 2300 	strd	r2, r3, [r1]
                    }
                    ack = 2;
 8002b6c:	4b4a      	ldr	r3, [pc, #296]	; (8002c98 <StartDefaultTask+0x308>)
 8002b6e:	2202      	movs	r2, #2
 8002b70:	601a      	str	r2, [r3, #0]
                    break;
 8002b72:	bf00      	nop
                } // end ack check
            }     // end for loop
            // move towards 2nd obstacle
            // Initial move distance

            osDelay(500);
 8002b74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b78:	f007 fa52 	bl	800a020 <osDelay>
            if (Distance < 7)
 8002b7c:	4b4e      	ldr	r3, [pc, #312]	; (8002cb8 <StartDefaultTask+0x328>)
 8002b7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	4b4d      	ldr	r3, [pc, #308]	; (8002cbc <StartDefaultTask+0x32c>)
 8002b88:	f7fd ffb8 	bl	8000afc <__aeabi_dcmplt>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d100      	bne.n	8002b94 <StartDefaultTask+0x204>
 8002b92:	e047      	b.n	8002c24 <StartDefaultTask+0x294>
            {
            	//Store the initial distance
            	double initialDistance = Distance;
 8002b94:	4b48      	ldr	r3, [pc, #288]	; (8002cb8 <StartDefaultTask+0x328>)
 8002b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b9a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
                while (Distance < 7)
 8002b9e:	e014      	b.n	8002bca <StartDefaultTask+0x23a>
                { // if distance too near, move back
                    isForward = true;
 8002ba0:	4b47      	ldr	r3, [pc, #284]	; (8002cc0 <StartDefaultTask+0x330>)
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	601a      	str	r2, [r3, #0]
                    isStraight = true;
 8002ba6:	4b47      	ldr	r3, [pc, #284]	; (8002cc4 <StartDefaultTask+0x334>)
 8002ba8:	2201      	movs	r2, #1
 8002baa:	701a      	strb	r2, [r3, #0]
                    setSpeed(3000, 3000);
 8002bac:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002bb0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002bb4:	f7ff f8b6 	bl	8001d24 <setSpeed>
                    setDirection(0, 0);
 8002bb8:	2100      	movs	r1, #0
 8002bba:	2000      	movs	r0, #0
 8002bbc:	f7ff f8c8 	bl	8001d50 <setDirection>
                    //Set the is forward flag to be false
                    isForward = 0;
 8002bc0:	4b3f      	ldr	r3, [pc, #252]	; (8002cc0 <StartDefaultTask+0x330>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]
                    //Update reverse to be true
                    flag = 1;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	657b      	str	r3, [r7, #84]	; 0x54
                while (Distance < 7)
 8002bca:	4b3b      	ldr	r3, [pc, #236]	; (8002cb8 <StartDefaultTask+0x328>)
 8002bcc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bd0:	f04f 0200 	mov.w	r2, #0
 8002bd4:	4b39      	ldr	r3, [pc, #228]	; (8002cbc <StartDefaultTask+0x32c>)
 8002bd6:	f7fd ff91 	bl	8000afc <__aeabi_dcmplt>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1df      	bne.n	8002ba0 <StartDefaultTask+0x210>
                }
                //After reversing, we get that the forward motion is there
                isForward = 2;
 8002be0:	4b37      	ldr	r3, [pc, #220]	; (8002cc0 <StartDefaultTask+0x330>)
 8002be2:	2202      	movs	r2, #2
 8002be4:	601a      	str	r2, [r3, #0]
                //3.85 is the multiplier for ultrasonic
                turnDistance -= (7 - initialDistance) * 3.85;
 8002be6:	4b32      	ldr	r3, [pc, #200]	; (8002cb0 <StartDefaultTask+0x320>)
 8002be8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002bec:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002bf0:	f04f 0000 	mov.w	r0, #0
 8002bf4:	4931      	ldr	r1, [pc, #196]	; (8002cbc <StartDefaultTask+0x32c>)
 8002bf6:	f7fd fb57 	bl	80002a8 <__aeabi_dsub>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	460b      	mov	r3, r1
 8002bfe:	4610      	mov	r0, r2
 8002c00:	4619      	mov	r1, r3
 8002c02:	a31f      	add	r3, pc, #124	; (adr r3, 8002c80 <StartDefaultTask+0x2f0>)
 8002c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c08:	f7fd fd06 	bl	8000618 <__aeabi_dmul>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	460b      	mov	r3, r1
 8002c10:	4620      	mov	r0, r4
 8002c12:	4629      	mov	r1, r5
 8002c14:	f7fd fb48 	bl	80002a8 <__aeabi_dsub>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	4924      	ldr	r1, [pc, #144]	; (8002cb0 <StartDefaultTask+0x320>)
 8002c1e:	e9c1 2300 	strd	r2, r3, [r1]
 8002c22:	e00f      	b.n	8002c44 <StartDefaultTask+0x2b4>
            }
            else
            {
            	//This is the distance between 1st obstacle to 2nd obstacle
                offsetdisty += T1MotorForward(3000); // record distance1
 8002c24:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002c28:	f7ff fb86 	bl	8002338 <T1MotorForward>
 8002c2c:	ec51 0b10 	vmov	r0, r1, d0
 8002c30:	4b25      	ldr	r3, [pc, #148]	; (8002cc8 <StartDefaultTask+0x338>)
 8002c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c36:	f7fd fb39 	bl	80002ac <__adddf3>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	4922      	ldr	r1, [pc, #136]	; (8002cc8 <StartDefaultTask+0x338>)
 8002c40:	e9c1 2300 	strd	r2, r3, [r1]
            }
            //After stopping we try to snap
            MotorStop();
 8002c44:	f7ff f8c6 	bl	8001dd4 <MotorStop>

            // check 2nd obstacle
            HAL_UART_Transmit(&huart3, "SNAP\n\r", 6, 0xFFFF);
 8002c48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c4c:	2206      	movs	r2, #6
 8002c4e:	4917      	ldr	r1, [pc, #92]	; (8002cac <StartDefaultTask+0x31c>)
 8002c50:	480f      	ldr	r0, [pc, #60]	; (8002c90 <StartDefaultTask+0x300>)
 8002c52:	f006 f8aa 	bl	8008daa <HAL_UART_Transmit>
            HAL_UART_Receive_IT(&huart3, (uint8_t *)aRxBuffer, 5);
 8002c56:	2205      	movs	r2, #5
 8002c58:	490c      	ldr	r1, [pc, #48]	; (8002c8c <StartDefaultTask+0x2fc>)
 8002c5a:	480d      	ldr	r0, [pc, #52]	; (8002c90 <StartDefaultTask+0x300>)
 8002c5c:	f006 f937 	bl	8008ece <HAL_UART_Receive_IT>
            for (;;)
            { // wait for rpi
                if (ack == 0)
 8002c60:	4b0d      	ldr	r3, [pc, #52]	; (8002c98 <StartDefaultTask+0x308>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1fb      	bne.n	8002c60 <StartDefaultTask+0x2d0>
                {
                    if (aRxBuffer[0] == 'L')
 8002c68:	4b08      	ldr	r3, [pc, #32]	; (8002c8c <StartDefaultTask+0x2fc>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b4c      	cmp	r3, #76	; 0x4c
 8002c6e:	d12d      	bne.n	8002ccc <StartDefaultTask+0x33c>
                    {
                        // Left
                        // MotorLeft(3000,89);
                        MotorLeft(3000, 86);
 8002c70:	2156      	movs	r1, #86	; 0x56
 8002c72:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002c76:	f7ff fa17 	bl	80020a8 <MotorLeft>
 8002c7a:	e031      	b.n	8002ce0 <StartDefaultTask+0x350>
 8002c7c:	f3af 8000 	nop.w
 8002c80:	cccccccd 	.word	0xcccccccd
 8002c84:	400ecccc 	.word	0x400ecccc
 8002c88:	2000026c 	.word	0x2000026c
 8002c8c:	2000009c 	.word	0x2000009c
 8002c90:	200003d4 	.word	0x200003d4
 8002c94:	200000ac 	.word	0x200000ac
 8002c98:	20000000 	.word	0x20000000
 8002c9c:	200000b0 	.word	0x200000b0
 8002ca0:	200000b4 	.word	0x200000b4
 8002ca4:	0800e280 	.word	0x0800e280
 8002ca8:	0800e288 	.word	0x0800e288
 8002cac:	0800e290 	.word	0x0800e290
 8002cb0:	20000440 	.word	0x20000440
 8002cb4:	40568000 	.word	0x40568000
 8002cb8:	20000180 	.word	0x20000180
 8002cbc:	401c0000 	.word	0x401c0000
 8002cc0:	20000004 	.word	0x20000004
 8002cc4:	200000bb 	.word	0x200000bb
 8002cc8:	20000458 	.word	0x20000458
                    }
                    else if (aRxBuffer[0] == 'R')
 8002ccc:	4b53      	ldr	r3, [pc, #332]	; (8002e1c <StartDefaultTask+0x48c>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	2b52      	cmp	r3, #82	; 0x52
 8002cd2:	d105      	bne.n	8002ce0 <StartDefaultTask+0x350>
                    {
                        // Right
                        MotorRight(3000, -90);
 8002cd4:	f06f 0159 	mvn.w	r1, #89	; 0x59
 8002cd8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002cdc:	f7ff fa88 	bl	80021f0 <MotorRight>
                    }
                    ack = 2;
 8002ce0:	4b4f      	ldr	r3, [pc, #316]	; (8002e20 <StartDefaultTask+0x490>)
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	601a      	str	r2, [r3, #0]
                    break;
 8002ce6:	bf00      	nop
                } // end ack check
            }     // end for loop
            // wait for a while to calibrate gyro
            osDelay(sleeping);
 8002ce8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002cec:	f007 f998 	bl	800a020 <osDelay>

            // 1/2 of long side of obstacle
            ForwardCheckIR(3000, aRxBuffer[0]);
 8002cf0:	4b4a      	ldr	r3, [pc, #296]	; (8002e1c <StartDefaultTask+0x48c>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002cfa:	f7ff fcbf 	bl	800267c <ForwardCheckIR>

            osDelay(sleeping);
 8002cfe:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002d02:	f007 f98d 	bl	800a020 <osDelay>

            if (aRxBuffer[0] == 'L'){
 8002d06:	4b45      	ldr	r3, [pc, #276]	; (8002e1c <StartDefaultTask+0x48c>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	2b4c      	cmp	r3, #76	; 0x4c
 8002d0c:	d109      	bne.n	8002d22 <StartDefaultTask+0x392>
            	if (RightIR<40){
 8002d0e:	4b45      	ldr	r3, [pc, #276]	; (8002e24 <StartDefaultTask+0x494>)
 8002d10:	881b      	ldrh	r3, [r3, #0]
 8002d12:	2b27      	cmp	r3, #39	; 0x27
 8002d14:	d812      	bhi.n	8002d3c <StartDefaultTask+0x3ac>
                    //cmDistance += 7;
            		MotorForward(3000, 7);
 8002d16:	2107      	movs	r1, #7
 8002d18:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002d1c:	f7ff f868 	bl	8001df0 <MotorForward>
 8002d20:	e00c      	b.n	8002d3c <StartDefaultTask+0x3ac>
            	}
            }
            else if (aRxBuffer[0] == 'R'){
 8002d22:	4b3e      	ldr	r3, [pc, #248]	; (8002e1c <StartDefaultTask+0x48c>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	2b52      	cmp	r3, #82	; 0x52
 8002d28:	d108      	bne.n	8002d3c <StartDefaultTask+0x3ac>
            	if (LeftIR<40){
 8002d2a:	4b3f      	ldr	r3, [pc, #252]	; (8002e28 <StartDefaultTask+0x498>)
 8002d2c:	881b      	ldrh	r3, [r3, #0]
 8002d2e:	2b27      	cmp	r3, #39	; 0x27
 8002d30:	d804      	bhi.n	8002d3c <StartDefaultTask+0x3ac>
                    //cmDistance += 7;
            		MotorForward(3000, 7);
 8002d32:	2107      	movs	r1, #7
 8002d34:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002d38:	f7ff f85a 	bl	8001df0 <MotorForward>
            	}
			}

            osDelay(50);
 8002d3c:	2032      	movs	r0, #50	; 0x32
 8002d3e:	f007 f96f 	bl	800a020 <osDelay>
            // turn opp of arrow direction
            // short side of obstacle
            // turn
            // long side of obstacle
            // turn
            if (aRxBuffer[0] == 'L')
 8002d42:	4b36      	ldr	r3, [pc, #216]	; (8002e1c <StartDefaultTask+0x48c>)
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	2b4c      	cmp	r3, #76	; 0x4c
 8002d48:	d178      	bne.n	8002e3c <StartDefaultTask+0x4ac>
            {
                // Left
                MotorRight(3000, -87);
 8002d4a:	f06f 0156 	mvn.w	r1, #86	; 0x56
 8002d4e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002d52:	f7ff fa4d 	bl	80021f0 <MotorRight>
                osDelay(sleeping);
 8002d56:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002d5a:	f007 f961 	bl	800a020 <osDelay>
//                MotorForward(3000, 10);
                osDelay(sleeping);
 8002d5e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002d62:	f007 f95d 	bl	800a020 <osDelay>
                // short side
                offsetdisty += ForwardCheckIR(3000, aRxBuffer[0]);
 8002d66:	4b2d      	ldr	r3, [pc, #180]	; (8002e1c <StartDefaultTask+0x48c>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002d70:	f7ff fc84 	bl	800267c <ForwardCheckIR>
 8002d74:	4603      	mov	r3, r0
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7fd fbe4 	bl	8000544 <__aeabi_i2d>
 8002d7c:	4b2b      	ldr	r3, [pc, #172]	; (8002e2c <StartDefaultTask+0x49c>)
 8002d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d82:	f7fd fa93 	bl	80002ac <__adddf3>
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	4928      	ldr	r1, [pc, #160]	; (8002e2c <StartDefaultTask+0x49c>)
 8002d8c:	e9c1 2300 	strd	r2, r3, [r1]
                osDelay(100);
 8002d90:	2064      	movs	r0, #100	; 0x64
 8002d92:	f007 f945 	bl	800a020 <osDelay>
                MotorForward(3000, 10);
 8002d96:	210a      	movs	r1, #10
 8002d98:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002d9c:	f7ff f828 	bl	8001df0 <MotorForward>
                MotorRight(3000, -87);
 8002da0:	f06f 0156 	mvn.w	r1, #86	; 0x56
 8002da4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002da8:	f7ff fa22 	bl	80021f0 <MotorRight>
                osDelay(sleeping);
 8002dac:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002db0:	f007 f936 	bl	800a020 <osDelay>
                // long side
                MotorForward(3000, 10);
 8002db4:	210a      	movs	r1, #10
 8002db6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002dba:	f7ff f819 	bl	8001df0 <MotorForward>
                cmDistance += 12;
 8002dbe:	4b1c      	ldr	r3, [pc, #112]	; (8002e30 <StartDefaultTask+0x4a0>)
 8002dc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002dc4:	f04f 0200 	mov.w	r2, #0
 8002dc8:	4b1a      	ldr	r3, [pc, #104]	; (8002e34 <StartDefaultTask+0x4a4>)
 8002dca:	f7fd fa6f 	bl	80002ac <__adddf3>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	4917      	ldr	r1, [pc, #92]	; (8002e30 <StartDefaultTask+0x4a0>)
 8002dd4:	e9c1 2300 	strd	r2, r3, [r1]
                offsetdistx += ForwardCheckIR(3000, aRxBuffer[0]);
 8002dd8:	4b10      	ldr	r3, [pc, #64]	; (8002e1c <StartDefaultTask+0x48c>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	4619      	mov	r1, r3
 8002dde:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002de2:	f7ff fc4b 	bl	800267c <ForwardCheckIR>
 8002de6:	4603      	mov	r3, r0
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7fd fbab 	bl	8000544 <__aeabi_i2d>
 8002dee:	4b12      	ldr	r3, [pc, #72]	; (8002e38 <StartDefaultTask+0x4a8>)
 8002df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df4:	f7fd fa5a 	bl	80002ac <__adddf3>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	490e      	ldr	r1, [pc, #56]	; (8002e38 <StartDefaultTask+0x4a8>)
 8002dfe:	e9c1 2300 	strd	r2, r3, [r1]
                MotorForward(3000, 10);
 8002e02:	210a      	movs	r1, #10
 8002e04:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002e08:	f7fe fff2 	bl	8001df0 <MotorForward>
                MotorRight(3000, -87);
 8002e0c:	f06f 0156 	mvn.w	r1, #86	; 0x56
 8002e10:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002e14:	f7ff f9ec 	bl	80021f0 <MotorRight>
 8002e18:	e074      	b.n	8002f04 <StartDefaultTask+0x574>
 8002e1a:	bf00      	nop
 8002e1c:	2000009c 	.word	0x2000009c
 8002e20:	20000000 	.word	0x20000000
 8002e24:	200000b8 	.word	0x200000b8
 8002e28:	200000b6 	.word	0x200000b6
 8002e2c:	20000458 	.word	0x20000458
 8002e30:	20000448 	.word	0x20000448
 8002e34:	40280000 	.word	0x40280000
 8002e38:	20000450 	.word	0x20000450
            }
            else if (aRxBuffer[0] == 'R')
 8002e3c:	4bb6      	ldr	r3, [pc, #728]	; (8003118 <StartDefaultTask+0x788>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2b52      	cmp	r3, #82	; 0x52
 8002e42:	d15f      	bne.n	8002f04 <StartDefaultTask+0x574>
            {
                // Right
                MotorLeft(3000, 85);
 8002e44:	2155      	movs	r1, #85	; 0x55
 8002e46:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002e4a:	f7ff f92d 	bl	80020a8 <MotorLeft>
                osDelay(sleeping);
 8002e4e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002e52:	f007 f8e5 	bl	800a020 <osDelay>
                // short side
                offsetdisty+= ForwardCheckIR(3000, aRxBuffer[0]);
 8002e56:	4bb0      	ldr	r3, [pc, #704]	; (8003118 <StartDefaultTask+0x788>)
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002e60:	f7ff fc0c 	bl	800267c <ForwardCheckIR>
 8002e64:	4603      	mov	r3, r0
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fd fb6c 	bl	8000544 <__aeabi_i2d>
 8002e6c:	4bab      	ldr	r3, [pc, #684]	; (800311c <StartDefaultTask+0x78c>)
 8002e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e72:	f7fd fa1b 	bl	80002ac <__adddf3>
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	49a8      	ldr	r1, [pc, #672]	; (800311c <StartDefaultTask+0x78c>)
 8002e7c:	e9c1 2300 	strd	r2, r3, [r1]
                osDelay(100);
 8002e80:	2064      	movs	r0, #100	; 0x64
 8002e82:	f007 f8cd 	bl	800a020 <osDelay>
                MotorForward(3000, 10);
 8002e86:	210a      	movs	r1, #10
 8002e88:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002e8c:	f7fe ffb0 	bl	8001df0 <MotorForward>
                MotorLeft(3000, 85);
 8002e90:	2155      	movs	r1, #85	; 0x55
 8002e92:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002e96:	f7ff f907 	bl	80020a8 <MotorLeft>
                osDelay(sleeping);
 8002e9a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002e9e:	f007 f8bf 	bl	800a020 <osDelay>
                // long side
                MotorForward(3000, 10);
 8002ea2:	210a      	movs	r1, #10
 8002ea4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002ea8:	f7fe ffa2 	bl	8001df0 <MotorForward>
                cmDistance += 12;
 8002eac:	4b9c      	ldr	r3, [pc, #624]	; (8003120 <StartDefaultTask+0x790>)
 8002eae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002eb2:	f04f 0200 	mov.w	r2, #0
 8002eb6:	4b9b      	ldr	r3, [pc, #620]	; (8003124 <StartDefaultTask+0x794>)
 8002eb8:	f7fd f9f8 	bl	80002ac <__adddf3>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	4997      	ldr	r1, [pc, #604]	; (8003120 <StartDefaultTask+0x790>)
 8002ec2:	e9c1 2300 	strd	r2, r3, [r1]
                offsetdistx += ForwardCheckIR(3000, aRxBuffer[0]);
 8002ec6:	4b94      	ldr	r3, [pc, #592]	; (8003118 <StartDefaultTask+0x788>)
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	4619      	mov	r1, r3
 8002ecc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002ed0:	f7ff fbd4 	bl	800267c <ForwardCheckIR>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fd fb34 	bl	8000544 <__aeabi_i2d>
 8002edc:	4b92      	ldr	r3, [pc, #584]	; (8003128 <StartDefaultTask+0x798>)
 8002ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee2:	f7fd f9e3 	bl	80002ac <__adddf3>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	460b      	mov	r3, r1
 8002eea:	498f      	ldr	r1, [pc, #572]	; (8003128 <StartDefaultTask+0x798>)
 8002eec:	e9c1 2300 	strd	r2, r3, [r1]
                MotorForward(3000, 10);
 8002ef0:	210a      	movs	r1, #10
 8002ef2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002ef6:	f7fe ff7b 	bl	8001df0 <MotorForward>
                MotorLeft(3000, 85);
 8002efa:	2155      	movs	r1, #85	; 0x55
 8002efc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002f00:	f7ff f8d2 	bl	80020a8 <MotorLeft>
            }

            // go back to parking
            // move forward
            //osDelay(500);
            gooo = (float)(offsetdisty) / 1552.0 * 22; // get 1552 from cnt1B for one
 8002f04:	4b85      	ldr	r3, [pc, #532]	; (800311c <StartDefaultTask+0x78c>)
 8002f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0a:	4610      	mov	r0, r2
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	f7fd fe7b 	bl	8000c08 <__aeabi_d2f>
 8002f12:	4603      	mov	r3, r0
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7fd fb27 	bl	8000568 <__aeabi_f2d>
 8002f1a:	f04f 0200 	mov.w	r2, #0
 8002f1e:	4b83      	ldr	r3, [pc, #524]	; (800312c <StartDefaultTask+0x79c>)
 8002f20:	f7fd fca4 	bl	800086c <__aeabi_ddiv>
 8002f24:	4602      	mov	r2, r0
 8002f26:	460b      	mov	r3, r1
 8002f28:	4610      	mov	r0, r2
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	f04f 0200 	mov.w	r2, #0
 8002f30:	4b7f      	ldr	r3, [pc, #508]	; (8003130 <StartDefaultTask+0x7a0>)
 8002f32:	f7fd fb71 	bl	8000618 <__aeabi_dmul>
 8002f36:	4602      	mov	r2, r0
 8002f38:	460b      	mov	r3, r1
 8002f3a:	4610      	mov	r0, r2
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	f7fd fe1b 	bl	8000b78 <__aeabi_d2iz>
 8002f42:	4603      	mov	r3, r0
 8002f44:	4a7b      	ldr	r2, [pc, #492]	; (8003134 <StartDefaultTask+0x7a4>)
 8002f46:	6013      	str	r3, [r2, #0]
            //If reversed, we have to add the turn success distance
            double OFFSET = 40;
 8002f48:	f04f 0200 	mov.w	r2, #0
 8002f4c:	4b7a      	ldr	r3, [pc, #488]	; (8003138 <StartDefaultTask+0x7a8>)
 8002f4e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
            gooo += turnDistance + cmDistance;
 8002f52:	4b78      	ldr	r3, [pc, #480]	; (8003134 <StartDefaultTask+0x7a4>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7fd faf4 	bl	8000544 <__aeabi_i2d>
 8002f5c:	4604      	mov	r4, r0
 8002f5e:	460d      	mov	r5, r1
 8002f60:	4b76      	ldr	r3, [pc, #472]	; (800313c <StartDefaultTask+0x7ac>)
 8002f62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f66:	4b6e      	ldr	r3, [pc, #440]	; (8003120 <StartDefaultTask+0x790>)
 8002f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f6c:	f7fd f99e 	bl	80002ac <__adddf3>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4620      	mov	r0, r4
 8002f76:	4629      	mov	r1, r5
 8002f78:	f7fd f998 	bl	80002ac <__adddf3>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	460b      	mov	r3, r1
 8002f80:	4610      	mov	r0, r2
 8002f82:	4619      	mov	r1, r3
 8002f84:	f7fd fdf8 	bl	8000b78 <__aeabi_d2iz>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	4a6a      	ldr	r2, [pc, #424]	; (8003134 <StartDefaultTask+0x7a4>)
 8002f8c:	6013      	str	r3, [r2, #0]

            int fwdMovement = ceil((double)gooo * 1.22);
 8002f8e:	4b69      	ldr	r3, [pc, #420]	; (8003134 <StartDefaultTask+0x7a4>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7fd fad6 	bl	8000544 <__aeabi_i2d>
 8002f98:	a35d      	add	r3, pc, #372	; (adr r3, 8003110 <StartDefaultTask+0x780>)
 8002f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f9e:	f7fd fb3b 	bl	8000618 <__aeabi_dmul>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	ec43 2b17 	vmov	d7, r2, r3
 8002faa:	eeb0 0a47 	vmov.f32	s0, s14
 8002fae:	eef0 0a67 	vmov.f32	s1, s15
 8002fb2:	f00a f9e1 	bl	800d378 <ceil>
 8002fb6:	ec53 2b10 	vmov	r2, r3, d0
 8002fba:	4610      	mov	r0, r2
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	f7fd fddb 	bl	8000b78 <__aeabi_d2iz>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	637b      	str	r3, [r7, #52]	; 0x34
            osDelay(sleeping);
 8002fc6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002fca:	f007 f829 	bl	800a020 <osDelay>
            MotorForward(3000, fwdMovement + OFFSET);
 8002fce:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002fd0:	f7fd fab8 	bl	8000544 <__aeabi_i2d>
 8002fd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002fd8:	f7fd f968 	bl	80002ac <__adddf3>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	460b      	mov	r3, r1
 8002fe0:	4610      	mov	r0, r2
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	f7fd fdc8 	bl	8000b78 <__aeabi_d2iz>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	4619      	mov	r1, r3
 8002fec:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002ff0:	f7fe fefe 	bl	8001df0 <MotorForward>

            // turn in
            if (aRxBuffer[0] == 'L')
 8002ff4:	4b48      	ldr	r3, [pc, #288]	; (8003118 <StartDefaultTask+0x788>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2b4c      	cmp	r3, #76	; 0x4c
 8002ffa:	d106      	bne.n	800300a <StartDefaultTask+0x67a>
            {
                // Left
                MotorRight(3000, -90);
 8002ffc:	f06f 0159 	mvn.w	r1, #89	; 0x59
 8003000:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003004:	f7ff f8f4 	bl	80021f0 <MotorRight>
 8003008:	e008      	b.n	800301c <StartDefaultTask+0x68c>
            }
            else if (aRxBuffer[0] == 'R')
 800300a:	4b43      	ldr	r3, [pc, #268]	; (8003118 <StartDefaultTask+0x788>)
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	2b52      	cmp	r3, #82	; 0x52
 8003010:	d104      	bne.n	800301c <StartDefaultTask+0x68c>
            {
                // Right
                MotorLeft(3000, 89);
 8003012:	2159      	movs	r1, #89	; 0x59
 8003014:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003018:	f7ff f846 	bl	80020a8 <MotorLeft>
            }
            gooo = (float)(offsetdistx) / 1552.0 * 22;
 800301c:	4b42      	ldr	r3, [pc, #264]	; (8003128 <StartDefaultTask+0x798>)
 800301e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003022:	4610      	mov	r0, r2
 8003024:	4619      	mov	r1, r3
 8003026:	f7fd fdef 	bl	8000c08 <__aeabi_d2f>
 800302a:	4603      	mov	r3, r0
 800302c:	4618      	mov	r0, r3
 800302e:	f7fd fa9b 	bl	8000568 <__aeabi_f2d>
 8003032:	f04f 0200 	mov.w	r2, #0
 8003036:	4b3d      	ldr	r3, [pc, #244]	; (800312c <StartDefaultTask+0x79c>)
 8003038:	f7fd fc18 	bl	800086c <__aeabi_ddiv>
 800303c:	4602      	mov	r2, r0
 800303e:	460b      	mov	r3, r1
 8003040:	4610      	mov	r0, r2
 8003042:	4619      	mov	r1, r3
 8003044:	f04f 0200 	mov.w	r2, #0
 8003048:	4b39      	ldr	r3, [pc, #228]	; (8003130 <StartDefaultTask+0x7a0>)
 800304a:	f7fd fae5 	bl	8000618 <__aeabi_dmul>
 800304e:	4602      	mov	r2, r0
 8003050:	460b      	mov	r3, r1
 8003052:	4610      	mov	r0, r2
 8003054:	4619      	mov	r1, r3
 8003056:	f7fd fd8f 	bl	8000b78 <__aeabi_d2iz>
 800305a:	4603      	mov	r3, r0
 800305c:	4a35      	ldr	r2, [pc, #212]	; (8003134 <StartDefaultTask+0x7a4>)
 800305e:	6013      	str	r3, [r2, #0]
            gooo /= 2;
 8003060:	4b34      	ldr	r3, [pc, #208]	; (8003134 <StartDefaultTask+0x7a4>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	0fda      	lsrs	r2, r3, #31
 8003066:	4413      	add	r3, r2
 8003068:	105b      	asrs	r3, r3, #1
 800306a:	461a      	mov	r2, r3
 800306c:	4b31      	ldr	r3, [pc, #196]	; (8003134 <StartDefaultTask+0x7a4>)
 800306e:	601a      	str	r2, [r3, #0]

            double constantOffset = 15;//as length of obstacle increases, this need to decrease....
 8003070:	f04f 0200 	mov.w	r2, #0
 8003074:	4b32      	ldr	r3, [pc, #200]	; (8003140 <StartDefaultTask+0x7b0>)
 8003076:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

            if (gooo >= 45){
 800307a:	4b2e      	ldr	r3, [pc, #184]	; (8003134 <StartDefaultTask+0x7a4>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2b2c      	cmp	r3, #44	; 0x2c
 8003080:	dd05      	ble.n	800308e <StartDefaultTask+0x6fe>
            	constantOffset=0;
 8003082:	f04f 0200 	mov.w	r2, #0
 8003086:	f04f 0300 	mov.w	r3, #0
 800308a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
            }
            //If gooo is higher than 0 and past some offset
            if (gooo > 0 && gooo - constantOffset > 0){
 800308e:	4b29      	ldr	r3, [pc, #164]	; (8003134 <StartDefaultTask+0x7a4>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	dd2b      	ble.n	80030ee <StartDefaultTask+0x75e>
 8003096:	4b27      	ldr	r3, [pc, #156]	; (8003134 <StartDefaultTask+0x7a4>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4618      	mov	r0, r3
 800309c:	f7fd fa52 	bl	8000544 <__aeabi_i2d>
 80030a0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80030a4:	f7fd f900 	bl	80002a8 <__aeabi_dsub>
 80030a8:	4602      	mov	r2, r0
 80030aa:	460b      	mov	r3, r1
 80030ac:	4610      	mov	r0, r2
 80030ae:	4619      	mov	r1, r3
 80030b0:	f04f 0200 	mov.w	r2, #0
 80030b4:	f04f 0300 	mov.w	r3, #0
 80030b8:	f7fd fd3e 	bl	8000b38 <__aeabi_dcmpgt>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d015      	beq.n	80030ee <StartDefaultTask+0x75e>
            	MotorForward(3000, gooo - constantOffset);
 80030c2:	4b1c      	ldr	r3, [pc, #112]	; (8003134 <StartDefaultTask+0x7a4>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7fd fa3c 	bl	8000544 <__aeabi_i2d>
 80030cc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80030d0:	f7fd f8ea 	bl	80002a8 <__aeabi_dsub>
 80030d4:	4602      	mov	r2, r0
 80030d6:	460b      	mov	r3, r1
 80030d8:	4610      	mov	r0, r2
 80030da:	4619      	mov	r1, r3
 80030dc:	f7fd fd4c 	bl	8000b78 <__aeabi_d2iz>
 80030e0:	4603      	mov	r3, r0
 80030e2:	4619      	mov	r1, r3
 80030e4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80030e8:	f7fe fe82 	bl	8001df0 <MotorForward>
 80030ec:	e004      	b.n	80030f8 <StartDefaultTask+0x768>

            }
            else
            {
                MotorBack(3000, 10);
 80030ee:	210a      	movs	r1, #10
 80030f0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80030f4:	f7fe ff3a 	bl	8001f6c <MotorBack>
            }

            if (aRxBuffer[0] == 'L')
 80030f8:	4b07      	ldr	r3, [pc, #28]	; (8003118 <StartDefaultTask+0x788>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	2b4c      	cmp	r3, #76	; 0x4c
 80030fe:	d121      	bne.n	8003144 <StartDefaultTask+0x7b4>
            {
                // Left
                MotorLeft(3000, 90);
 8003100:	215a      	movs	r1, #90	; 0x5a
 8003102:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003106:	f7fe ffcf 	bl	80020a8 <MotorLeft>
 800310a:	e025      	b.n	8003158 <StartDefaultTask+0x7c8>
 800310c:	f3af 8000 	nop.w
 8003110:	b851eb85 	.word	0xb851eb85
 8003114:	3ff3851e 	.word	0x3ff3851e
 8003118:	2000009c 	.word	0x2000009c
 800311c:	20000458 	.word	0x20000458
 8003120:	20000448 	.word	0x20000448
 8003124:	40280000 	.word	0x40280000
 8003128:	20000450 	.word	0x20000450
 800312c:	40984000 	.word	0x40984000
 8003130:	40360000 	.word	0x40360000
 8003134:	20000438 	.word	0x20000438
 8003138:	40440000 	.word	0x40440000
 800313c:	20000440 	.word	0x20000440
 8003140:	402e0000 	.word	0x402e0000
            }
            else if (aRxBuffer[0] == 'R')
 8003144:	4b0e      	ldr	r3, [pc, #56]	; (8003180 <StartDefaultTask+0x7f0>)
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	2b52      	cmp	r3, #82	; 0x52
 800314a:	d105      	bne.n	8003158 <StartDefaultTask+0x7c8>
            {
                // Right
                MotorRight(3000, -90);
 800314c:	f06f 0159 	mvn.w	r1, #89	; 0x59
 8003150:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003154:	f7ff f84c 	bl	80021f0 <MotorRight>
            }

            // park
            osDelay(sleeping);
 8003158:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800315c:	f006 ff60 	bl	800a020 <osDelay>
            T2MotorForward(1200);
 8003160:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8003164:	f7ff f9b4 	bl	80024d0 <T2MotorForward>
            HAL_UART_Transmit(&huart3, "WOOF\n\r", 6, 0xFFFF);//signal RPI end of Task 2
 8003168:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800316c:	2206      	movs	r2, #6
 800316e:	4905      	ldr	r1, [pc, #20]	; (8003184 <StartDefaultTask+0x7f4>)
 8003170:	4805      	ldr	r0, [pc, #20]	; (8003188 <StartDefaultTask+0x7f8>)
 8003172:	f005 fe1a 	bl	8008daa <HAL_UART_Transmit>
            Task2 = 0;
 8003176:	4b05      	ldr	r3, [pc, #20]	; (800318c <StartDefaultTask+0x7fc>)
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]
        if (Task2 == 0)
 800317c:	e434      	b.n	80029e8 <StartDefaultTask+0x58>
 800317e:	bf00      	nop
 8003180:	2000009c 	.word	0x2000009c
 8003184:	0800e298 	.word	0x0800e298
 8003188:	200003d4 	.word	0x200003d4
 800318c:	200000ac 	.word	0x200000ac

08003190 <EncoderCheck>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_EncoderCheck */
void EncoderCheck(void *argument)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b084      	sub	sp, #16
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EncoderCheck */
    /* Infinite loop */
    start_encoder();
 8003198:	f7fe fda0 	bl	8001cdc <start_encoder>

    // Initialize local variables for encoder
    uint32_t time_elasped = 0; // in terms of ticks, where 1000 ticks = 1 s
 800319c:	2300      	movs	r3, #0
 800319e:	60fb      	str	r3, [r7, #12]
    uint32_t tick;

    cnt1A = __HAL_TIM_GET_COUNTER(&htim2);
 80031a0:	4b59      	ldr	r3, [pc, #356]	; (8003308 <EncoderCheck+0x178>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a6:	461a      	mov	r2, r3
 80031a8:	4b58      	ldr	r3, [pc, #352]	; (800330c <EncoderCheck+0x17c>)
 80031aa:	601a      	str	r2, [r3, #0]
    cnt1B = __HAL_TIM_GET_COUNTER(&htim3);
 80031ac:	4b58      	ldr	r3, [pc, #352]	; (8003310 <EncoderCheck+0x180>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b2:	461a      	mov	r2, r3
 80031b4:	4b57      	ldr	r3, [pc, #348]	; (8003314 <EncoderCheck+0x184>)
 80031b6:	601a      	str	r2, [r3, #0]
    tick = HAL_GetTick();
 80031b8:	f001 fd44 	bl	8004c44 <HAL_GetTick>
 80031bc:	60b8      	str	r0, [r7, #8]

    // Gets the encoder count for both motors per second
    for (;;)
    {
        // counts the number of encoder pulses per second
        if (HAL_GetTick() - tick > 100L)
 80031be:	f001 fd41 	bl	8004c44 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b64      	cmp	r3, #100	; 0x64
 80031ca:	d9f8      	bls.n	80031be <EncoderCheck+0x2e>
        {
            time_per_loop = 100;
 80031cc:	4b52      	ldr	r3, [pc, #328]	; (8003318 <EncoderCheck+0x188>)
 80031ce:	4a53      	ldr	r2, [pc, #332]	; (800331c <EncoderCheck+0x18c>)
 80031d0:	601a      	str	r2, [r3, #0]

            cnt2A = __HAL_TIM_GET_COUNTER(&htim2);
 80031d2:	4b4d      	ldr	r3, [pc, #308]	; (8003308 <EncoderCheck+0x178>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	461a      	mov	r2, r3
 80031da:	4b51      	ldr	r3, [pc, #324]	; (8003320 <EncoderCheck+0x190>)
 80031dc:	601a      	str	r2, [r3, #0]
            cnt2B = __HAL_TIM_GET_COUNTER(&htim3);
 80031de:	4b4c      	ldr	r3, [pc, #304]	; (8003310 <EncoderCheck+0x180>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e4:	461a      	mov	r2, r3
 80031e6:	4b4f      	ldr	r3, [pc, #316]	; (8003324 <EncoderCheck+0x194>)
 80031e8:	601a      	str	r2, [r3, #0]

            // motor A encoder count
            if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2))
 80031ea:	4b47      	ldr	r3, [pc, #284]	; (8003308 <EncoderCheck+0x178>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0310 	and.w	r3, r3, #16
 80031f4:	2b10      	cmp	r3, #16
 80031f6:	d118      	bne.n	800322a <EncoderCheck+0x9a>
            {
                if (cnt2A < cnt1A)
 80031f8:	4b49      	ldr	r3, [pc, #292]	; (8003320 <EncoderCheck+0x190>)
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	4b43      	ldr	r3, [pc, #268]	; (800330c <EncoderCheck+0x17c>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	429a      	cmp	r2, r3
 8003202:	da07      	bge.n	8003214 <EncoderCheck+0x84>
                {
                    motorA_encoder_value_persecond = cnt1A - cnt2A;
 8003204:	4b41      	ldr	r3, [pc, #260]	; (800330c <EncoderCheck+0x17c>)
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	4b45      	ldr	r3, [pc, #276]	; (8003320 <EncoderCheck+0x190>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	4a46      	ldr	r2, [pc, #280]	; (8003328 <EncoderCheck+0x198>)
 8003210:	6013      	str	r3, [r2, #0]
 8003212:	e022      	b.n	800325a <EncoderCheck+0xca>
                }
                else
                {
                    motorA_encoder_value_persecond = (65535 - cnt2A) + cnt1A;
 8003214:	4b42      	ldr	r3, [pc, #264]	; (8003320 <EncoderCheck+0x190>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800321c:	33ff      	adds	r3, #255	; 0xff
 800321e:	4a3b      	ldr	r2, [pc, #236]	; (800330c <EncoderCheck+0x17c>)
 8003220:	6812      	ldr	r2, [r2, #0]
 8003222:	4413      	add	r3, r2
 8003224:	4a40      	ldr	r2, [pc, #256]	; (8003328 <EncoderCheck+0x198>)
 8003226:	6013      	str	r3, [r2, #0]
 8003228:	e017      	b.n	800325a <EncoderCheck+0xca>
                }
            }
            else
            {
                if (cnt2A > cnt1A)
 800322a:	4b3d      	ldr	r3, [pc, #244]	; (8003320 <EncoderCheck+0x190>)
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	4b37      	ldr	r3, [pc, #220]	; (800330c <EncoderCheck+0x17c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	429a      	cmp	r2, r3
 8003234:	dd07      	ble.n	8003246 <EncoderCheck+0xb6>
                {
                    motorA_encoder_value_persecond = cnt2A - cnt1A;
 8003236:	4b3a      	ldr	r3, [pc, #232]	; (8003320 <EncoderCheck+0x190>)
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	4b34      	ldr	r3, [pc, #208]	; (800330c <EncoderCheck+0x17c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	4a39      	ldr	r2, [pc, #228]	; (8003328 <EncoderCheck+0x198>)
 8003242:	6013      	str	r3, [r2, #0]
 8003244:	e009      	b.n	800325a <EncoderCheck+0xca>
                }
                else
                {
                    motorA_encoder_value_persecond = (65535 - cnt1A) + cnt2A;
 8003246:	4b31      	ldr	r3, [pc, #196]	; (800330c <EncoderCheck+0x17c>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800324e:	33ff      	adds	r3, #255	; 0xff
 8003250:	4a33      	ldr	r2, [pc, #204]	; (8003320 <EncoderCheck+0x190>)
 8003252:	6812      	ldr	r2, [r2, #0]
 8003254:	4413      	add	r3, r2
 8003256:	4a34      	ldr	r2, [pc, #208]	; (8003328 <EncoderCheck+0x198>)
 8003258:	6013      	str	r3, [r2, #0]
                }
            }

            // motor B encoder count
            if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3))
 800325a:	4b2d      	ldr	r3, [pc, #180]	; (8003310 <EncoderCheck+0x180>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0310 	and.w	r3, r3, #16
 8003264:	2b10      	cmp	r3, #16
 8003266:	d118      	bne.n	800329a <EncoderCheck+0x10a>
            {
                if (cnt2B < cnt1B)
 8003268:	4b2e      	ldr	r3, [pc, #184]	; (8003324 <EncoderCheck+0x194>)
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	4b29      	ldr	r3, [pc, #164]	; (8003314 <EncoderCheck+0x184>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	429a      	cmp	r2, r3
 8003272:	da07      	bge.n	8003284 <EncoderCheck+0xf4>
                {
                    motorB_encoder_value_persecond = cnt1B - cnt2B;
 8003274:	4b27      	ldr	r3, [pc, #156]	; (8003314 <EncoderCheck+0x184>)
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	4b2a      	ldr	r3, [pc, #168]	; (8003324 <EncoderCheck+0x194>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	4a2b      	ldr	r2, [pc, #172]	; (800332c <EncoderCheck+0x19c>)
 8003280:	6013      	str	r3, [r2, #0]
 8003282:	e022      	b.n	80032ca <EncoderCheck+0x13a>
                }
                else
                {
                    motorB_encoder_value_persecond = (65535 - cnt2B) + cnt1B;
 8003284:	4b27      	ldr	r3, [pc, #156]	; (8003324 <EncoderCheck+0x194>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800328c:	33ff      	adds	r3, #255	; 0xff
 800328e:	4a21      	ldr	r2, [pc, #132]	; (8003314 <EncoderCheck+0x184>)
 8003290:	6812      	ldr	r2, [r2, #0]
 8003292:	4413      	add	r3, r2
 8003294:	4a25      	ldr	r2, [pc, #148]	; (800332c <EncoderCheck+0x19c>)
 8003296:	6013      	str	r3, [r2, #0]
 8003298:	e017      	b.n	80032ca <EncoderCheck+0x13a>
                }
            }
            else
            {
                if (cnt2B > cnt1B)
 800329a:	4b22      	ldr	r3, [pc, #136]	; (8003324 <EncoderCheck+0x194>)
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	4b1d      	ldr	r3, [pc, #116]	; (8003314 <EncoderCheck+0x184>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	dd07      	ble.n	80032b6 <EncoderCheck+0x126>
                {
                    motorB_encoder_value_persecond = cnt2B - cnt1B;
 80032a6:	4b1f      	ldr	r3, [pc, #124]	; (8003324 <EncoderCheck+0x194>)
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	4b1a      	ldr	r3, [pc, #104]	; (8003314 <EncoderCheck+0x184>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	4a1e      	ldr	r2, [pc, #120]	; (800332c <EncoderCheck+0x19c>)
 80032b2:	6013      	str	r3, [r2, #0]
 80032b4:	e009      	b.n	80032ca <EncoderCheck+0x13a>
                }
                else
                {
                    motorB_encoder_value_persecond = (65535 - cnt1B) + cnt2B;
 80032b6:	4b17      	ldr	r3, [pc, #92]	; (8003314 <EncoderCheck+0x184>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80032be:	33ff      	adds	r3, #255	; 0xff
 80032c0:	4a18      	ldr	r2, [pc, #96]	; (8003324 <EncoderCheck+0x194>)
 80032c2:	6812      	ldr	r2, [r2, #0]
 80032c4:	4413      	add	r3, r2
 80032c6:	4a19      	ldr	r2, [pc, #100]	; (800332c <EncoderCheck+0x19c>)
 80032c8:	6013      	str	r3, [r2, #0]
                }
            }

            time_elasped = time_elasped + time_per_loop;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	ee07 3a90 	vmov	s15, r3
 80032d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032d4:	4b10      	ldr	r3, [pc, #64]	; (8003318 <EncoderCheck+0x188>)
 80032d6:	edd3 7a00 	vldr	s15, [r3]
 80032da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032e2:	ee17 3a90 	vmov	r3, s15
 80032e6:	60fb      	str	r3, [r7, #12]
            // Move set distance(1) or constantly move straight(0).
            // By default, target_distance is set to 0;
            // target_distance = 100; //Manually input or get from Rpi
            // move_distance(1, target_distance);

            cnt1A = __HAL_TIM_GET_COUNTER(&htim2);
 80032e8:	4b07      	ldr	r3, [pc, #28]	; (8003308 <EncoderCheck+0x178>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ee:	461a      	mov	r2, r3
 80032f0:	4b06      	ldr	r3, [pc, #24]	; (800330c <EncoderCheck+0x17c>)
 80032f2:	601a      	str	r2, [r3, #0]
            cnt1B = __HAL_TIM_GET_COUNTER(&htim3);
 80032f4:	4b06      	ldr	r3, [pc, #24]	; (8003310 <EncoderCheck+0x180>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	461a      	mov	r2, r3
 80032fc:	4b05      	ldr	r3, [pc, #20]	; (8003314 <EncoderCheck+0x184>)
 80032fe:	601a      	str	r2, [r3, #0]
            tick = HAL_GetTick();
 8003300:	f001 fca0 	bl	8004c44 <HAL_GetTick>
 8003304:	60b8      	str	r0, [r7, #8]
        if (HAL_GetTick() - tick > 100L)
 8003306:	e75a      	b.n	80031be <EncoderCheck+0x2e>
 8003308:	200002b4 	.word	0x200002b4
 800330c:	200000ec 	.word	0x200000ec
 8003310:	200002fc 	.word	0x200002fc
 8003314:	200000f4 	.word	0x200000f4
 8003318:	200000e8 	.word	0x200000e8
 800331c:	42c80000 	.word	0x42c80000
 8003320:	200000f0 	.word	0x200000f0
 8003324:	200000f8 	.word	0x200000f8
 8003328:	200000fc 	.word	0x200000fc
 800332c:	20000100 	.word	0x20000100

08003330 <GyroReadTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GyroReadTask */
void GyroReadTask(void *argument)
{
 8003330:	b5b0      	push	{r4, r5, r7, lr}
 8003332:	b08c      	sub	sp, #48	; 0x30
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GyroReadTask */
    /* Infinite loop */
    gyroInit();
 8003338:	f7fe fb86 	bl	8001a48 <gyroInit>
    uint8_t val[2] = {0, 0};
 800333c:	2300      	movs	r3, #0
 800333e:	81bb      	strh	r3, [r7, #12]
    double tick_angle = 0;
 8003340:	f04f 0200 	mov.w	r2, #0
 8003344:	f04f 0300 	mov.w	r3, #0
 8003348:	e9c7 2304 	strd	r2, r3, [r7, #16]
    uint32_t tick = 0;
 800334c:	2300      	movs	r3, #0
 800334e:	62fb      	str	r3, [r7, #44]	; 0x2c
    double offset = 0;
 8003350:	f04f 0200 	mov.w	r2, #0
 8003354:	f04f 0300 	mov.w	r3, #0
 8003358:	e9c7 2308 	strd	r2, r3, [r7, #32]
    int i = 0;
 800335c:	2300      	movs	r3, #0
 800335e:	61fb      	str	r3, [r7, #28]

    //	uint8_t OLEDStringint[20]="";
    //	int heartbeat=0;

    while (i < 100)
 8003360:	e02c      	b.n	80033bc <GyroReadTask+0x8c>
    {
        osDelay(50);
 8003362:	2032      	movs	r0, #50	; 0x32
 8003364:	f006 fe5c 	bl	800a020 <osDelay>
        readByte(0x37, val);
 8003368:	f107 030c 	add.w	r3, r7, #12
 800336c:	4619      	mov	r1, r3
 800336e:	2037      	movs	r0, #55	; 0x37
 8003370:	f7fe fb20 	bl	80019b4 <readByte>
        angular_speed = (val[0] << 8) | val[1]; // combine val[0]+val[1] into angular speed //calculate current angle speed
 8003374:	7b3b      	ldrb	r3, [r7, #12]
 8003376:	021b      	lsls	r3, r3, #8
 8003378:	b21a      	sxth	r2, r3
 800337a:	7b7b      	ldrb	r3, [r7, #13]
 800337c:	b21b      	sxth	r3, r3
 800337e:	4313      	orrs	r3, r2
 8003380:	b21a      	sxth	r2, r3
 8003382:	4b7d      	ldr	r3, [pc, #500]	; (8003578 <GyroReadTask+0x248>)
 8003384:	801a      	strh	r2, [r3, #0]
        //				trash += (double)((double)angular_speed) * ((HAL_GetTick() - tick) / 16400.0);
        offset += angular_speed; // accumulating angular speed
 8003386:	4b7c      	ldr	r3, [pc, #496]	; (8003578 <GyroReadTask+0x248>)
 8003388:	f9b3 3000 	ldrsh.w	r3, [r3]
 800338c:	4618      	mov	r0, r3
 800338e:	f7fd f8d9 	bl	8000544 <__aeabi_i2d>
 8003392:	4602      	mov	r2, r0
 8003394:	460b      	mov	r3, r1
 8003396:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800339a:	f7fc ff87 	bl	80002ac <__adddf3>
 800339e:	4602      	mov	r2, r0
 80033a0:	460b      	mov	r3, r1
 80033a2:	e9c7 2308 	strd	r2, r3, [r7, #32]
        tick = HAL_GetTick();
 80033a6:	f001 fc4d 	bl	8004c44 <HAL_GetTick>
 80033aa:	62f8      	str	r0, [r7, #44]	; 0x2c
        HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); // toggle LED pin
 80033ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80033b0:	4872      	ldr	r0, [pc, #456]	; (800357c <GyroReadTask+0x24c>)
 80033b2:	f002 fb9c 	bl	8005aee <HAL_GPIO_TogglePin>
        i++;
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	3301      	adds	r3, #1
 80033ba:	61fb      	str	r3, [r7, #28]
    while (i < 100)
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	2b63      	cmp	r3, #99	; 0x63
 80033c0:	ddcf      	ble.n	8003362 <GyroReadTask+0x32>
    }
    offset = offset / i;
 80033c2:	69f8      	ldr	r0, [r7, #28]
 80033c4:	f7fd f8be 	bl	8000544 <__aeabi_i2d>
 80033c8:	4602      	mov	r2, r0
 80033ca:	460b      	mov	r3, r1
 80033cc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80033d0:	f7fd fa4c 	bl	800086c <__aeabi_ddiv>
 80033d4:	4602      	mov	r2, r0
 80033d6:	460b      	mov	r3, r1
 80033d8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    tick = HAL_GetTick();
 80033dc:	f001 fc32 	bl	8004c44 <HAL_GetTick>
 80033e0:	62f8      	str	r0, [r7, #44]	; 0x2c
    osDelay(10);
 80033e2:	200a      	movs	r0, #10
 80033e4:	f006 fe1c 	bl	800a020 <osDelay>
    /* Infinite loop */
    for (;;)
    {
        //	if(HAL_GetTick()-miliOld < 1000L) continue;

        if (HAL_GetTick() - tick >= 50) // poll every 50ms
 80033e8:	f001 fc2c 	bl	8004c44 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b31      	cmp	r3, #49	; 0x31
 80033f4:	d9f8      	bls.n	80033e8 <GyroReadTask+0xb8>
        {
            readByte(0x37, val);
 80033f6:	f107 030c 	add.w	r3, r7, #12
 80033fa:	4619      	mov	r1, r3
 80033fc:	2037      	movs	r0, #55	; 0x37
 80033fe:	f7fe fad9 	bl	80019b4 <readByte>
            angular_speed = (val[0] << 8) | val[1];                                                     // combine val[0]+val[1] into angular speed //calculate current angle speed
 8003402:	7b3b      	ldrb	r3, [r7, #12]
 8003404:	021b      	lsls	r3, r3, #8
 8003406:	b21a      	sxth	r2, r3
 8003408:	7b7b      	ldrb	r3, [r7, #13]
 800340a:	b21b      	sxth	r3, r3
 800340c:	4313      	orrs	r3, r2
 800340e:	b21a      	sxth	r2, r3
 8003410:	4b59      	ldr	r3, [pc, #356]	; (8003578 <GyroReadTask+0x248>)
 8003412:	801a      	strh	r2, [r3, #0]
            tick_angle = (double)((double)angular_speed - offset) * ((HAL_GetTick() - tick) / 16400.0); // convert angular speed to current angle by deducting offset
 8003414:	4b58      	ldr	r3, [pc, #352]	; (8003578 <GyroReadTask+0x248>)
 8003416:	f9b3 3000 	ldrsh.w	r3, [r3]
 800341a:	4618      	mov	r0, r3
 800341c:	f7fd f892 	bl	8000544 <__aeabi_i2d>
 8003420:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003424:	f7fc ff40 	bl	80002a8 <__aeabi_dsub>
 8003428:	4602      	mov	r2, r0
 800342a:	460b      	mov	r3, r1
 800342c:	4614      	mov	r4, r2
 800342e:	461d      	mov	r5, r3
 8003430:	f001 fc08 	bl	8004c44 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	4618      	mov	r0, r3
 800343c:	f7fd f872 	bl	8000524 <__aeabi_ui2d>
 8003440:	a345      	add	r3, pc, #276	; (adr r3, 8003558 <GyroReadTask+0x228>)
 8003442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003446:	f7fd fa11 	bl	800086c <__aeabi_ddiv>
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	4620      	mov	r0, r4
 8003450:	4629      	mov	r1, r5
 8003452:	f7fd f8e1 	bl	8000618 <__aeabi_dmul>
 8003456:	4602      	mov	r2, r0
 8003458:	460b      	mov	r3, r1
 800345a:	e9c7 2304 	strd	r2, r3, [r7, #16]

            if ((tick_angle < -0.1) || (tick_angle > 0.1)) // smoothing factor
 800345e:	a340      	add	r3, pc, #256	; (adr r3, 8003560 <GyroReadTask+0x230>)
 8003460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003464:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003468:	f7fd fb48 	bl	8000afc <__aeabi_dcmplt>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d109      	bne.n	8003486 <GyroReadTask+0x156>
 8003472:	a33d      	add	r3, pc, #244	; (adr r3, 8003568 <GyroReadTask+0x238>)
 8003474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003478:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800347c:	f7fd fb5c 	bl	8000b38 <__aeabi_dcmpgt>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d035      	beq.n	80034f2 <GyroReadTask+0x1c2>
            {
                if (tick_angle > 0)
 8003486:	f04f 0200 	mov.w	r2, #0
 800348a:	f04f 0300 	mov.w	r3, #0
 800348e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003492:	f7fd fb51 	bl	8000b38 <__aeabi_dcmpgt>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d015      	beq.n	80034c8 <GyroReadTask+0x198>
                {
                    total_angle += tick_angle * 1.01; // make it slower
 800349c:	a334      	add	r3, pc, #208	; (adr r3, 8003570 <GyroReadTask+0x240>)
 800349e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80034a6:	f7fd f8b7 	bl	8000618 <__aeabi_dmul>
 80034aa:	4602      	mov	r2, r0
 80034ac:	460b      	mov	r3, r1
 80034ae:	4610      	mov	r0, r2
 80034b0:	4619      	mov	r1, r3
 80034b2:	4b33      	ldr	r3, [pc, #204]	; (8003580 <GyroReadTask+0x250>)
 80034b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b8:	f7fc fef8 	bl	80002ac <__adddf3>
 80034bc:	4602      	mov	r2, r0
 80034be:	460b      	mov	r3, r1
 80034c0:	492f      	ldr	r1, [pc, #188]	; (8003580 <GyroReadTask+0x250>)
 80034c2:	e9c1 2300 	strd	r2, r3, [r1]
 80034c6:	e014      	b.n	80034f2 <GyroReadTask+0x1c2>
                }
                else
                {
                    total_angle += tick_angle * 1.01;
 80034c8:	a329      	add	r3, pc, #164	; (adr r3, 8003570 <GyroReadTask+0x240>)
 80034ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80034d2:	f7fd f8a1 	bl	8000618 <__aeabi_dmul>
 80034d6:	4602      	mov	r2, r0
 80034d8:	460b      	mov	r3, r1
 80034da:	4610      	mov	r0, r2
 80034dc:	4619      	mov	r1, r3
 80034de:	4b28      	ldr	r3, [pc, #160]	; (8003580 <GyroReadTask+0x250>)
 80034e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e4:	f7fc fee2 	bl	80002ac <__adddf3>
 80034e8:	4602      	mov	r2, r0
 80034ea:	460b      	mov	r3, r1
 80034ec:	4924      	ldr	r1, [pc, #144]	; (8003580 <GyroReadTask+0x250>)
 80034ee:	e9c1 2300 	strd	r2, r3, [r1]
                }
            }

            if (total_angle >= 360)
 80034f2:	4b23      	ldr	r3, [pc, #140]	; (8003580 <GyroReadTask+0x250>)
 80034f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034f8:	f04f 0200 	mov.w	r2, #0
 80034fc:	4b21      	ldr	r3, [pc, #132]	; (8003584 <GyroReadTask+0x254>)
 80034fe:	f7fd fb11 	bl	8000b24 <__aeabi_dcmpge>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d006      	beq.n	8003516 <GyroReadTask+0x1e6>
            {
                total_angle = 0;
 8003508:	491d      	ldr	r1, [pc, #116]	; (8003580 <GyroReadTask+0x250>)
 800350a:	f04f 0200 	mov.w	r2, #0
 800350e:	f04f 0300 	mov.w	r3, #0
 8003512:	e9c1 2300 	strd	r2, r3, [r1]
            }
            if (total_angle <= -360)
 8003516:	4b1a      	ldr	r3, [pc, #104]	; (8003580 <GyroReadTask+0x250>)
 8003518:	e9d3 0100 	ldrd	r0, r1, [r3]
 800351c:	f04f 0200 	mov.w	r2, #0
 8003520:	4b19      	ldr	r3, [pc, #100]	; (8003588 <GyroReadTask+0x258>)
 8003522:	f7fd faf5 	bl	8000b10 <__aeabi_dcmple>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d006      	beq.n	800353a <GyroReadTask+0x20a>
            {
                total_angle = 0;
 800352c:	4914      	ldr	r1, [pc, #80]	; (8003580 <GyroReadTask+0x250>)
 800352e:	f04f 0200 	mov.w	r2, #0
 8003532:	f04f 0300 	mov.w	r3, #0
 8003536:	e9c1 2300 	strd	r2, r3, [r1]
            }

            i -= angular_speed;
 800353a:	4b0f      	ldr	r3, [pc, #60]	; (8003578 <GyroReadTask+0x248>)
 800353c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003540:	461a      	mov	r2, r3
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	1a9b      	subs	r3, r3, r2
 8003546:	61fb      	str	r3, [r7, #28]
            i++;
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	3301      	adds	r3, #1
 800354c:	61fb      	str	r3, [r7, #28]
            tick = HAL_GetTick();
 800354e:	f001 fb79 	bl	8004c44 <HAL_GetTick>
 8003552:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (HAL_GetTick() - tick >= 50) // poll every 50ms
 8003554:	e748      	b.n	80033e8 <GyroReadTask+0xb8>
 8003556:	bf00      	nop
 8003558:	00000000 	.word	0x00000000
 800355c:	40d00400 	.word	0x40d00400
 8003560:	9999999a 	.word	0x9999999a
 8003564:	bfb99999 	.word	0xbfb99999
 8003568:	9999999a 	.word	0x9999999a
 800356c:	3fb99999 	.word	0x3fb99999
 8003570:	c28f5c29 	.word	0xc28f5c29
 8003574:	3ff028f5 	.word	0x3ff028f5
 8003578:	2000013c 	.word	0x2000013c
 800357c:	40021000 	.word	0x40021000
 8003580:	20000118 	.word	0x20000118
 8003584:	40768000 	.word	0x40768000
 8003588:	c0768000 	.word	0xc0768000
 800358c:	00000000 	.word	0x00000000

08003590 <KeepStraight>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_KeepStraight */
void KeepStraight(void *argument)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
    for (;;)
    {
        //		  htim1.Instance -> CCR4 = 150;
        //		  osDelay(1);
        // Going to the right
        dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2) ? 1 : -1; // use only one of the wheel to determine car direction
 8003598:	4bac      	ldr	r3, [pc, #688]	; (800384c <KeepStraight+0x2bc>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0310 	and.w	r3, r3, #16
 80035a2:	2b10      	cmp	r3, #16
 80035a4:	d101      	bne.n	80035aa <KeepStraight+0x1a>
 80035a6:	2201      	movs	r2, #1
 80035a8:	e001      	b.n	80035ae <KeepStraight+0x1e>
 80035aa:	f04f 32ff 	mov.w	r2, #4294967295
 80035ae:	4ba8      	ldr	r3, [pc, #672]	; (8003850 <KeepStraight+0x2c0>)
 80035b0:	701a      	strb	r2, [r3, #0]

        if (isMoving && isStraight && isForward == 1)
 80035b2:	4ba8      	ldr	r3, [pc, #672]	; (8003854 <KeepStraight+0x2c4>)
 80035b4:	781b      	ldrb	r3, [r3, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 811f 	beq.w	80037fa <KeepStraight+0x26a>
 80035bc:	4ba6      	ldr	r3, [pc, #664]	; (8003858 <KeepStraight+0x2c8>)
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f000 811a 	beq.w	80037fa <KeepStraight+0x26a>
 80035c6:	4ba5      	ldr	r3, [pc, #660]	; (800385c <KeepStraight+0x2cc>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	f040 8115 	bne.w	80037fa <KeepStraight+0x26a>
        {
            if (pwmLeft == 1200)
 80035d0:	4ba3      	ldr	r3, [pc, #652]	; (8003860 <KeepStraight+0x2d0>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80035d8:	d17c      	bne.n	80036d4 <KeepStraight+0x144>
            {                                                                                   // slow
                angleNow += ((angular_speed >= -4 && angular_speed <= 11) ? 0 : angular_speed); // / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 80035da:	4ba2      	ldr	r3, [pc, #648]	; (8003864 <KeepStraight+0x2d4>)
 80035dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035e0:	f113 0f04 	cmn.w	r3, #4
 80035e4:	db04      	blt.n	80035f0 <KeepStraight+0x60>
 80035e6:	4b9f      	ldr	r3, [pc, #636]	; (8003864 <KeepStraight+0x2d4>)
 80035e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035ec:	2b0b      	cmp	r3, #11
 80035ee:	dd07      	ble.n	8003600 <KeepStraight+0x70>
 80035f0:	4b9c      	ldr	r3, [pc, #624]	; (8003864 <KeepStraight+0x2d4>)
 80035f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035f6:	ee07 3a90 	vmov	s15, r3
 80035fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035fe:	e001      	b.n	8003604 <KeepStraight+0x74>
 8003600:	eddf 7a99 	vldr	s15, [pc, #612]	; 8003868 <KeepStraight+0x2d8>
 8003604:	4b99      	ldr	r3, [pc, #612]	; (800386c <KeepStraight+0x2dc>)
 8003606:	ed93 7a00 	vldr	s14, [r3]
 800360a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800360e:	4b97      	ldr	r3, [pc, #604]	; (800386c <KeepStraight+0x2dc>)
 8003610:	edc3 7a00 	vstr	s15, [r3]
                __PID_SPEED_T(SpeedSlow, angleNow, correction, dir, newDutyL, newDutyR);
 8003614:	4b96      	ldr	r3, [pc, #600]	; (8003870 <KeepStraight+0x2e0>)
 8003616:	ed93 7a00 	vldr	s14, [r3]
 800361a:	4b94      	ldr	r3, [pc, #592]	; (800386c <KeepStraight+0x2dc>)
 800361c:	edd3 7a00 	vldr	s15, [r3]
 8003620:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003624:	4b92      	ldr	r3, [pc, #584]	; (8003870 <KeepStraight+0x2e0>)
 8003626:	edd3 6a01 	vldr	s13, [r3, #4]
 800362a:	4b91      	ldr	r3, [pc, #580]	; (8003870 <KeepStraight+0x2e0>)
 800362c:	edd3 7a04 	vldr	s15, [r3, #16]
 8003630:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003634:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003638:	4b8d      	ldr	r3, [pc, #564]	; (8003870 <KeepStraight+0x2e0>)
 800363a:	edd3 6a02 	vldr	s13, [r3, #8]
 800363e:	4b8c      	ldr	r3, [pc, #560]	; (8003870 <KeepStraight+0x2e0>)
 8003640:	ed93 6a03 	vldr	s12, [r3, #12]
 8003644:	4b89      	ldr	r3, [pc, #548]	; (800386c <KeepStraight+0x2dc>)
 8003646:	edd3 7a00 	vldr	s15, [r3]
 800364a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800364e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003652:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003656:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800365a:	ee17 2a90 	vmov	r2, s15
 800365e:	4b85      	ldr	r3, [pc, #532]	; (8003874 <KeepStraight+0x2e4>)
 8003660:	601a      	str	r2, [r3, #0]
 8003662:	4b82      	ldr	r3, [pc, #520]	; (800386c <KeepStraight+0x2dc>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a82      	ldr	r2, [pc, #520]	; (8003870 <KeepStraight+0x2e0>)
 8003668:	60d3      	str	r3, [r2, #12]
 800366a:	4b81      	ldr	r3, [pc, #516]	; (8003870 <KeepStraight+0x2e0>)
 800366c:	ed93 7a04 	vldr	s14, [r3, #16]
 8003670:	4b7e      	ldr	r3, [pc, #504]	; (800386c <KeepStraight+0x2dc>)
 8003672:	edd3 7a00 	vldr	s15, [r3]
 8003676:	ee77 7a27 	vadd.f32	s15, s14, s15
 800367a:	4b7d      	ldr	r3, [pc, #500]	; (8003870 <KeepStraight+0x2e0>)
 800367c:	edc3 7a04 	vstr	s15, [r3, #16]
 8003680:	4b7c      	ldr	r3, [pc, #496]	; (8003874 <KeepStraight+0x2e4>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8003688:	dc06      	bgt.n	8003698 <KeepStraight+0x108>
 800368a:	4b7a      	ldr	r3, [pc, #488]	; (8003874 <KeepStraight+0x2e4>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a7a      	ldr	r2, [pc, #488]	; (8003878 <KeepStraight+0x2e8>)
 8003690:	4293      	cmp	r3, r2
 8003692:	bfb8      	it	lt
 8003694:	4613      	movlt	r3, r2
 8003696:	e001      	b.n	800369c <KeepStraight+0x10c>
 8003698:	f44f 7316 	mov.w	r3, #600	; 0x258
 800369c:	4a75      	ldr	r2, [pc, #468]	; (8003874 <KeepStraight+0x2e4>)
 800369e:	6013      	str	r3, [r2, #0]
 80036a0:	4b74      	ldr	r3, [pc, #464]	; (8003874 <KeepStraight+0x2e4>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	4b73      	ldr	r3, [pc, #460]	; (800387c <KeepStraight+0x2ec>)
 80036ae:	801a      	strh	r2, [r3, #0]
 80036b0:	4b70      	ldr	r3, [pc, #448]	; (8003874 <KeepStraight+0x2e4>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	f5c3 6396 	rsb	r3, r3, #1200	; 0x4b0
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	4b70      	ldr	r3, [pc, #448]	; (8003880 <KeepStraight+0x2f0>)
 80036be:	801a      	strh	r2, [r3, #0]
                setSpeed(newDutyL, newDutyR);
 80036c0:	4b6e      	ldr	r3, [pc, #440]	; (800387c <KeepStraight+0x2ec>)
 80036c2:	881b      	ldrh	r3, [r3, #0]
 80036c4:	461a      	mov	r2, r3
 80036c6:	4b6e      	ldr	r3, [pc, #440]	; (8003880 <KeepStraight+0x2f0>)
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	4619      	mov	r1, r3
 80036cc:	4610      	mov	r0, r2
 80036ce:	f7fe fb29 	bl	8001d24 <setSpeed>
            if (pwmLeft == 1200)
 80036d2:	e145      	b.n	8003960 <KeepStraight+0x3d0>
            }
            else if (pwmLeft == 3000)
 80036d4:	4b62      	ldr	r3, [pc, #392]	; (8003860 <KeepStraight+0x2d0>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80036dc:	4293      	cmp	r3, r2
 80036de:	f040 813f 	bne.w	8003960 <KeepStraight+0x3d0>
            {                                                                                   // fast
                angleNow += ((angular_speed >= -4 && angular_speed <= 11) ? 0 : angular_speed); // / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 80036e2:	4b60      	ldr	r3, [pc, #384]	; (8003864 <KeepStraight+0x2d4>)
 80036e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036e8:	f113 0f04 	cmn.w	r3, #4
 80036ec:	db04      	blt.n	80036f8 <KeepStraight+0x168>
 80036ee:	4b5d      	ldr	r3, [pc, #372]	; (8003864 <KeepStraight+0x2d4>)
 80036f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036f4:	2b0b      	cmp	r3, #11
 80036f6:	dd07      	ble.n	8003708 <KeepStraight+0x178>
 80036f8:	4b5a      	ldr	r3, [pc, #360]	; (8003864 <KeepStraight+0x2d4>)
 80036fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036fe:	ee07 3a90 	vmov	s15, r3
 8003702:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003706:	e001      	b.n	800370c <KeepStraight+0x17c>
 8003708:	eddf 7a57 	vldr	s15, [pc, #348]	; 8003868 <KeepStraight+0x2d8>
 800370c:	4b57      	ldr	r3, [pc, #348]	; (800386c <KeepStraight+0x2dc>)
 800370e:	ed93 7a00 	vldr	s14, [r3]
 8003712:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003716:	4b55      	ldr	r3, [pc, #340]	; (800386c <KeepStraight+0x2dc>)
 8003718:	edc3 7a00 	vstr	s15, [r3]
                __PID_SPEED_2(SpeedFast, angleNow, correction, dir, newDutyL, newDutyR);
 800371c:	4b59      	ldr	r3, [pc, #356]	; (8003884 <KeepStraight+0x2f4>)
 800371e:	ed93 7a00 	vldr	s14, [r3]
 8003722:	4b52      	ldr	r3, [pc, #328]	; (800386c <KeepStraight+0x2dc>)
 8003724:	edd3 7a00 	vldr	s15, [r3]
 8003728:	ee27 7a27 	vmul.f32	s14, s14, s15
 800372c:	4b55      	ldr	r3, [pc, #340]	; (8003884 <KeepStraight+0x2f4>)
 800372e:	edd3 6a01 	vldr	s13, [r3, #4]
 8003732:	4b54      	ldr	r3, [pc, #336]	; (8003884 <KeepStraight+0x2f4>)
 8003734:	edd3 7a04 	vldr	s15, [r3, #16]
 8003738:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800373c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003740:	4b50      	ldr	r3, [pc, #320]	; (8003884 <KeepStraight+0x2f4>)
 8003742:	edd3 6a02 	vldr	s13, [r3, #8]
 8003746:	4b4f      	ldr	r3, [pc, #316]	; (8003884 <KeepStraight+0x2f4>)
 8003748:	ed93 6a03 	vldr	s12, [r3, #12]
 800374c:	4b47      	ldr	r3, [pc, #284]	; (800386c <KeepStraight+0x2dc>)
 800374e:	edd3 7a00 	vldr	s15, [r3]
 8003752:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003756:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800375a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800375e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003762:	ee17 2a90 	vmov	r2, s15
 8003766:	4b43      	ldr	r3, [pc, #268]	; (8003874 <KeepStraight+0x2e4>)
 8003768:	601a      	str	r2, [r3, #0]
 800376a:	4b40      	ldr	r3, [pc, #256]	; (800386c <KeepStraight+0x2dc>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a45      	ldr	r2, [pc, #276]	; (8003884 <KeepStraight+0x2f4>)
 8003770:	60d3      	str	r3, [r2, #12]
 8003772:	4b44      	ldr	r3, [pc, #272]	; (8003884 <KeepStraight+0x2f4>)
 8003774:	ed93 7a04 	vldr	s14, [r3, #16]
 8003778:	4b3c      	ldr	r3, [pc, #240]	; (800386c <KeepStraight+0x2dc>)
 800377a:	edd3 7a00 	vldr	s15, [r3]
 800377e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003782:	4b40      	ldr	r3, [pc, #256]	; (8003884 <KeepStraight+0x2f4>)
 8003784:	edc3 7a04 	vstr	s15, [r3, #16]
 8003788:	4b3a      	ldr	r3, [pc, #232]	; (8003874 <KeepStraight+0x2e4>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8003790:	dc06      	bgt.n	80037a0 <KeepStraight+0x210>
 8003792:	4b38      	ldr	r3, [pc, #224]	; (8003874 <KeepStraight+0x2e4>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a3c      	ldr	r2, [pc, #240]	; (8003888 <KeepStraight+0x2f8>)
 8003798:	4293      	cmp	r3, r2
 800379a:	bfb8      	it	lt
 800379c:	4613      	movlt	r3, r2
 800379e:	e001      	b.n	80037a4 <KeepStraight+0x214>
 80037a0:	f44f 732f 	mov.w	r3, #700	; 0x2bc
 80037a4:	4a33      	ldr	r2, [pc, #204]	; (8003874 <KeepStraight+0x2e4>)
 80037a6:	6013      	str	r3, [r2, #0]
 80037a8:	4b29      	ldr	r3, [pc, #164]	; (8003850 <KeepStraight+0x2c0>)
 80037aa:	f993 3000 	ldrsb.w	r3, [r3]
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	4b30      	ldr	r3, [pc, #192]	; (8003874 <KeepStraight+0x2e4>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	fb12 f303 	smulbb	r3, r2, r3
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	4b2e      	ldr	r3, [pc, #184]	; (800387c <KeepStraight+0x2ec>)
 80037c4:	801a      	strh	r2, [r3, #0]
 80037c6:	4b22      	ldr	r3, [pc, #136]	; (8003850 <KeepStraight+0x2c0>)
 80037c8:	f993 3000 	ldrsb.w	r3, [r3]
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	4b29      	ldr	r3, [pc, #164]	; (8003874 <KeepStraight+0x2e4>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	fb12 f303 	smulbb	r3, r2, r3
 80037d8:	b29b      	uxth	r3, r3
 80037da:	f5c3 633b 	rsb	r3, r3, #2992	; 0xbb0
 80037de:	3308      	adds	r3, #8
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	4b27      	ldr	r3, [pc, #156]	; (8003880 <KeepStraight+0x2f0>)
 80037e4:	801a      	strh	r2, [r3, #0]
                setSpeed(newDutyL, newDutyR);
 80037e6:	4b25      	ldr	r3, [pc, #148]	; (800387c <KeepStraight+0x2ec>)
 80037e8:	881b      	ldrh	r3, [r3, #0]
 80037ea:	461a      	mov	r2, r3
 80037ec:	4b24      	ldr	r3, [pc, #144]	; (8003880 <KeepStraight+0x2f0>)
 80037ee:	881b      	ldrh	r3, [r3, #0]
 80037f0:	4619      	mov	r1, r3
 80037f2:	4610      	mov	r0, r2
 80037f4:	f7fe fa96 	bl	8001d24 <setSpeed>
            if (pwmLeft == 1200)
 80037f8:	e0b2      	b.n	8003960 <KeepStraight+0x3d0>
            }

            //			__SET_MOTOR_DUTY(&htim8, newDutyL, newDutyR);
        } // back
        else if (isMoving && isStraight && isForward == 0)
 80037fa:	4b16      	ldr	r3, [pc, #88]	; (8003854 <KeepStraight+0x2c4>)
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f000 80af 	beq.w	8003962 <KeepStraight+0x3d2>
 8003804:	4b14      	ldr	r3, [pc, #80]	; (8003858 <KeepStraight+0x2c8>)
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 80aa 	beq.w	8003962 <KeepStraight+0x3d2>
 800380e:	4b13      	ldr	r3, [pc, #76]	; (800385c <KeepStraight+0x2cc>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	f040 80a5 	bne.w	8003962 <KeepStraight+0x3d2>
        {
            if (pwmLeft == 1200)
 8003818:	4b11      	ldr	r3, [pc, #68]	; (8003860 <KeepStraight+0x2d0>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8003820:	d15e      	bne.n	80038e0 <KeepStraight+0x350>
            {
                if (total_angle == 0.0)
 8003822:	4b1a      	ldr	r3, [pc, #104]	; (800388c <KeepStraight+0x2fc>)
 8003824:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003828:	f04f 0200 	mov.w	r2, #0
 800382c:	f04f 0300 	mov.w	r3, #0
 8003830:	f7fd f95a 	bl	8000ae8 <__aeabi_dcmpeq>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d02c      	beq.n	8003894 <KeepStraight+0x304>
                {                               // if middle
                    htim1.Instance->CCR4 = 149; // keep straight
 800383a:	4b15      	ldr	r3, [pc, #84]	; (8003890 <KeepStraight+0x300>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2295      	movs	r2, #149	; 0x95
 8003840:	641a      	str	r2, [r3, #64]	; 0x40
                    osDelay(1);
 8003842:	2001      	movs	r0, #1
 8003844:	f006 fbec 	bl	800a020 <osDelay>
 8003848:	e08b      	b.n	8003962 <KeepStraight+0x3d2>
 800384a:	bf00      	nop
 800384c:	200002b4 	.word	0x200002b4
 8003850:	20000008 	.word	0x20000008
 8003854:	200000ba 	.word	0x200000ba
 8003858:	200000bb 	.word	0x200000bb
 800385c:	20000004 	.word	0x20000004
 8003860:	200000bc 	.word	0x200000bc
 8003864:	2000013c 	.word	0x2000013c
 8003868:	00000000 	.word	0x00000000
 800386c:	20000138 	.word	0x20000138
 8003870:	20000140 	.word	0x20000140
 8003874:	20000134 	.word	0x20000134
 8003878:	fffffda8 	.word	0xfffffda8
 800387c:	200000c4 	.word	0x200000c4
 8003880:	200000c6 	.word	0x200000c6
 8003884:	20000154 	.word	0x20000154
 8003888:	fffffd44 	.word	0xfffffd44
 800388c:	20000118 	.word	0x20000118
 8003890:	2000026c 	.word	0x2000026c
                }
                else if (total_angle < -0.01)
 8003894:	4b3a      	ldr	r3, [pc, #232]	; (8003980 <KeepStraight+0x3f0>)
 8003896:	e9d3 0100 	ldrd	r0, r1, [r3]
 800389a:	a335      	add	r3, pc, #212	; (adr r3, 8003970 <KeepStraight+0x3e0>)
 800389c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a0:	f7fd f92c 	bl	8000afc <__aeabi_dcmplt>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d007      	beq.n	80038ba <KeepStraight+0x32a>
                { // if go right
                    //				  htim1.Instance -> CCR4 = 154;//keep left
                    htim1.Instance->CCR4 = 159; // keep left
 80038aa:	4b36      	ldr	r3, [pc, #216]	; (8003984 <KeepStraight+0x3f4>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	229f      	movs	r2, #159	; 0x9f
 80038b0:	641a      	str	r2, [r3, #64]	; 0x40
                    osDelay(1);
 80038b2:	2001      	movs	r0, #1
 80038b4:	f006 fbb4 	bl	800a020 <osDelay>
 80038b8:	e053      	b.n	8003962 <KeepStraight+0x3d2>
                }
                else if (total_angle > 0.01)
 80038ba:	4b31      	ldr	r3, [pc, #196]	; (8003980 <KeepStraight+0x3f0>)
 80038bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80038c0:	a32d      	add	r3, pc, #180	; (adr r3, 8003978 <KeepStraight+0x3e8>)
 80038c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c6:	f7fd f937 	bl	8000b38 <__aeabi_dcmpgt>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d048      	beq.n	8003962 <KeepStraight+0x3d2>
                {                               // if go left
                    htim1.Instance->CCR4 = 139; // keep right
 80038d0:	4b2c      	ldr	r3, [pc, #176]	; (8003984 <KeepStraight+0x3f4>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	228b      	movs	r2, #139	; 0x8b
 80038d6:	641a      	str	r2, [r3, #64]	; 0x40
                    osDelay(1);
 80038d8:	2001      	movs	r0, #1
 80038da:	f006 fba1 	bl	800a020 <osDelay>
 80038de:	e040      	b.n	8003962 <KeepStraight+0x3d2>
                }
            }
            else if (pwmLeft == 3000)
 80038e0:	4b29      	ldr	r3, [pc, #164]	; (8003988 <KeepStraight+0x3f8>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d13a      	bne.n	8003962 <KeepStraight+0x3d2>
            {
                if (total_angle == 0.0)
 80038ec:	4b24      	ldr	r3, [pc, #144]	; (8003980 <KeepStraight+0x3f0>)
 80038ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80038f2:	f04f 0200 	mov.w	r2, #0
 80038f6:	f04f 0300 	mov.w	r3, #0
 80038fa:	f7fd f8f5 	bl	8000ae8 <__aeabi_dcmpeq>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d007      	beq.n	8003914 <KeepStraight+0x384>
                {                               // if middle
                    htim1.Instance->CCR4 = 149; // keep straight
 8003904:	4b1f      	ldr	r3, [pc, #124]	; (8003984 <KeepStraight+0x3f4>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2295      	movs	r2, #149	; 0x95
 800390a:	641a      	str	r2, [r3, #64]	; 0x40
                    osDelay(1);
 800390c:	2001      	movs	r0, #1
 800390e:	f006 fb87 	bl	800a020 <osDelay>
 8003912:	e026      	b.n	8003962 <KeepStraight+0x3d2>
                }
                else if (total_angle < -0.01)
 8003914:	4b1a      	ldr	r3, [pc, #104]	; (8003980 <KeepStraight+0x3f0>)
 8003916:	e9d3 0100 	ldrd	r0, r1, [r3]
 800391a:	a315      	add	r3, pc, #84	; (adr r3, 8003970 <KeepStraight+0x3e0>)
 800391c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003920:	f7fd f8ec 	bl	8000afc <__aeabi_dcmplt>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d007      	beq.n	800393a <KeepStraight+0x3aa>
                { // if go right
                    //				  htim1.Instance -> CCR4 = 154;//keep left
                    htim1.Instance->CCR4 = 154; // keep left
 800392a:	4b16      	ldr	r3, [pc, #88]	; (8003984 <KeepStraight+0x3f4>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	229a      	movs	r2, #154	; 0x9a
 8003930:	641a      	str	r2, [r3, #64]	; 0x40
                    osDelay(1);
 8003932:	2001      	movs	r0, #1
 8003934:	f006 fb74 	bl	800a020 <osDelay>
 8003938:	e013      	b.n	8003962 <KeepStraight+0x3d2>
                }
                else if (total_angle > 0.01)
 800393a:	4b11      	ldr	r3, [pc, #68]	; (8003980 <KeepStraight+0x3f0>)
 800393c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003940:	a30d      	add	r3, pc, #52	; (adr r3, 8003978 <KeepStraight+0x3e8>)
 8003942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003946:	f7fd f8f7 	bl	8000b38 <__aeabi_dcmpgt>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d008      	beq.n	8003962 <KeepStraight+0x3d2>
                {                               // if go left
                    htim1.Instance->CCR4 = 145; // keep right
 8003950:	4b0c      	ldr	r3, [pc, #48]	; (8003984 <KeepStraight+0x3f4>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2291      	movs	r2, #145	; 0x91
 8003956:	641a      	str	r2, [r3, #64]	; 0x40
                    osDelay(1);
 8003958:	2001      	movs	r0, #1
 800395a:	f006 fb61 	bl	800a020 <osDelay>
 800395e:	e000      	b.n	8003962 <KeepStraight+0x3d2>
            if (pwmLeft == 1200)
 8003960:	bf00      	nop
                }
            }
        }
        //	    osDelay(1);
        osDelay(1);
 8003962:	2001      	movs	r0, #1
 8003964:	f006 fb5c 	bl	800a020 <osDelay>
        dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2) ? 1 : -1; // use only one of the wheel to determine car direction
 8003968:	e616      	b.n	8003598 <KeepStraight+0x8>
 800396a:	bf00      	nop
 800396c:	f3af 8000 	nop.w
 8003970:	47ae147b 	.word	0x47ae147b
 8003974:	bf847ae1 	.word	0xbf847ae1
 8003978:	47ae147b 	.word	0x47ae147b
 800397c:	3f847ae1 	.word	0x3f847ae1
 8003980:	20000118 	.word	0x20000118
 8003984:	2000026c 	.word	0x2000026c
 8003988:	200000bc 	.word	0x200000bc

0800398c <OLEDPrint>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_OLEDPrint */
void OLEDPrint(void *argument)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b088      	sub	sp, #32
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OLEDPrint */
    /* Infinite loop */
    uint8_t OLEDStringint[20] = "";
 8003994:	2300      	movs	r3, #0
 8003996:	60bb      	str	r3, [r7, #8]
 8003998:	f107 030c 	add.w	r3, r7, #12
 800399c:	2200      	movs	r2, #0
 800399e:	601a      	str	r2, [r3, #0]
 80039a0:	605a      	str	r2, [r3, #4]
 80039a2:	609a      	str	r2, [r3, #8]
 80039a4:	60da      	str	r2, [r3, #12]
    int heartbeat = 0;
 80039a6:	2300      	movs	r3, #0
 80039a8:	61fb      	str	r3, [r7, #28]
    for (;;)
    {
        sprintf(OLEDStringint, "Alive: %d\0", heartbeat);
 80039aa:	f107 0308 	add.w	r3, r7, #8
 80039ae:	69fa      	ldr	r2, [r7, #28]
 80039b0:	493d      	ldr	r1, [pc, #244]	; (8003aa8 <OLEDPrint+0x11c>)
 80039b2:	4618      	mov	r0, r3
 80039b4:	f009 f856 	bl	800ca64 <siprintf>
        OLED_ShowString(0, 0, OLEDStringint);
 80039b8:	f107 0308 	add.w	r3, r7, #8
 80039bc:	461a      	mov	r2, r3
 80039be:	2100      	movs	r1, #0
 80039c0:	2000      	movs	r0, #0
 80039c2:	f000 fc57 	bl	8004274 <OLED_ShowString>
        heartbeat++;
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	3301      	adds	r3, #1
 80039ca:	61fb      	str	r3, [r7, #28]
        //	  //print speed
        //	  sprintf(OLEDStringint, "%5d | %5d\0", cnt1A,cnt1B);//show encoder reading
        sprintf(OLEDStringint, "Buf: %s | %d\0", Command, TargetDistance);
 80039cc:	4b37      	ldr	r3, [pc, #220]	; (8003aac <OLEDPrint+0x120>)
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	f107 0008 	add.w	r0, r7, #8
 80039d4:	4a36      	ldr	r2, [pc, #216]	; (8003ab0 <OLEDPrint+0x124>)
 80039d6:	4937      	ldr	r1, [pc, #220]	; (8003ab4 <OLEDPrint+0x128>)
 80039d8:	f009 f844 	bl	800ca64 <siprintf>
        OLED_ShowString(0, 10, OLEDStringint);
 80039dc:	f107 0308 	add.w	r3, r7, #8
 80039e0:	461a      	mov	r2, r3
 80039e2:	210a      	movs	r1, #10
 80039e4:	2000      	movs	r0, #0
 80039e6:	f000 fc45 	bl	8004274 <OLED_ShowString>

        //	  sprintf(OLEDStringint, "DistA:%5d\0", (int) distance_travelledA);
        //	  OLED_ShowString(0, 20, OLEDStringint);
        sprintf(OLEDStringint, "IR: %4d %4d", LeftIR, RightIR);
 80039ea:	4b33      	ldr	r3, [pc, #204]	; (8003ab8 <OLEDPrint+0x12c>)
 80039ec:	881b      	ldrh	r3, [r3, #0]
 80039ee:	461a      	mov	r2, r3
 80039f0:	4b32      	ldr	r3, [pc, #200]	; (8003abc <OLEDPrint+0x130>)
 80039f2:	881b      	ldrh	r3, [r3, #0]
 80039f4:	f107 0008 	add.w	r0, r7, #8
 80039f8:	4931      	ldr	r1, [pc, #196]	; (8003ac0 <OLEDPrint+0x134>)
 80039fa:	f009 f833 	bl	800ca64 <siprintf>
        OLED_ShowString(0, 20, OLEDStringint);
 80039fe:	f107 0308 	add.w	r3, r7, #8
 8003a02:	461a      	mov	r2, r3
 8003a04:	2114      	movs	r1, #20
 8003a06:	2000      	movs	r0, #0
 8003a08:	f000 fc34 	bl	8004274 <OLED_ShowString>

        sprintf(OLEDStringint, "Ydist:%5d\0", (int)gooo);
 8003a0c:	4b2d      	ldr	r3, [pc, #180]	; (8003ac4 <OLEDPrint+0x138>)
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	f107 0308 	add.w	r3, r7, #8
 8003a14:	492c      	ldr	r1, [pc, #176]	; (8003ac8 <OLEDPrint+0x13c>)
 8003a16:	4618      	mov	r0, r3
 8003a18:	f009 f824 	bl	800ca64 <siprintf>
        OLED_ShowString(0, 30, OLEDStringint);
 8003a1c:	f107 0308 	add.w	r3, r7, #8
 8003a20:	461a      	mov	r2, r3
 8003a22:	211e      	movs	r1, #30
 8003a24:	2000      	movs	r0, #0
 8003a26:	f000 fc25 	bl	8004274 <OLED_ShowString>
        //	  }
        //	  else{
        //	      sprintf(OLEDStringint,"isStraight: 0\0 ");
        //	      OLED_ShowString(0, 40,OLEDStringint);
        //	  }
        sprintf(OLEDStringint, "aveCount: %5d\0 ", (int)averagecount);
 8003a2a:	4b28      	ldr	r3, [pc, #160]	; (8003acc <OLEDPrint+0x140>)
 8003a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a30:	4610      	mov	r0, r2
 8003a32:	4619      	mov	r1, r3
 8003a34:	f7fd f8a0 	bl	8000b78 <__aeabi_d2iz>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	f107 0308 	add.w	r3, r7, #8
 8003a3e:	4924      	ldr	r1, [pc, #144]	; (8003ad0 <OLEDPrint+0x144>)
 8003a40:	4618      	mov	r0, r3
 8003a42:	f009 f80f 	bl	800ca64 <siprintf>
        OLED_ShowString(0, 40, OLEDStringint);
 8003a46:	f107 0308 	add.w	r3, r7, #8
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	2128      	movs	r1, #40	; 0x28
 8003a4e:	2000      	movs	r0, #0
 8003a50:	f000 fc10 	bl	8004274 <OLED_ShowString>

        sprintf(OLEDStringint, "US: %5d\0 ", (int)Distance);
 8003a54:	4b1f      	ldr	r3, [pc, #124]	; (8003ad4 <OLEDPrint+0x148>)
 8003a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5a:	4610      	mov	r0, r2
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	f7fd f88b 	bl	8000b78 <__aeabi_d2iz>
 8003a62:	4602      	mov	r2, r0
 8003a64:	f107 0308 	add.w	r3, r7, #8
 8003a68:	491b      	ldr	r1, [pc, #108]	; (8003ad8 <OLEDPrint+0x14c>)
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f008 fffa 	bl	800ca64 <siprintf>
        OLED_ShowString(0, 50, OLEDStringint);
 8003a70:	f107 0308 	add.w	r3, r7, #8
 8003a74:	461a      	mov	r2, r3
 8003a76:	2132      	movs	r1, #50	; 0x32
 8003a78:	2000      	movs	r0, #0
 8003a7a:	f000 fbfb 	bl	8004274 <OLED_ShowString>

        OLED_Refresh_Gram();
 8003a7e:	f000 fa85 	bl	8003f8c <OLED_Refresh_Gram>

        sprintf(OLEDStringint, "Yaw: %5d\n\r\0", (int)total_angle);
 8003a82:	4b16      	ldr	r3, [pc, #88]	; (8003adc <OLEDPrint+0x150>)
 8003a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a88:	4610      	mov	r0, r2
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	f7fd f874 	bl	8000b78 <__aeabi_d2iz>
 8003a90:	4602      	mov	r2, r0
 8003a92:	f107 0308 	add.w	r3, r7, #8
 8003a96:	4912      	ldr	r1, [pc, #72]	; (8003ae0 <OLEDPrint+0x154>)
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f008 ffe3 	bl	800ca64 <siprintf>
        //	  HAL_UART_Transmit(&huart3, "connected\n\r",  11, 0xFFFF);

        //      HAL_UART_Transmit(&huart3,OLEDStringint,14,0xFFFF);//count the length

        osDelay(1);
 8003a9e:	2001      	movs	r0, #1
 8003aa0:	f006 fabe 	bl	800a020 <osDelay>
        sprintf(OLEDStringint, "Alive: %d\0", heartbeat);
 8003aa4:	e781      	b.n	80039aa <OLEDPrint+0x1e>
 8003aa6:	bf00      	nop
 8003aa8:	0800e2a0 	.word	0x0800e2a0
 8003aac:	200000b4 	.word	0x200000b4
 8003ab0:	200000b0 	.word	0x200000b0
 8003ab4:	0800e2ac 	.word	0x0800e2ac
 8003ab8:	200000b6 	.word	0x200000b6
 8003abc:	200000b8 	.word	0x200000b8
 8003ac0:	0800e2bc 	.word	0x0800e2bc
 8003ac4:	20000438 	.word	0x20000438
 8003ac8:	0800e2c8 	.word	0x0800e2c8
 8003acc:	200000d8 	.word	0x200000d8
 8003ad0:	0800e2d4 	.word	0x0800e2d4
 8003ad4:	20000180 	.word	0x20000180
 8003ad8:	0800e2e4 	.word	0x0800e2e4
 8003adc:	20000118 	.word	0x20000118
 8003ae0:	0800e2f0 	.word	0x0800e2f0
 8003ae4:	00000000 	.word	0x00000000

08003ae8 <Calculate_Dist>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Calculate_Dist */
void Calculate_Dist(void *argument)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b0ba      	sub	sp, #232	; 0xe8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Calculate_Dist */
    /* Infinite loop */
    int index = 0;
 8003af0:	2300      	movs	r3, #0
 8003af2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    double IsaacHallcircumference[9] = {29.0, 26.5, 23.0, 22.95, 22.1, 22.0, 22.3, 22.0, 21.95}; // calibrated distance 10cm to 90cm. assuming circumference of wheel since we cant change tick/rev
 8003af6:	4a90      	ldr	r2, [pc, #576]	; (8003d38 <Calculate_Dist+0x250>)
 8003af8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003afc:	4611      	mov	r1, r2
 8003afe:	2248      	movs	r2, #72	; 0x48
 8003b00:	4618      	mov	r0, r3
 8003b02:	f009 f827 	bl	800cb54 <memcpy>
    double InsideLabCircumference[9] = {29.0, 24.2, 22.5, 22.1, 21.6, 21.4, 21.3, 21.2, 21.15};  // calibrated distance 10cm to 90cm. assuming circumference of wheel since we cant change tick/rev
 8003b06:	4a8d      	ldr	r2, [pc, #564]	; (8003d3c <Calculate_Dist+0x254>)
 8003b08:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003b0c:	4611      	mov	r1, r2
 8003b0e:	2248      	movs	r2, #72	; 0x48
 8003b10:	4618      	mov	r0, r3
 8003b12:	f009 f81f 	bl	800cb54 <memcpy>
    double OutsideLabCircumference[9] = {31.0, 25.0, 23.0, 22.3, 22.1, 21.8, 21.5, 21.2, 21.2};  // calibrated distance 10cm to 90cm. assuming circumference of wheel since we cant change tick/rev
 8003b16:	4a8a      	ldr	r2, [pc, #552]	; (8003d40 <Calculate_Dist+0x258>)
 8003b18:	f107 0308 	add.w	r3, r7, #8
 8003b1c:	4611      	mov	r1, r2
 8003b1e:	2248      	movs	r2, #72	; 0x48
 8003b20:	4618      	mov	r0, r3
 8003b22:	f009 f817 	bl	800cb54 <memcpy>
    // the lower the further it travels
    for (;;)
    {
        index = (TargetDistance / 10)-1;
 8003b26:	4b87      	ldr	r3, [pc, #540]	; (8003d44 <Calculate_Dist+0x25c>)
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	4a87      	ldr	r2, [pc, #540]	; (8003d48 <Calculate_Dist+0x260>)
 8003b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b30:	08db      	lsrs	r3, r3, #3
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	3b01      	subs	r3, #1
 8003b36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        if (index > 9)
 8003b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b3e:	2b09      	cmp	r3, #9
 8003b40:	dd03      	ble.n	8003b4a <Calculate_Dist+0x62>
        {
            index = 8;
 8003b42:	2308      	movs	r3, #8
 8003b44:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003b48:	e006      	b.n	8003b58 <Calculate_Dist+0x70>
        }
        else if(index < 0){
 8003b4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	da02      	bge.n	8003b58 <Calculate_Dist+0x70>
            index = 0;
 8003b52:	2300      	movs	r3, #0
 8003b54:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        }

        //      circumference= 20.5cm
        if (isForward == 1)
 8003b58:	4b7c      	ldr	r3, [pc, #496]	; (8003d4c <Calculate_Dist+0x264>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d10f      	bne.n	8003b80 <Calculate_Dist+0x98>
        { // going forward
            rightcount = __HAL_TIM_GET_COUNTER(&htim3);
 8003b60:	4b7b      	ldr	r3, [pc, #492]	; (8003d50 <Calculate_Dist+0x268>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b66:	461a      	mov	r2, r3
 8003b68:	4b7a      	ldr	r3, [pc, #488]	; (8003d54 <Calculate_Dist+0x26c>)
 8003b6a:	601a      	str	r2, [r3, #0]
            leftcount = 65535 - __HAL_TIM_GET_COUNTER(&htim2);
 8003b6c:	4b7a      	ldr	r3, [pc, #488]	; (8003d58 <Calculate_Dist+0x270>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b72:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003b76:	33ff      	adds	r3, #255	; 0xff
 8003b78:	461a      	mov	r2, r3
 8003b7a:	4b78      	ldr	r3, [pc, #480]	; (8003d5c <Calculate_Dist+0x274>)
 8003b7c:	601a      	str	r2, [r3, #0]
 8003b7e:	e01d      	b.n	8003bbc <Calculate_Dist+0xd4>
        }
        else if (isForward == 2)
 8003b80:	4b72      	ldr	r3, [pc, #456]	; (8003d4c <Calculate_Dist+0x264>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d106      	bne.n	8003b96 <Calculate_Dist+0xae>
        { // not going forward
            rightcount = 0;
 8003b88:	4b72      	ldr	r3, [pc, #456]	; (8003d54 <Calculate_Dist+0x26c>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	601a      	str	r2, [r3, #0]
            leftcount = 0;
 8003b8e:	4b73      	ldr	r3, [pc, #460]	; (8003d5c <Calculate_Dist+0x274>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	e012      	b.n	8003bbc <Calculate_Dist+0xd4>
        }
        else if (isForward == 0)
 8003b96:	4b6d      	ldr	r3, [pc, #436]	; (8003d4c <Calculate_Dist+0x264>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10e      	bne.n	8003bbc <Calculate_Dist+0xd4>
        { // going back
            rightcount = 65535 - __HAL_TIM_GET_COUNTER(&htim3);
 8003b9e:	4b6c      	ldr	r3, [pc, #432]	; (8003d50 <Calculate_Dist+0x268>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003ba8:	33ff      	adds	r3, #255	; 0xff
 8003baa:	461a      	mov	r2, r3
 8003bac:	4b69      	ldr	r3, [pc, #420]	; (8003d54 <Calculate_Dist+0x26c>)
 8003bae:	601a      	str	r2, [r3, #0]
            leftcount = __HAL_TIM_GET_COUNTER(&htim2);
 8003bb0:	4b69      	ldr	r3, [pc, #420]	; (8003d58 <Calculate_Dist+0x270>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	4b68      	ldr	r3, [pc, #416]	; (8003d5c <Calculate_Dist+0x274>)
 8003bba:	601a      	str	r2, [r3, #0]
        }
        if (ack == 0)
 8003bbc:	4b68      	ldr	r3, [pc, #416]	; (8003d60 <Calculate_Dist+0x278>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d144      	bne.n	8003c4e <Calculate_Dist+0x166>
        {                                                                                       // while executing command
            distance_travelledA = ((float)leftcount) / 1535.0 * OutsideLabCircumference[index]; // diameter is 6.5cm
 8003bc4:	4b65      	ldr	r3, [pc, #404]	; (8003d5c <Calculate_Dist+0x274>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	ee07 3a90 	vmov	s15, r3
 8003bcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bd0:	ee17 0a90 	vmov	r0, s15
 8003bd4:	f7fc fcc8 	bl	8000568 <__aeabi_f2d>
 8003bd8:	a355      	add	r3, pc, #340	; (adr r3, 8003d30 <Calculate_Dist+0x248>)
 8003bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bde:	f7fc fe45 	bl	800086c <__aeabi_ddiv>
 8003be2:	4602      	mov	r2, r0
 8003be4:	460b      	mov	r3, r1
 8003be6:	4610      	mov	r0, r2
 8003be8:	4619      	mov	r1, r3
 8003bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	33e8      	adds	r3, #232	; 0xe8
 8003bf2:	443b      	add	r3, r7
 8003bf4:	3be0      	subs	r3, #224	; 0xe0
 8003bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bfa:	f7fc fd0d 	bl	8000618 <__aeabi_dmul>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	460b      	mov	r3, r1
 8003c02:	4958      	ldr	r1, [pc, #352]	; (8003d64 <Calculate_Dist+0x27c>)
 8003c04:	e9c1 2300 	strd	r2, r3, [r1]
            distance_travelledB = (float)rightcount / 1552.0 * OutsideLabCircumference[index];  // get 1552 from cnt1B for one
 8003c08:	4b52      	ldr	r3, [pc, #328]	; (8003d54 <Calculate_Dist+0x26c>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	ee07 3a90 	vmov	s15, r3
 8003c10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c14:	ee17 0a90 	vmov	r0, s15
 8003c18:	f7fc fca6 	bl	8000568 <__aeabi_f2d>
 8003c1c:	f04f 0200 	mov.w	r2, #0
 8003c20:	4b51      	ldr	r3, [pc, #324]	; (8003d68 <Calculate_Dist+0x280>)
 8003c22:	f7fc fe23 	bl	800086c <__aeabi_ddiv>
 8003c26:	4602      	mov	r2, r0
 8003c28:	460b      	mov	r3, r1
 8003c2a:	4610      	mov	r0, r2
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	33e8      	adds	r3, #232	; 0xe8
 8003c36:	443b      	add	r3, r7
 8003c38:	3be0      	subs	r3, #224	; 0xe0
 8003c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c3e:	f7fc fceb 	bl	8000618 <__aeabi_dmul>
 8003c42:	4602      	mov	r2, r0
 8003c44:	460b      	mov	r3, r1
 8003c46:	4949      	ldr	r1, [pc, #292]	; (8003d6c <Calculate_Dist+0x284>)
 8003c48:	e9c1 2300 	strd	r2, r3, [r1]
 8003c4c:	e047      	b.n	8003cde <Calculate_Dist+0x1f6>
        }
        else if (ack == 2)
 8003c4e:	4b44      	ldr	r3, [pc, #272]	; (8003d60 <Calculate_Dist+0x278>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d143      	bne.n	8003cde <Calculate_Dist+0x1f6>
        {                                                                                       // no command sent, only in debug mode
            distance_travelledA = ((float)leftcount) / 1535.0 * OutsideLabCircumference[index]; // diameter is 6.5cm
 8003c56:	4b41      	ldr	r3, [pc, #260]	; (8003d5c <Calculate_Dist+0x274>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	ee07 3a90 	vmov	s15, r3
 8003c5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c62:	ee17 0a90 	vmov	r0, s15
 8003c66:	f7fc fc7f 	bl	8000568 <__aeabi_f2d>
 8003c6a:	a331      	add	r3, pc, #196	; (adr r3, 8003d30 <Calculate_Dist+0x248>)
 8003c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c70:	f7fc fdfc 	bl	800086c <__aeabi_ddiv>
 8003c74:	4602      	mov	r2, r0
 8003c76:	460b      	mov	r3, r1
 8003c78:	4610      	mov	r0, r2
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c80:	00db      	lsls	r3, r3, #3
 8003c82:	33e8      	adds	r3, #232	; 0xe8
 8003c84:	443b      	add	r3, r7
 8003c86:	3be0      	subs	r3, #224	; 0xe0
 8003c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c8c:	f7fc fcc4 	bl	8000618 <__aeabi_dmul>
 8003c90:	4602      	mov	r2, r0
 8003c92:	460b      	mov	r3, r1
 8003c94:	4933      	ldr	r1, [pc, #204]	; (8003d64 <Calculate_Dist+0x27c>)
 8003c96:	e9c1 2300 	strd	r2, r3, [r1]
            distance_travelledB = (float)rightcount / 1552.0 * OutsideLabCircumference[index];  // get 1552 from cnt1B for one
 8003c9a:	4b2e      	ldr	r3, [pc, #184]	; (8003d54 <Calculate_Dist+0x26c>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	ee07 3a90 	vmov	s15, r3
 8003ca2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ca6:	ee17 0a90 	vmov	r0, s15
 8003caa:	f7fc fc5d 	bl	8000568 <__aeabi_f2d>
 8003cae:	f04f 0200 	mov.w	r2, #0
 8003cb2:	4b2d      	ldr	r3, [pc, #180]	; (8003d68 <Calculate_Dist+0x280>)
 8003cb4:	f7fc fdda 	bl	800086c <__aeabi_ddiv>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	460b      	mov	r3, r1
 8003cbc:	4610      	mov	r0, r2
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	33e8      	adds	r3, #232	; 0xe8
 8003cc8:	443b      	add	r3, r7
 8003cca:	3be0      	subs	r3, #224	; 0xe0
 8003ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd0:	f7fc fca2 	bl	8000618 <__aeabi_dmul>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	4924      	ldr	r1, [pc, #144]	; (8003d6c <Calculate_Dist+0x284>)
 8003cda:	e9c1 2300 	strd	r2, r3, [r1]
        }
        //			distance_travelledA=((float)leftcount)/1535.0*20.42;//diameter is 6.5cm
        //			distance_travelledB= (float)rightcount/1552.0*20.42;//get 1552 from cnt1B for one revolution
        averagecount = (leftcount + rightcount) / 2;
 8003cde:	4b1f      	ldr	r3, [pc, #124]	; (8003d5c <Calculate_Dist+0x274>)
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	4b1c      	ldr	r3, [pc, #112]	; (8003d54 <Calculate_Dist+0x26c>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	0fda      	lsrs	r2, r3, #31
 8003cea:	4413      	add	r3, r2
 8003cec:	105b      	asrs	r3, r3, #1
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7fc fc28 	bl	8000544 <__aeabi_i2d>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	491d      	ldr	r1, [pc, #116]	; (8003d70 <Calculate_Dist+0x288>)
 8003cfa:	e9c1 2300 	strd	r2, r3, [r1]
        averagedistance = (distance_travelledA + distance_travelledB) / 2;
 8003cfe:	4b19      	ldr	r3, [pc, #100]	; (8003d64 <Calculate_Dist+0x27c>)
 8003d00:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d04:	4b19      	ldr	r3, [pc, #100]	; (8003d6c <Calculate_Dist+0x284>)
 8003d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0a:	f7fc facf 	bl	80002ac <__adddf3>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	460b      	mov	r3, r1
 8003d12:	4610      	mov	r0, r2
 8003d14:	4619      	mov	r1, r3
 8003d16:	f04f 0200 	mov.w	r2, #0
 8003d1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003d1e:	f7fc fda5 	bl	800086c <__aeabi_ddiv>
 8003d22:	4602      	mov	r2, r0
 8003d24:	460b      	mov	r3, r1
 8003d26:	4913      	ldr	r1, [pc, #76]	; (8003d74 <Calculate_Dist+0x28c>)
 8003d28:	e9c1 2300 	strd	r2, r3, [r1]
        index = (TargetDistance / 10)-1;
 8003d2c:	e6fb      	b.n	8003b26 <Calculate_Dist+0x3e>
 8003d2e:	bf00      	nop
 8003d30:	00000000 	.word	0x00000000
 8003d34:	4097fc00 	.word	0x4097fc00
 8003d38:	0800e300 	.word	0x0800e300
 8003d3c:	0800e348 	.word	0x0800e348
 8003d40:	0800e390 	.word	0x0800e390
 8003d44:	200000b4 	.word	0x200000b4
 8003d48:	cccccccd 	.word	0xcccccccd
 8003d4c:	20000004 	.word	0x20000004
 8003d50:	200002fc 	.word	0x200002fc
 8003d54:	200000cc 	.word	0x200000cc
 8003d58:	200002b4 	.word	0x200002b4
 8003d5c:	200000c8 	.word	0x200000c8
 8003d60:	20000000 	.word	0x20000000
 8003d64:	20000108 	.word	0x20000108
 8003d68:	40984000 	.word	0x40984000
 8003d6c:	20000110 	.word	0x20000110
 8003d70:	200000d8 	.word	0x200000d8
 8003d74:	200000d0 	.word	0x200000d0

08003d78 <UltraSoundRead>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UltraSoundRead */
void UltraSoundRead(void *argument)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b088      	sub	sp, #32
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UltraSoundRead */
    /* Infinite loop */
    uint8_t OLEDStringint[20] = "";
 8003d80:	2300      	movs	r3, #0
 8003d82:	60bb      	str	r3, [r7, #8]
 8003d84:	f107 030c 	add.w	r3, r7, #12
 8003d88:	2200      	movs	r2, #0
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	605a      	str	r2, [r3, #4]
 8003d8e:	609a      	str	r2, [r3, #8]
 8003d90:	60da      	str	r2, [r3, #12]
    int heartbeat = 0;
 8003d92:	2300      	movs	r3, #0
 8003d94:	61fb      	str	r3, [r7, #28]
        //		  if (isMoving) {
        //		  sprintf(OLEDStringint, "Alive: %d\0",heartbeat);
        //		  OLED_ShowString(0, 0, OLEDStringint);
        //		  heartbeat++;

        Ultrasonic_Read();
 8003d96:	f7fd ff5f 	bl	8001c58 <Ultrasonic_Read>
        //		      OLED_ShowString(0,50,OLEDStringint);
        //
        //			  OLED_Refresh_Gram();

        //		  }
        osDelay(20);
 8003d9a:	2014      	movs	r0, #20
 8003d9c:	f006 f940 	bl	800a020 <osDelay>
        Ultrasonic_Read();
 8003da0:	e7f9      	b.n	8003d96 <UltraSoundRead+0x1e>
 8003da2:	0000      	movs	r0, r0
 8003da4:	0000      	movs	r0, r0
	...

08003da8 <IRReadPolling>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_IRReadPolling */
void IRReadPolling(void *argument)
{
 8003da8:	b5b0      	push	{r4, r5, r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
    for (;;)
    {
        if (1)
        {
            //	Left IR Sensor
            HAL_ADC_Start(&hadc1);
 8003db0:	486d      	ldr	r0, [pc, #436]	; (8003f68 <IRReadPolling+0x1c0>)
 8003db2:	f000 ffbb 	bl	8004d2c <HAL_ADC_Start>
            HAL_ADC_PollForConversion(&hadc1, 100);
 8003db6:	2164      	movs	r1, #100	; 0x64
 8003db8:	486b      	ldr	r0, [pc, #428]	; (8003f68 <IRReadPolling+0x1c0>)
 8003dba:	f001 f889 	bl	8004ed0 <HAL_ADC_PollForConversion>
            adcVal1 = HAL_ADC_GetValue(&hadc1); // Raw data
 8003dbe:	486a      	ldr	r0, [pc, #424]	; (8003f68 <IRReadPolling+0x1c0>)
 8003dc0:	f001 f911 	bl	8004fe6 <HAL_ADC_GetValue>
 8003dc4:	6178      	str	r0, [r7, #20]
            voltage1 = (adcVal1 / pow(2, 12)) * 3.3;
 8003dc6:	6978      	ldr	r0, [r7, #20]
 8003dc8:	f7fc fbac 	bl	8000524 <__aeabi_ui2d>
 8003dcc:	f04f 0200 	mov.w	r2, #0
 8003dd0:	4b66      	ldr	r3, [pc, #408]	; (8003f6c <IRReadPolling+0x1c4>)
 8003dd2:	f7fc fd4b 	bl	800086c <__aeabi_ddiv>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	460b      	mov	r3, r1
 8003dda:	4610      	mov	r0, r2
 8003ddc:	4619      	mov	r1, r3
 8003dde:	a358      	add	r3, pc, #352	; (adr r3, 8003f40 <IRReadPolling+0x198>)
 8003de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de4:	f7fc fc18 	bl	8000618 <__aeabi_dmul>
 8003de8:	4602      	mov	r2, r0
 8003dea:	460b      	mov	r3, r1
 8003dec:	4610      	mov	r0, r2
 8003dee:	4619      	mov	r1, r3
 8003df0:	f7fc ff0a 	bl	8000c08 <__aeabi_d2f>
 8003df4:	4603      	mov	r3, r0
 8003df6:	613b      	str	r3, [r7, #16]
            LeftIR = 1 / (0.0140817 * pow(voltage1, 2) + 0.00685361 * voltage1 + 0.012403);
 8003df8:	6938      	ldr	r0, [r7, #16]
 8003dfa:	f7fc fbb5 	bl	8000568 <__aeabi_f2d>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	460b      	mov	r3, r1
 8003e02:	ed9f 1b51 	vldr	d1, [pc, #324]	; 8003f48 <IRReadPolling+0x1a0>
 8003e06:	ec43 2b10 	vmov	d0, r2, r3
 8003e0a:	f009 fa37 	bl	800d27c <pow>
 8003e0e:	ec51 0b10 	vmov	r0, r1, d0
 8003e12:	a34f      	add	r3, pc, #316	; (adr r3, 8003f50 <IRReadPolling+0x1a8>)
 8003e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e18:	f7fc fbfe 	bl	8000618 <__aeabi_dmul>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	460b      	mov	r3, r1
 8003e20:	4614      	mov	r4, r2
 8003e22:	461d      	mov	r5, r3
 8003e24:	6938      	ldr	r0, [r7, #16]
 8003e26:	f7fc fb9f 	bl	8000568 <__aeabi_f2d>
 8003e2a:	a34b      	add	r3, pc, #300	; (adr r3, 8003f58 <IRReadPolling+0x1b0>)
 8003e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e30:	f7fc fbf2 	bl	8000618 <__aeabi_dmul>
 8003e34:	4602      	mov	r2, r0
 8003e36:	460b      	mov	r3, r1
 8003e38:	4620      	mov	r0, r4
 8003e3a:	4629      	mov	r1, r5
 8003e3c:	f7fc fa36 	bl	80002ac <__adddf3>
 8003e40:	4602      	mov	r2, r0
 8003e42:	460b      	mov	r3, r1
 8003e44:	4610      	mov	r0, r2
 8003e46:	4619      	mov	r1, r3
 8003e48:	a345      	add	r3, pc, #276	; (adr r3, 8003f60 <IRReadPolling+0x1b8>)
 8003e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4e:	f7fc fa2d 	bl	80002ac <__adddf3>
 8003e52:	4602      	mov	r2, r0
 8003e54:	460b      	mov	r3, r1
 8003e56:	f04f 0000 	mov.w	r0, #0
 8003e5a:	4945      	ldr	r1, [pc, #276]	; (8003f70 <IRReadPolling+0x1c8>)
 8003e5c:	f7fc fd06 	bl	800086c <__aeabi_ddiv>
 8003e60:	4602      	mov	r2, r0
 8003e62:	460b      	mov	r3, r1
 8003e64:	4610      	mov	r0, r2
 8003e66:	4619      	mov	r1, r3
 8003e68:	f7fc feae 	bl	8000bc8 <__aeabi_d2uiz>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	4b40      	ldr	r3, [pc, #256]	; (8003f74 <IRReadPolling+0x1cc>)
 8003e72:	801a      	strh	r2, [r3, #0]
            //		sprintf(IR_Left_Str, "Left IR: %2d", IR_Left);
            //		OLED_ShowString(10, 40, IR_Left_Str);

            //	Right IR Sensor
            HAL_ADC_Start(&hadc2);
 8003e74:	4840      	ldr	r0, [pc, #256]	; (8003f78 <IRReadPolling+0x1d0>)
 8003e76:	f000 ff59 	bl	8004d2c <HAL_ADC_Start>
            HAL_ADC_PollForConversion(&hadc2, 100);
 8003e7a:	2164      	movs	r1, #100	; 0x64
 8003e7c:	483e      	ldr	r0, [pc, #248]	; (8003f78 <IRReadPolling+0x1d0>)
 8003e7e:	f001 f827 	bl	8004ed0 <HAL_ADC_PollForConversion>
            adcVal2 = HAL_ADC_GetValue(&hadc2); // Raw data
 8003e82:	483d      	ldr	r0, [pc, #244]	; (8003f78 <IRReadPolling+0x1d0>)
 8003e84:	f001 f8af 	bl	8004fe6 <HAL_ADC_GetValue>
 8003e88:	60f8      	str	r0, [r7, #12]
            voltage2 = (adcVal2 / pow(2, 12)) * 3.3;
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f7fc fb4a 	bl	8000524 <__aeabi_ui2d>
 8003e90:	f04f 0200 	mov.w	r2, #0
 8003e94:	4b35      	ldr	r3, [pc, #212]	; (8003f6c <IRReadPolling+0x1c4>)
 8003e96:	f7fc fce9 	bl	800086c <__aeabi_ddiv>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	4610      	mov	r0, r2
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	a327      	add	r3, pc, #156	; (adr r3, 8003f40 <IRReadPolling+0x198>)
 8003ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea8:	f7fc fbb6 	bl	8000618 <__aeabi_dmul>
 8003eac:	4602      	mov	r2, r0
 8003eae:	460b      	mov	r3, r1
 8003eb0:	4610      	mov	r0, r2
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	f7fc fea8 	bl	8000c08 <__aeabi_d2f>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	60bb      	str	r3, [r7, #8]
            RightIR = 1 / (0.0140817 * pow(voltage2, 2) + 0.00685361 * voltage2 + 0.012403);
 8003ebc:	68b8      	ldr	r0, [r7, #8]
 8003ebe:	f7fc fb53 	bl	8000568 <__aeabi_f2d>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	ed9f 1b20 	vldr	d1, [pc, #128]	; 8003f48 <IRReadPolling+0x1a0>
 8003eca:	ec43 2b10 	vmov	d0, r2, r3
 8003ece:	f009 f9d5 	bl	800d27c <pow>
 8003ed2:	ec51 0b10 	vmov	r0, r1, d0
 8003ed6:	a31e      	add	r3, pc, #120	; (adr r3, 8003f50 <IRReadPolling+0x1a8>)
 8003ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003edc:	f7fc fb9c 	bl	8000618 <__aeabi_dmul>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	4614      	mov	r4, r2
 8003ee6:	461d      	mov	r5, r3
 8003ee8:	68b8      	ldr	r0, [r7, #8]
 8003eea:	f7fc fb3d 	bl	8000568 <__aeabi_f2d>
 8003eee:	a31a      	add	r3, pc, #104	; (adr r3, 8003f58 <IRReadPolling+0x1b0>)
 8003ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef4:	f7fc fb90 	bl	8000618 <__aeabi_dmul>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	460b      	mov	r3, r1
 8003efc:	4620      	mov	r0, r4
 8003efe:	4629      	mov	r1, r5
 8003f00:	f7fc f9d4 	bl	80002ac <__adddf3>
 8003f04:	4602      	mov	r2, r0
 8003f06:	460b      	mov	r3, r1
 8003f08:	4610      	mov	r0, r2
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	a314      	add	r3, pc, #80	; (adr r3, 8003f60 <IRReadPolling+0x1b8>)
 8003f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f12:	f7fc f9cb 	bl	80002ac <__adddf3>
 8003f16:	4602      	mov	r2, r0
 8003f18:	460b      	mov	r3, r1
 8003f1a:	f04f 0000 	mov.w	r0, #0
 8003f1e:	4914      	ldr	r1, [pc, #80]	; (8003f70 <IRReadPolling+0x1c8>)
 8003f20:	f7fc fca4 	bl	800086c <__aeabi_ddiv>
 8003f24:	4602      	mov	r2, r0
 8003f26:	460b      	mov	r3, r1
 8003f28:	4610      	mov	r0, r2
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	f7fc fe4c 	bl	8000bc8 <__aeabi_d2uiz>
 8003f30:	4603      	mov	r3, r0
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	4b11      	ldr	r3, [pc, #68]	; (8003f7c <IRReadPolling+0x1d4>)
 8003f36:	801a      	strh	r2, [r3, #0]
            //		sprintf(IR_Right_Str, "Right IR: %2d", RightIR);
            //		OLED_ShowString(10, 50, IR_Right_Str);
        }
        osDelay(30);
 8003f38:	201e      	movs	r0, #30
 8003f3a:	f006 f871 	bl	800a020 <osDelay>
        if (1)
 8003f3e:	e737      	b.n	8003db0 <IRReadPolling+0x8>
 8003f40:	66666666 	.word	0x66666666
 8003f44:	400a6666 	.word	0x400a6666
 8003f48:	00000000 	.word	0x00000000
 8003f4c:	40000000 	.word	0x40000000
 8003f50:	c7c6d38f 	.word	0xc7c6d38f
 8003f54:	3f8cd6dd 	.word	0x3f8cd6dd
 8003f58:	ecf3deb5 	.word	0xecf3deb5
 8003f5c:	3f7c1287 	.word	0x3f7c1287
 8003f60:	7afa7222 	.word	0x7afa7222
 8003f64:	3f8966be 	.word	0x3f8966be
 8003f68:	20000188 	.word	0x20000188
 8003f6c:	40b00000 	.word	0x40b00000
 8003f70:	3ff00000 	.word	0x3ff00000
 8003f74:	200000b6 	.word	0x200000b6
 8003f78:	200001d0 	.word	0x200001d0
 8003f7c:	200000b8 	.word	0x200000b8

08003f80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003f84:	b672      	cpsid	i
}
 8003f86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8003f88:	e7fe      	b.n	8003f88 <Error_Handler+0x8>
	...

08003f8c <OLED_Refresh_Gram>:

#include "../../Core/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 8003f92:	2300      	movs	r3, #0
 8003f94:	71fb      	strb	r3, [r7, #7]
 8003f96:	e026      	b.n	8003fe6 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8003f98:	79fb      	ldrb	r3, [r7, #7]
 8003f9a:	3b50      	subs	r3, #80	; 0x50
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2100      	movs	r1, #0
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f000 f82b 	bl	8003ffc <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	2000      	movs	r0, #0
 8003faa:	f000 f827 	bl	8003ffc <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 8003fae:	2100      	movs	r1, #0
 8003fb0:	2010      	movs	r0, #16
 8003fb2:	f000 f823 	bl	8003ffc <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	71bb      	strb	r3, [r7, #6]
 8003fba:	e00d      	b.n	8003fd8 <OLED_Refresh_Gram+0x4c>
 8003fbc:	79ba      	ldrb	r2, [r7, #6]
 8003fbe:	79fb      	ldrb	r3, [r7, #7]
 8003fc0:	490d      	ldr	r1, [pc, #52]	; (8003ff8 <OLED_Refresh_Gram+0x6c>)
 8003fc2:	00d2      	lsls	r2, r2, #3
 8003fc4:	440a      	add	r2, r1
 8003fc6:	4413      	add	r3, r2
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	2101      	movs	r1, #1
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f000 f815 	bl	8003ffc <OLED_WR_Byte>
 8003fd2:	79bb      	ldrb	r3, [r7, #6]
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	71bb      	strb	r3, [r7, #6]
 8003fd8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	daed      	bge.n	8003fbc <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 8003fe0:	79fb      	ldrb	r3, [r7, #7]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	71fb      	strb	r3, [r7, #7]
 8003fe6:	79fb      	ldrb	r3, [r7, #7]
 8003fe8:	2b07      	cmp	r3, #7
 8003fea:	d9d5      	bls.n	8003f98 <OLED_Refresh_Gram+0xc>
	}   
}
 8003fec:	bf00      	nop
 8003fee:	bf00      	nop
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	20000460 	.word	0x20000460

08003ffc <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	4603      	mov	r3, r0
 8004004:	460a      	mov	r2, r1
 8004006:	71fb      	strb	r3, [r7, #7]
 8004008:	4613      	mov	r3, r2
 800400a:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 800400c:	79bb      	ldrb	r3, [r7, #6]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d006      	beq.n	8004020 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 8004012:	2201      	movs	r2, #1
 8004014:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004018:	481c      	ldr	r0, [pc, #112]	; (800408c <OLED_WR_Byte+0x90>)
 800401a:	f001 fd4f 	bl	8005abc <HAL_GPIO_WritePin>
 800401e:	e005      	b.n	800402c <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 8004020:	2200      	movs	r2, #0
 8004022:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004026:	4819      	ldr	r0, [pc, #100]	; (800408c <OLED_WR_Byte+0x90>)
 8004028:	f001 fd48 	bl	8005abc <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 800402c:	2300      	movs	r3, #0
 800402e:	73fb      	strb	r3, [r7, #15]
 8004030:	e01e      	b.n	8004070 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 8004032:	2200      	movs	r2, #0
 8004034:	2120      	movs	r1, #32
 8004036:	4815      	ldr	r0, [pc, #84]	; (800408c <OLED_WR_Byte+0x90>)
 8004038:	f001 fd40 	bl	8005abc <HAL_GPIO_WritePin>
		if(dat&0x80)
 800403c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004040:	2b00      	cmp	r3, #0
 8004042:	da05      	bge.n	8004050 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8004044:	2201      	movs	r2, #1
 8004046:	2140      	movs	r1, #64	; 0x40
 8004048:	4810      	ldr	r0, [pc, #64]	; (800408c <OLED_WR_Byte+0x90>)
 800404a:	f001 fd37 	bl	8005abc <HAL_GPIO_WritePin>
 800404e:	e004      	b.n	800405a <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 8004050:	2200      	movs	r2, #0
 8004052:	2140      	movs	r1, #64	; 0x40
 8004054:	480d      	ldr	r0, [pc, #52]	; (800408c <OLED_WR_Byte+0x90>)
 8004056:	f001 fd31 	bl	8005abc <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800405a:	2201      	movs	r2, #1
 800405c:	2120      	movs	r1, #32
 800405e:	480b      	ldr	r0, [pc, #44]	; (800408c <OLED_WR_Byte+0x90>)
 8004060:	f001 fd2c 	bl	8005abc <HAL_GPIO_WritePin>
		dat<<=1;   
 8004064:	79fb      	ldrb	r3, [r7, #7]
 8004066:	005b      	lsls	r3, r3, #1
 8004068:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800406a:	7bfb      	ldrb	r3, [r7, #15]
 800406c:	3301      	adds	r3, #1
 800406e:	73fb      	strb	r3, [r7, #15]
 8004070:	7bfb      	ldrb	r3, [r7, #15]
 8004072:	2b07      	cmp	r3, #7
 8004074:	d9dd      	bls.n	8004032 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 8004076:	2201      	movs	r2, #1
 8004078:	f44f 7180 	mov.w	r1, #256	; 0x100
 800407c:	4803      	ldr	r0, [pc, #12]	; (800408c <OLED_WR_Byte+0x90>)
 800407e:	f001 fd1d 	bl	8005abc <HAL_GPIO_WritePin>
} 
 8004082:	bf00      	nop
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	40021000 	.word	0x40021000

08004090 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8004096:	2300      	movs	r3, #0
 8004098:	71fb      	strb	r3, [r7, #7]
 800409a:	e014      	b.n	80040c6 <OLED_Clear+0x36>
 800409c:	2300      	movs	r3, #0
 800409e:	71bb      	strb	r3, [r7, #6]
 80040a0:	e00a      	b.n	80040b8 <OLED_Clear+0x28>
 80040a2:	79ba      	ldrb	r2, [r7, #6]
 80040a4:	79fb      	ldrb	r3, [r7, #7]
 80040a6:	490c      	ldr	r1, [pc, #48]	; (80040d8 <OLED_Clear+0x48>)
 80040a8:	00d2      	lsls	r2, r2, #3
 80040aa:	440a      	add	r2, r1
 80040ac:	4413      	add	r3, r2
 80040ae:	2200      	movs	r2, #0
 80040b0:	701a      	strb	r2, [r3, #0]
 80040b2:	79bb      	ldrb	r3, [r7, #6]
 80040b4:	3301      	adds	r3, #1
 80040b6:	71bb      	strb	r3, [r7, #6]
 80040b8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	daf0      	bge.n	80040a2 <OLED_Clear+0x12>
 80040c0:	79fb      	ldrb	r3, [r7, #7]
 80040c2:	3301      	adds	r3, #1
 80040c4:	71fb      	strb	r3, [r7, #7]
 80040c6:	79fb      	ldrb	r3, [r7, #7]
 80040c8:	2b07      	cmp	r3, #7
 80040ca:	d9e7      	bls.n	800409c <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 80040cc:	f7ff ff5e 	bl	8003f8c <OLED_Refresh_Gram>
}
 80040d0:	bf00      	nop
 80040d2:	3708      	adds	r7, #8
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	20000460 	.word	0x20000460

080040dc <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	4603      	mov	r3, r0
 80040e4:	71fb      	strb	r3, [r7, #7]
 80040e6:	460b      	mov	r3, r1
 80040e8:	71bb      	strb	r3, [r7, #6]
 80040ea:	4613      	mov	r3, r2
 80040ec:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 80040ee:	2300      	movs	r3, #0
 80040f0:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 80040f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	db41      	blt.n	800417e <OLED_DrawPoint+0xa2>
 80040fa:	79bb      	ldrb	r3, [r7, #6]
 80040fc:	2b3f      	cmp	r3, #63	; 0x3f
 80040fe:	d83e      	bhi.n	800417e <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8004100:	79bb      	ldrb	r3, [r7, #6]
 8004102:	08db      	lsrs	r3, r3, #3
 8004104:	b2db      	uxtb	r3, r3
 8004106:	f1c3 0307 	rsb	r3, r3, #7
 800410a:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 800410c:	79bb      	ldrb	r3, [r7, #6]
 800410e:	f003 0307 	and.w	r3, r3, #7
 8004112:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8004114:	7b7b      	ldrb	r3, [r7, #13]
 8004116:	f1c3 0307 	rsb	r3, r3, #7
 800411a:	2201      	movs	r2, #1
 800411c:	fa02 f303 	lsl.w	r3, r2, r3
 8004120:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 8004122:	797b      	ldrb	r3, [r7, #5]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d012      	beq.n	800414e <OLED_DrawPoint+0x72>
 8004128:	79fa      	ldrb	r2, [r7, #7]
 800412a:	7bbb      	ldrb	r3, [r7, #14]
 800412c:	4917      	ldr	r1, [pc, #92]	; (800418c <OLED_DrawPoint+0xb0>)
 800412e:	00d2      	lsls	r2, r2, #3
 8004130:	440a      	add	r2, r1
 8004132:	4413      	add	r3, r2
 8004134:	7818      	ldrb	r0, [r3, #0]
 8004136:	79fa      	ldrb	r2, [r7, #7]
 8004138:	7bbb      	ldrb	r3, [r7, #14]
 800413a:	7bf9      	ldrb	r1, [r7, #15]
 800413c:	4301      	orrs	r1, r0
 800413e:	b2c8      	uxtb	r0, r1
 8004140:	4912      	ldr	r1, [pc, #72]	; (800418c <OLED_DrawPoint+0xb0>)
 8004142:	00d2      	lsls	r2, r2, #3
 8004144:	440a      	add	r2, r1
 8004146:	4413      	add	r3, r2
 8004148:	4602      	mov	r2, r0
 800414a:	701a      	strb	r2, [r3, #0]
 800414c:	e018      	b.n	8004180 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800414e:	79fa      	ldrb	r2, [r7, #7]
 8004150:	7bbb      	ldrb	r3, [r7, #14]
 8004152:	490e      	ldr	r1, [pc, #56]	; (800418c <OLED_DrawPoint+0xb0>)
 8004154:	00d2      	lsls	r2, r2, #3
 8004156:	440a      	add	r2, r1
 8004158:	4413      	add	r3, r2
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	b25a      	sxtb	r2, r3
 800415e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004162:	43db      	mvns	r3, r3
 8004164:	b25b      	sxtb	r3, r3
 8004166:	4013      	ands	r3, r2
 8004168:	b259      	sxtb	r1, r3
 800416a:	79fa      	ldrb	r2, [r7, #7]
 800416c:	7bbb      	ldrb	r3, [r7, #14]
 800416e:	b2c8      	uxtb	r0, r1
 8004170:	4906      	ldr	r1, [pc, #24]	; (800418c <OLED_DrawPoint+0xb0>)
 8004172:	00d2      	lsls	r2, r2, #3
 8004174:	440a      	add	r2, r1
 8004176:	4413      	add	r3, r2
 8004178:	4602      	mov	r2, r0
 800417a:	701a      	strb	r2, [r3, #0]
 800417c:	e000      	b.n	8004180 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800417e:	bf00      	nop
}
 8004180:	3714      	adds	r7, #20
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	20000460 	.word	0x20000460

08004190 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8004190:	b590      	push	{r4, r7, lr}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	4604      	mov	r4, r0
 8004198:	4608      	mov	r0, r1
 800419a:	4611      	mov	r1, r2
 800419c:	461a      	mov	r2, r3
 800419e:	4623      	mov	r3, r4
 80041a0:	71fb      	strb	r3, [r7, #7]
 80041a2:	4603      	mov	r3, r0
 80041a4:	71bb      	strb	r3, [r7, #6]
 80041a6:	460b      	mov	r3, r1
 80041a8:	717b      	strb	r3, [r7, #5]
 80041aa:	4613      	mov	r3, r2
 80041ac:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 80041ae:	79bb      	ldrb	r3, [r7, #6]
 80041b0:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 80041b2:	797b      	ldrb	r3, [r7, #5]
 80041b4:	3b20      	subs	r3, #32
 80041b6:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 80041b8:	2300      	movs	r3, #0
 80041ba:	73bb      	strb	r3, [r7, #14]
 80041bc:	e04d      	b.n	800425a <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 80041be:	793b      	ldrb	r3, [r7, #4]
 80041c0:	2b0c      	cmp	r3, #12
 80041c2:	d10b      	bne.n	80041dc <OLED_ShowChar+0x4c>
 80041c4:	797a      	ldrb	r2, [r7, #5]
 80041c6:	7bb9      	ldrb	r1, [r7, #14]
 80041c8:	4828      	ldr	r0, [pc, #160]	; (800426c <OLED_ShowChar+0xdc>)
 80041ca:	4613      	mov	r3, r2
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	4413      	add	r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	4403      	add	r3, r0
 80041d4:	440b      	add	r3, r1
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	73fb      	strb	r3, [r7, #15]
 80041da:	e007      	b.n	80041ec <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 80041dc:	797a      	ldrb	r2, [r7, #5]
 80041de:	7bbb      	ldrb	r3, [r7, #14]
 80041e0:	4923      	ldr	r1, [pc, #140]	; (8004270 <OLED_ShowChar+0xe0>)
 80041e2:	0112      	lsls	r2, r2, #4
 80041e4:	440a      	add	r2, r1
 80041e6:	4413      	add	r3, r2
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 80041ec:	2300      	movs	r3, #0
 80041ee:	737b      	strb	r3, [r7, #13]
 80041f0:	e02d      	b.n	800424e <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 80041f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	da07      	bge.n	800420a <OLED_ShowChar+0x7a>
 80041fa:	f897 2020 	ldrb.w	r2, [r7, #32]
 80041fe:	79b9      	ldrb	r1, [r7, #6]
 8004200:	79fb      	ldrb	r3, [r7, #7]
 8004202:	4618      	mov	r0, r3
 8004204:	f7ff ff6a 	bl	80040dc <OLED_DrawPoint>
 8004208:	e00c      	b.n	8004224 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800420a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800420e:	2b00      	cmp	r3, #0
 8004210:	bf0c      	ite	eq
 8004212:	2301      	moveq	r3, #1
 8004214:	2300      	movne	r3, #0
 8004216:	b2db      	uxtb	r3, r3
 8004218:	461a      	mov	r2, r3
 800421a:	79b9      	ldrb	r1, [r7, #6]
 800421c:	79fb      	ldrb	r3, [r7, #7]
 800421e:	4618      	mov	r0, r3
 8004220:	f7ff ff5c 	bl	80040dc <OLED_DrawPoint>
			temp<<=1;
 8004224:	7bfb      	ldrb	r3, [r7, #15]
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	73fb      	strb	r3, [r7, #15]
			y++;
 800422a:	79bb      	ldrb	r3, [r7, #6]
 800422c:	3301      	adds	r3, #1
 800422e:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8004230:	79ba      	ldrb	r2, [r7, #6]
 8004232:	7b3b      	ldrb	r3, [r7, #12]
 8004234:	1ad2      	subs	r2, r2, r3
 8004236:	793b      	ldrb	r3, [r7, #4]
 8004238:	429a      	cmp	r2, r3
 800423a:	d105      	bne.n	8004248 <OLED_ShowChar+0xb8>
			{
				y=y0;
 800423c:	7b3b      	ldrb	r3, [r7, #12]
 800423e:	71bb      	strb	r3, [r7, #6]
				x++;
 8004240:	79fb      	ldrb	r3, [r7, #7]
 8004242:	3301      	adds	r3, #1
 8004244:	71fb      	strb	r3, [r7, #7]
				break;
 8004246:	e005      	b.n	8004254 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8004248:	7b7b      	ldrb	r3, [r7, #13]
 800424a:	3301      	adds	r3, #1
 800424c:	737b      	strb	r3, [r7, #13]
 800424e:	7b7b      	ldrb	r3, [r7, #13]
 8004250:	2b07      	cmp	r3, #7
 8004252:	d9ce      	bls.n	80041f2 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8004254:	7bbb      	ldrb	r3, [r7, #14]
 8004256:	3301      	adds	r3, #1
 8004258:	73bb      	strb	r3, [r7, #14]
 800425a:	7bba      	ldrb	r2, [r7, #14]
 800425c:	793b      	ldrb	r3, [r7, #4]
 800425e:	429a      	cmp	r2, r3
 8004260:	d3ad      	bcc.n	80041be <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8004262:	bf00      	nop
 8004264:	bf00      	nop
 8004266:	3714      	adds	r7, #20
 8004268:	46bd      	mov	sp, r7
 800426a:	bd90      	pop	{r4, r7, pc}
 800426c:	0800e510 	.word	0x0800e510
 8004270:	0800e984 	.word	0x0800e984

08004274 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af02      	add	r7, sp, #8
 800427a:	4603      	mov	r3, r0
 800427c:	603a      	str	r2, [r7, #0]
 800427e:	71fb      	strb	r3, [r7, #7]
 8004280:	460b      	mov	r3, r1
 8004282:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8004284:	e01f      	b.n	80042c6 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8004286:	79fb      	ldrb	r3, [r7, #7]
 8004288:	2b7a      	cmp	r3, #122	; 0x7a
 800428a:	d904      	bls.n	8004296 <OLED_ShowString+0x22>
 800428c:	2300      	movs	r3, #0
 800428e:	71fb      	strb	r3, [r7, #7]
 8004290:	79bb      	ldrb	r3, [r7, #6]
 8004292:	3310      	adds	r3, #16
 8004294:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8004296:	79bb      	ldrb	r3, [r7, #6]
 8004298:	2b3a      	cmp	r3, #58	; 0x3a
 800429a:	d905      	bls.n	80042a8 <OLED_ShowString+0x34>
 800429c:	2300      	movs	r3, #0
 800429e:	71fb      	strb	r3, [r7, #7]
 80042a0:	79fb      	ldrb	r3, [r7, #7]
 80042a2:	71bb      	strb	r3, [r7, #6]
 80042a4:	f7ff fef4 	bl	8004090 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	781a      	ldrb	r2, [r3, #0]
 80042ac:	79b9      	ldrb	r1, [r7, #6]
 80042ae:	79f8      	ldrb	r0, [r7, #7]
 80042b0:	2301      	movs	r3, #1
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	230c      	movs	r3, #12
 80042b6:	f7ff ff6b 	bl	8004190 <OLED_ShowChar>
        x+=8;
 80042ba:	79fb      	ldrb	r3, [r7, #7]
 80042bc:	3308      	adds	r3, #8
 80042be:	71fb      	strb	r3, [r7, #7]
        p++;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	3301      	adds	r3, #1
 80042c4:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1db      	bne.n	8004286 <OLED_ShowString+0x12>
    }  
}	 
 80042ce:	bf00      	nop
 80042d0:	bf00      	nop
 80042d2:	3708      	adds	r7, #8
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <OLED_Init>:

void OLED_Init(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 80042dc:	f002 fbd0 	bl	8006a80 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 80042e0:	4b41      	ldr	r3, [pc, #260]	; (80043e8 <OLED_Init+0x110>)
 80042e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e4:	4a40      	ldr	r2, [pc, #256]	; (80043e8 <OLED_Init+0x110>)
 80042e6:	f023 0301 	bic.w	r3, r3, #1
 80042ea:	6713      	str	r3, [r2, #112]	; 0x70
 80042ec:	4b3e      	ldr	r3, [pc, #248]	; (80043e8 <OLED_Init+0x110>)
 80042ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f0:	4a3d      	ldr	r2, [pc, #244]	; (80043e8 <OLED_Init+0x110>)
 80042f2:	f023 0304 	bic.w	r3, r3, #4
 80042f6:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 80042f8:	f002 fbd6 	bl	8006aa8 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 80042fc:	2200      	movs	r2, #0
 80042fe:	2180      	movs	r1, #128	; 0x80
 8004300:	483a      	ldr	r0, [pc, #232]	; (80043ec <OLED_Init+0x114>)
 8004302:	f001 fbdb 	bl	8005abc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8004306:	2064      	movs	r0, #100	; 0x64
 8004308:	f000 fca8 	bl	8004c5c <HAL_Delay>
	OLED_RST_Set();
 800430c:	2201      	movs	r2, #1
 800430e:	2180      	movs	r1, #128	; 0x80
 8004310:	4836      	ldr	r0, [pc, #216]	; (80043ec <OLED_Init+0x114>)
 8004312:	f001 fbd3 	bl	8005abc <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 8004316:	2100      	movs	r1, #0
 8004318:	20ae      	movs	r0, #174	; 0xae
 800431a:	f7ff fe6f 	bl	8003ffc <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800431e:	2100      	movs	r1, #0
 8004320:	20d5      	movs	r0, #213	; 0xd5
 8004322:	f7ff fe6b 	bl	8003ffc <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 8004326:	2100      	movs	r1, #0
 8004328:	2050      	movs	r0, #80	; 0x50
 800432a:	f7ff fe67 	bl	8003ffc <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 800432e:	2100      	movs	r1, #0
 8004330:	20a8      	movs	r0, #168	; 0xa8
 8004332:	f7ff fe63 	bl	8003ffc <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 8004336:	2100      	movs	r1, #0
 8004338:	203f      	movs	r0, #63	; 0x3f
 800433a:	f7ff fe5f 	bl	8003ffc <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 800433e:	2100      	movs	r1, #0
 8004340:	20d3      	movs	r0, #211	; 0xd3
 8004342:	f7ff fe5b 	bl	8003ffc <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 8004346:	2100      	movs	r1, #0
 8004348:	2000      	movs	r0, #0
 800434a:	f7ff fe57 	bl	8003ffc <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800434e:	2100      	movs	r1, #0
 8004350:	2040      	movs	r0, #64	; 0x40
 8004352:	f7ff fe53 	bl	8003ffc <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8004356:	2100      	movs	r1, #0
 8004358:	208d      	movs	r0, #141	; 0x8d
 800435a:	f7ff fe4f 	bl	8003ffc <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800435e:	2100      	movs	r1, #0
 8004360:	2014      	movs	r0, #20
 8004362:	f7ff fe4b 	bl	8003ffc <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8004366:	2100      	movs	r1, #0
 8004368:	2020      	movs	r0, #32
 800436a:	f7ff fe47 	bl	8003ffc <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800436e:	2100      	movs	r1, #0
 8004370:	2002      	movs	r0, #2
 8004372:	f7ff fe43 	bl	8003ffc <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8004376:	2100      	movs	r1, #0
 8004378:	20a1      	movs	r0, #161	; 0xa1
 800437a:	f7ff fe3f 	bl	8003ffc <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800437e:	2100      	movs	r1, #0
 8004380:	20c0      	movs	r0, #192	; 0xc0
 8004382:	f7ff fe3b 	bl	8003ffc <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8004386:	2100      	movs	r1, #0
 8004388:	20da      	movs	r0, #218	; 0xda
 800438a:	f7ff fe37 	bl	8003ffc <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800438e:	2100      	movs	r1, #0
 8004390:	2012      	movs	r0, #18
 8004392:	f7ff fe33 	bl	8003ffc <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8004396:	2100      	movs	r1, #0
 8004398:	2081      	movs	r0, #129	; 0x81
 800439a:	f7ff fe2f 	bl	8003ffc <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800439e:	2100      	movs	r1, #0
 80043a0:	20ef      	movs	r0, #239	; 0xef
 80043a2:	f7ff fe2b 	bl	8003ffc <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 80043a6:	2100      	movs	r1, #0
 80043a8:	20d9      	movs	r0, #217	; 0xd9
 80043aa:	f7ff fe27 	bl	8003ffc <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 80043ae:	2100      	movs	r1, #0
 80043b0:	20f1      	movs	r0, #241	; 0xf1
 80043b2:	f7ff fe23 	bl	8003ffc <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 80043b6:	2100      	movs	r1, #0
 80043b8:	20db      	movs	r0, #219	; 0xdb
 80043ba:	f7ff fe1f 	bl	8003ffc <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 80043be:	2100      	movs	r1, #0
 80043c0:	2030      	movs	r0, #48	; 0x30
 80043c2:	f7ff fe1b 	bl	8003ffc <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 80043c6:	2100      	movs	r1, #0
 80043c8:	20a4      	movs	r0, #164	; 0xa4
 80043ca:	f7ff fe17 	bl	8003ffc <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 80043ce:	2100      	movs	r1, #0
 80043d0:	20a6      	movs	r0, #166	; 0xa6
 80043d2:	f7ff fe13 	bl	8003ffc <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 80043d6:	2100      	movs	r1, #0
 80043d8:	20af      	movs	r0, #175	; 0xaf
 80043da:	f7ff fe0f 	bl	8003ffc <OLED_WR_Byte>
	OLED_Clear(); 
 80043de:	f7ff fe57 	bl	8004090 <OLED_Clear>
}
 80043e2:	bf00      	nop
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	40023800 	.word	0x40023800
 80043ec:	40021000 	.word	0x40021000

080043f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043f6:	2300      	movs	r3, #0
 80043f8:	607b      	str	r3, [r7, #4]
 80043fa:	4b12      	ldr	r3, [pc, #72]	; (8004444 <HAL_MspInit+0x54>)
 80043fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fe:	4a11      	ldr	r2, [pc, #68]	; (8004444 <HAL_MspInit+0x54>)
 8004400:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004404:	6453      	str	r3, [r2, #68]	; 0x44
 8004406:	4b0f      	ldr	r3, [pc, #60]	; (8004444 <HAL_MspInit+0x54>)
 8004408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800440e:	607b      	str	r3, [r7, #4]
 8004410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004412:	2300      	movs	r3, #0
 8004414:	603b      	str	r3, [r7, #0]
 8004416:	4b0b      	ldr	r3, [pc, #44]	; (8004444 <HAL_MspInit+0x54>)
 8004418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441a:	4a0a      	ldr	r2, [pc, #40]	; (8004444 <HAL_MspInit+0x54>)
 800441c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004420:	6413      	str	r3, [r2, #64]	; 0x40
 8004422:	4b08      	ldr	r3, [pc, #32]	; (8004444 <HAL_MspInit+0x54>)
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800442a:	603b      	str	r3, [r7, #0]
 800442c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800442e:	2200      	movs	r2, #0
 8004430:	210f      	movs	r1, #15
 8004432:	f06f 0001 	mvn.w	r0, #1
 8004436:	f001 f8dc 	bl	80055f2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800443a:	bf00      	nop
 800443c:	3708      	adds	r7, #8
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	40023800 	.word	0x40023800

08004448 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b08c      	sub	sp, #48	; 0x30
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004450:	f107 031c 	add.w	r3, r7, #28
 8004454:	2200      	movs	r2, #0
 8004456:	601a      	str	r2, [r3, #0]
 8004458:	605a      	str	r2, [r3, #4]
 800445a:	609a      	str	r2, [r3, #8]
 800445c:	60da      	str	r2, [r3, #12]
 800445e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a2e      	ldr	r2, [pc, #184]	; (8004520 <HAL_ADC_MspInit+0xd8>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d128      	bne.n	80044bc <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800446a:	2300      	movs	r3, #0
 800446c:	61bb      	str	r3, [r7, #24]
 800446e:	4b2d      	ldr	r3, [pc, #180]	; (8004524 <HAL_ADC_MspInit+0xdc>)
 8004470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004472:	4a2c      	ldr	r2, [pc, #176]	; (8004524 <HAL_ADC_MspInit+0xdc>)
 8004474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004478:	6453      	str	r3, [r2, #68]	; 0x44
 800447a:	4b2a      	ldr	r3, [pc, #168]	; (8004524 <HAL_ADC_MspInit+0xdc>)
 800447c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800447e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004482:	61bb      	str	r3, [r7, #24]
 8004484:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004486:	2300      	movs	r3, #0
 8004488:	617b      	str	r3, [r7, #20]
 800448a:	4b26      	ldr	r3, [pc, #152]	; (8004524 <HAL_ADC_MspInit+0xdc>)
 800448c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448e:	4a25      	ldr	r2, [pc, #148]	; (8004524 <HAL_ADC_MspInit+0xdc>)
 8004490:	f043 0304 	orr.w	r3, r3, #4
 8004494:	6313      	str	r3, [r2, #48]	; 0x30
 8004496:	4b23      	ldr	r3, [pc, #140]	; (8004524 <HAL_ADC_MspInit+0xdc>)
 8004498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449a:	f003 0304 	and.w	r3, r3, #4
 800449e:	617b      	str	r3, [r7, #20]
 80044a0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80044a2:	230a      	movs	r3, #10
 80044a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80044a6:	2303      	movs	r3, #3
 80044a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044aa:	2300      	movs	r3, #0
 80044ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80044ae:	f107 031c 	add.w	r3, r7, #28
 80044b2:	4619      	mov	r1, r3
 80044b4:	481c      	ldr	r0, [pc, #112]	; (8004528 <HAL_ADC_MspInit+0xe0>)
 80044b6:	f001 f965 	bl	8005784 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80044ba:	e02c      	b.n	8004516 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a1a      	ldr	r2, [pc, #104]	; (800452c <HAL_ADC_MspInit+0xe4>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d127      	bne.n	8004516 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80044c6:	2300      	movs	r3, #0
 80044c8:	613b      	str	r3, [r7, #16]
 80044ca:	4b16      	ldr	r3, [pc, #88]	; (8004524 <HAL_ADC_MspInit+0xdc>)
 80044cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ce:	4a15      	ldr	r2, [pc, #84]	; (8004524 <HAL_ADC_MspInit+0xdc>)
 80044d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044d4:	6453      	str	r3, [r2, #68]	; 0x44
 80044d6:	4b13      	ldr	r3, [pc, #76]	; (8004524 <HAL_ADC_MspInit+0xdc>)
 80044d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044de:	613b      	str	r3, [r7, #16]
 80044e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044e2:	2300      	movs	r3, #0
 80044e4:	60fb      	str	r3, [r7, #12]
 80044e6:	4b0f      	ldr	r3, [pc, #60]	; (8004524 <HAL_ADC_MspInit+0xdc>)
 80044e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ea:	4a0e      	ldr	r2, [pc, #56]	; (8004524 <HAL_ADC_MspInit+0xdc>)
 80044ec:	f043 0304 	orr.w	r3, r3, #4
 80044f0:	6313      	str	r3, [r2, #48]	; 0x30
 80044f2:	4b0c      	ldr	r3, [pc, #48]	; (8004524 <HAL_ADC_MspInit+0xdc>)
 80044f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f6:	f003 0304 	and.w	r3, r3, #4
 80044fa:	60fb      	str	r3, [r7, #12]
 80044fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80044fe:	2308      	movs	r3, #8
 8004500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004502:	2303      	movs	r3, #3
 8004504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004506:	2300      	movs	r3, #0
 8004508:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800450a:	f107 031c 	add.w	r3, r7, #28
 800450e:	4619      	mov	r1, r3
 8004510:	4805      	ldr	r0, [pc, #20]	; (8004528 <HAL_ADC_MspInit+0xe0>)
 8004512:	f001 f937 	bl	8005784 <HAL_GPIO_Init>
}
 8004516:	bf00      	nop
 8004518:	3730      	adds	r7, #48	; 0x30
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	40012000 	.word	0x40012000
 8004524:	40023800 	.word	0x40023800
 8004528:	40020800 	.word	0x40020800
 800452c:	40012100 	.word	0x40012100

08004530 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b08a      	sub	sp, #40	; 0x28
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004538:	f107 0314 	add.w	r3, r7, #20
 800453c:	2200      	movs	r2, #0
 800453e:	601a      	str	r2, [r3, #0]
 8004540:	605a      	str	r2, [r3, #4]
 8004542:	609a      	str	r2, [r3, #8]
 8004544:	60da      	str	r2, [r3, #12]
 8004546:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a19      	ldr	r2, [pc, #100]	; (80045b4 <HAL_I2C_MspInit+0x84>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d12c      	bne.n	80045ac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004552:	2300      	movs	r3, #0
 8004554:	613b      	str	r3, [r7, #16]
 8004556:	4b18      	ldr	r3, [pc, #96]	; (80045b8 <HAL_I2C_MspInit+0x88>)
 8004558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800455a:	4a17      	ldr	r2, [pc, #92]	; (80045b8 <HAL_I2C_MspInit+0x88>)
 800455c:	f043 0302 	orr.w	r3, r3, #2
 8004560:	6313      	str	r3, [r2, #48]	; 0x30
 8004562:	4b15      	ldr	r3, [pc, #84]	; (80045b8 <HAL_I2C_MspInit+0x88>)
 8004564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	613b      	str	r3, [r7, #16]
 800456c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800456e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004572:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004574:	2312      	movs	r3, #18
 8004576:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004578:	2300      	movs	r3, #0
 800457a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800457c:	2303      	movs	r3, #3
 800457e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004580:	2304      	movs	r3, #4
 8004582:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004584:	f107 0314 	add.w	r3, r7, #20
 8004588:	4619      	mov	r1, r3
 800458a:	480c      	ldr	r0, [pc, #48]	; (80045bc <HAL_I2C_MspInit+0x8c>)
 800458c:	f001 f8fa 	bl	8005784 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004590:	2300      	movs	r3, #0
 8004592:	60fb      	str	r3, [r7, #12]
 8004594:	4b08      	ldr	r3, [pc, #32]	; (80045b8 <HAL_I2C_MspInit+0x88>)
 8004596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004598:	4a07      	ldr	r2, [pc, #28]	; (80045b8 <HAL_I2C_MspInit+0x88>)
 800459a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800459e:	6413      	str	r3, [r2, #64]	; 0x40
 80045a0:	4b05      	ldr	r3, [pc, #20]	; (80045b8 <HAL_I2C_MspInit+0x88>)
 80045a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045a8:	60fb      	str	r3, [r7, #12]
 80045aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80045ac:	bf00      	nop
 80045ae:	3728      	adds	r7, #40	; 0x28
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	40005400 	.word	0x40005400
 80045b8:	40023800 	.word	0x40023800
 80045bc:	40020400 	.word	0x40020400

080045c0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a0b      	ldr	r2, [pc, #44]	; (80045fc <HAL_TIM_PWM_MspInit+0x3c>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d10d      	bne.n	80045ee <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80045d2:	2300      	movs	r3, #0
 80045d4:	60fb      	str	r3, [r7, #12]
 80045d6:	4b0a      	ldr	r3, [pc, #40]	; (8004600 <HAL_TIM_PWM_MspInit+0x40>)
 80045d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045da:	4a09      	ldr	r2, [pc, #36]	; (8004600 <HAL_TIM_PWM_MspInit+0x40>)
 80045dc:	f043 0301 	orr.w	r3, r3, #1
 80045e0:	6453      	str	r3, [r2, #68]	; 0x44
 80045e2:	4b07      	ldr	r3, [pc, #28]	; (8004600 <HAL_TIM_PWM_MspInit+0x40>)
 80045e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	60fb      	str	r3, [r7, #12]
 80045ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80045ee:	bf00      	nop
 80045f0:	3714      	adds	r7, #20
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	40010000 	.word	0x40010000
 8004600:	40023800 	.word	0x40023800

08004604 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b08c      	sub	sp, #48	; 0x30
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800460c:	f107 031c 	add.w	r3, r7, #28
 8004610:	2200      	movs	r2, #0
 8004612:	601a      	str	r2, [r3, #0]
 8004614:	605a      	str	r2, [r3, #4]
 8004616:	609a      	str	r2, [r3, #8]
 8004618:	60da      	str	r2, [r3, #12]
 800461a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004624:	d14b      	bne.n	80046be <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004626:	2300      	movs	r3, #0
 8004628:	61bb      	str	r3, [r7, #24]
 800462a:	4b3f      	ldr	r3, [pc, #252]	; (8004728 <HAL_TIM_Encoder_MspInit+0x124>)
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	4a3e      	ldr	r2, [pc, #248]	; (8004728 <HAL_TIM_Encoder_MspInit+0x124>)
 8004630:	f043 0301 	orr.w	r3, r3, #1
 8004634:	6413      	str	r3, [r2, #64]	; 0x40
 8004636:	4b3c      	ldr	r3, [pc, #240]	; (8004728 <HAL_TIM_Encoder_MspInit+0x124>)
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	61bb      	str	r3, [r7, #24]
 8004640:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004642:	2300      	movs	r3, #0
 8004644:	617b      	str	r3, [r7, #20]
 8004646:	4b38      	ldr	r3, [pc, #224]	; (8004728 <HAL_TIM_Encoder_MspInit+0x124>)
 8004648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464a:	4a37      	ldr	r2, [pc, #220]	; (8004728 <HAL_TIM_Encoder_MspInit+0x124>)
 800464c:	f043 0301 	orr.w	r3, r3, #1
 8004650:	6313      	str	r3, [r2, #48]	; 0x30
 8004652:	4b35      	ldr	r3, [pc, #212]	; (8004728 <HAL_TIM_Encoder_MspInit+0x124>)
 8004654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	617b      	str	r3, [r7, #20]
 800465c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800465e:	2300      	movs	r3, #0
 8004660:	613b      	str	r3, [r7, #16]
 8004662:	4b31      	ldr	r3, [pc, #196]	; (8004728 <HAL_TIM_Encoder_MspInit+0x124>)
 8004664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004666:	4a30      	ldr	r2, [pc, #192]	; (8004728 <HAL_TIM_Encoder_MspInit+0x124>)
 8004668:	f043 0302 	orr.w	r3, r3, #2
 800466c:	6313      	str	r3, [r2, #48]	; 0x30
 800466e:	4b2e      	ldr	r3, [pc, #184]	; (8004728 <HAL_TIM_Encoder_MspInit+0x124>)
 8004670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	613b      	str	r3, [r7, #16]
 8004678:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = Left_Encoder2_Pin;
 800467a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800467e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004680:	2302      	movs	r3, #2
 8004682:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004684:	2300      	movs	r3, #0
 8004686:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004688:	2300      	movs	r3, #0
 800468a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800468c:	2301      	movs	r3, #1
 800468e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Left_Encoder2_GPIO_Port, &GPIO_InitStruct);
 8004690:	f107 031c 	add.w	r3, r7, #28
 8004694:	4619      	mov	r1, r3
 8004696:	4825      	ldr	r0, [pc, #148]	; (800472c <HAL_TIM_Encoder_MspInit+0x128>)
 8004698:	f001 f874 	bl	8005784 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Left_Encoder1_Pin;
 800469c:	2308      	movs	r3, #8
 800469e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046a0:	2302      	movs	r3, #2
 80046a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046a4:	2300      	movs	r3, #0
 80046a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046a8:	2300      	movs	r3, #0
 80046aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80046ac:	2301      	movs	r3, #1
 80046ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Left_Encoder1_GPIO_Port, &GPIO_InitStruct);
 80046b0:	f107 031c 	add.w	r3, r7, #28
 80046b4:	4619      	mov	r1, r3
 80046b6:	481e      	ldr	r0, [pc, #120]	; (8004730 <HAL_TIM_Encoder_MspInit+0x12c>)
 80046b8:	f001 f864 	bl	8005784 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80046bc:	e030      	b.n	8004720 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a1c      	ldr	r2, [pc, #112]	; (8004734 <HAL_TIM_Encoder_MspInit+0x130>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d12b      	bne.n	8004720 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80046c8:	2300      	movs	r3, #0
 80046ca:	60fb      	str	r3, [r7, #12]
 80046cc:	4b16      	ldr	r3, [pc, #88]	; (8004728 <HAL_TIM_Encoder_MspInit+0x124>)
 80046ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d0:	4a15      	ldr	r2, [pc, #84]	; (8004728 <HAL_TIM_Encoder_MspInit+0x124>)
 80046d2:	f043 0302 	orr.w	r3, r3, #2
 80046d6:	6413      	str	r3, [r2, #64]	; 0x40
 80046d8:	4b13      	ldr	r3, [pc, #76]	; (8004728 <HAL_TIM_Encoder_MspInit+0x124>)
 80046da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	60fb      	str	r3, [r7, #12]
 80046e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046e4:	2300      	movs	r3, #0
 80046e6:	60bb      	str	r3, [r7, #8]
 80046e8:	4b0f      	ldr	r3, [pc, #60]	; (8004728 <HAL_TIM_Encoder_MspInit+0x124>)
 80046ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ec:	4a0e      	ldr	r2, [pc, #56]	; (8004728 <HAL_TIM_Encoder_MspInit+0x124>)
 80046ee:	f043 0301 	orr.w	r3, r3, #1
 80046f2:	6313      	str	r3, [r2, #48]	; 0x30
 80046f4:	4b0c      	ldr	r3, [pc, #48]	; (8004728 <HAL_TIM_Encoder_MspInit+0x124>)
 80046f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	60bb      	str	r3, [r7, #8]
 80046fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Right_Encoder2_Pin|Right_Encoder1_Pin;
 8004700:	23c0      	movs	r3, #192	; 0xc0
 8004702:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004704:	2302      	movs	r3, #2
 8004706:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004708:	2300      	movs	r3, #0
 800470a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800470c:	2300      	movs	r3, #0
 800470e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004710:	2302      	movs	r3, #2
 8004712:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004714:	f107 031c 	add.w	r3, r7, #28
 8004718:	4619      	mov	r1, r3
 800471a:	4804      	ldr	r0, [pc, #16]	; (800472c <HAL_TIM_Encoder_MspInit+0x128>)
 800471c:	f001 f832 	bl	8005784 <HAL_GPIO_Init>
}
 8004720:	bf00      	nop
 8004722:	3730      	adds	r7, #48	; 0x30
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	40023800 	.word	0x40023800
 800472c:	40020000 	.word	0x40020000
 8004730:	40020400 	.word	0x40020400
 8004734:	40000400 	.word	0x40000400

08004738 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b08a      	sub	sp, #40	; 0x28
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004740:	f107 0314 	add.w	r3, r7, #20
 8004744:	2200      	movs	r2, #0
 8004746:	601a      	str	r2, [r3, #0]
 8004748:	605a      	str	r2, [r3, #4]
 800474a:	609a      	str	r2, [r3, #8]
 800474c:	60da      	str	r2, [r3, #12]
 800474e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a1d      	ldr	r2, [pc, #116]	; (80047cc <HAL_TIM_IC_MspInit+0x94>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d134      	bne.n	80047c4 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800475a:	2300      	movs	r3, #0
 800475c:	613b      	str	r3, [r7, #16]
 800475e:	4b1c      	ldr	r3, [pc, #112]	; (80047d0 <HAL_TIM_IC_MspInit+0x98>)
 8004760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004762:	4a1b      	ldr	r2, [pc, #108]	; (80047d0 <HAL_TIM_IC_MspInit+0x98>)
 8004764:	f043 0304 	orr.w	r3, r3, #4
 8004768:	6413      	str	r3, [r2, #64]	; 0x40
 800476a:	4b19      	ldr	r3, [pc, #100]	; (80047d0 <HAL_TIM_IC_MspInit+0x98>)
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	f003 0304 	and.w	r3, r3, #4
 8004772:	613b      	str	r3, [r7, #16]
 8004774:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004776:	2300      	movs	r3, #0
 8004778:	60fb      	str	r3, [r7, #12]
 800477a:	4b15      	ldr	r3, [pc, #84]	; (80047d0 <HAL_TIM_IC_MspInit+0x98>)
 800477c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477e:	4a14      	ldr	r2, [pc, #80]	; (80047d0 <HAL_TIM_IC_MspInit+0x98>)
 8004780:	f043 0308 	orr.w	r3, r3, #8
 8004784:	6313      	str	r3, [r2, #48]	; 0x30
 8004786:	4b12      	ldr	r3, [pc, #72]	; (80047d0 <HAL_TIM_IC_MspInit+0x98>)
 8004788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478a:	f003 0308 	and.w	r3, r3, #8
 800478e:	60fb      	str	r3, [r7, #12]
 8004790:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = ECHO_Pin;
 8004792:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004796:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004798:	2302      	movs	r3, #2
 800479a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800479c:	2300      	movs	r3, #0
 800479e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047a0:	2300      	movs	r3, #0
 80047a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80047a4:	2302      	movs	r3, #2
 80047a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 80047a8:	f107 0314 	add.w	r3, r7, #20
 80047ac:	4619      	mov	r1, r3
 80047ae:	4809      	ldr	r0, [pc, #36]	; (80047d4 <HAL_TIM_IC_MspInit+0x9c>)
 80047b0:	f000 ffe8 	bl	8005784 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80047b4:	2200      	movs	r2, #0
 80047b6:	2105      	movs	r1, #5
 80047b8:	201e      	movs	r0, #30
 80047ba:	f000 ff1a 	bl	80055f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80047be:	201e      	movs	r0, #30
 80047c0:	f000 ff33 	bl	800562a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80047c4:	bf00      	nop
 80047c6:	3728      	adds	r7, #40	; 0x28
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	40000800 	.word	0x40000800
 80047d0:	40023800 	.word	0x40023800
 80047d4:	40020c00 	.word	0x40020c00

080047d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b08a      	sub	sp, #40	; 0x28
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047e0:	f107 0314 	add.w	r3, r7, #20
 80047e4:	2200      	movs	r2, #0
 80047e6:	601a      	str	r2, [r3, #0]
 80047e8:	605a      	str	r2, [r3, #4]
 80047ea:	609a      	str	r2, [r3, #8]
 80047ec:	60da      	str	r2, [r3, #12]
 80047ee:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM8)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a19      	ldr	r2, [pc, #100]	; (800485c <HAL_TIM_Base_MspInit+0x84>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d12b      	bne.n	8004852 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80047fa:	2300      	movs	r3, #0
 80047fc:	613b      	str	r3, [r7, #16]
 80047fe:	4b18      	ldr	r3, [pc, #96]	; (8004860 <HAL_TIM_Base_MspInit+0x88>)
 8004800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004802:	4a17      	ldr	r2, [pc, #92]	; (8004860 <HAL_TIM_Base_MspInit+0x88>)
 8004804:	f043 0302 	orr.w	r3, r3, #2
 8004808:	6453      	str	r3, [r2, #68]	; 0x44
 800480a:	4b15      	ldr	r3, [pc, #84]	; (8004860 <HAL_TIM_Base_MspInit+0x88>)
 800480c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	613b      	str	r3, [r7, #16]
 8004814:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004816:	2300      	movs	r3, #0
 8004818:	60fb      	str	r3, [r7, #12]
 800481a:	4b11      	ldr	r3, [pc, #68]	; (8004860 <HAL_TIM_Base_MspInit+0x88>)
 800481c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481e:	4a10      	ldr	r2, [pc, #64]	; (8004860 <HAL_TIM_Base_MspInit+0x88>)
 8004820:	f043 0304 	orr.w	r3, r3, #4
 8004824:	6313      	str	r3, [r2, #48]	; 0x30
 8004826:	4b0e      	ldr	r3, [pc, #56]	; (8004860 <HAL_TIM_Base_MspInit+0x88>)
 8004828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800482a:	f003 0304 	and.w	r3, r3, #4
 800482e:	60fb      	str	r3, [r7, #12]
 8004830:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8004832:	23c0      	movs	r3, #192	; 0xc0
 8004834:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004836:	2302      	movs	r3, #2
 8004838:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800483a:	2300      	movs	r3, #0
 800483c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800483e:	2300      	movs	r3, #0
 8004840:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004842:	2303      	movs	r3, #3
 8004844:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004846:	f107 0314 	add.w	r3, r7, #20
 800484a:	4619      	mov	r1, r3
 800484c:	4805      	ldr	r0, [pc, #20]	; (8004864 <HAL_TIM_Base_MspInit+0x8c>)
 800484e:	f000 ff99 	bl	8005784 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004852:	bf00      	nop
 8004854:	3728      	adds	r7, #40	; 0x28
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	40010400 	.word	0x40010400
 8004860:	40023800 	.word	0x40023800
 8004864:	40020800 	.word	0x40020800

08004868 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b088      	sub	sp, #32
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004870:	f107 030c 	add.w	r3, r7, #12
 8004874:	2200      	movs	r2, #0
 8004876:	601a      	str	r2, [r3, #0]
 8004878:	605a      	str	r2, [r3, #4]
 800487a:	609a      	str	r2, [r3, #8]
 800487c:	60da      	str	r2, [r3, #12]
 800487e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a12      	ldr	r2, [pc, #72]	; (80048d0 <HAL_TIM_MspPostInit+0x68>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d11e      	bne.n	80048c8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800488a:	2300      	movs	r3, #0
 800488c:	60bb      	str	r3, [r7, #8]
 800488e:	4b11      	ldr	r3, [pc, #68]	; (80048d4 <HAL_TIM_MspPostInit+0x6c>)
 8004890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004892:	4a10      	ldr	r2, [pc, #64]	; (80048d4 <HAL_TIM_MspPostInit+0x6c>)
 8004894:	f043 0310 	orr.w	r3, r3, #16
 8004898:	6313      	str	r3, [r2, #48]	; 0x30
 800489a:	4b0e      	ldr	r3, [pc, #56]	; (80048d4 <HAL_TIM_MspPostInit+0x6c>)
 800489c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489e:	f003 0310 	and.w	r3, r3, #16
 80048a2:	60bb      	str	r3, [r7, #8]
 80048a4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = SERVO_Pin;
 80048a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80048aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048ac:	2302      	movs	r3, #2
 80048ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048b0:	2300      	movs	r3, #0
 80048b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048b4:	2300      	movs	r3, #0
 80048b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80048b8:	2301      	movs	r3, #1
 80048ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 80048bc:	f107 030c 	add.w	r3, r7, #12
 80048c0:	4619      	mov	r1, r3
 80048c2:	4805      	ldr	r0, [pc, #20]	; (80048d8 <HAL_TIM_MspPostInit+0x70>)
 80048c4:	f000 ff5e 	bl	8005784 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80048c8:	bf00      	nop
 80048ca:	3720      	adds	r7, #32
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	40010000 	.word	0x40010000
 80048d4:	40023800 	.word	0x40023800
 80048d8:	40021000 	.word	0x40021000

080048dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b08a      	sub	sp, #40	; 0x28
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048e4:	f107 0314 	add.w	r3, r7, #20
 80048e8:	2200      	movs	r2, #0
 80048ea:	601a      	str	r2, [r3, #0]
 80048ec:	605a      	str	r2, [r3, #4]
 80048ee:	609a      	str	r2, [r3, #8]
 80048f0:	60da      	str	r2, [r3, #12]
 80048f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a1d      	ldr	r2, [pc, #116]	; (8004970 <HAL_UART_MspInit+0x94>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d134      	bne.n	8004968 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80048fe:	2300      	movs	r3, #0
 8004900:	613b      	str	r3, [r7, #16]
 8004902:	4b1c      	ldr	r3, [pc, #112]	; (8004974 <HAL_UART_MspInit+0x98>)
 8004904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004906:	4a1b      	ldr	r2, [pc, #108]	; (8004974 <HAL_UART_MspInit+0x98>)
 8004908:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800490c:	6413      	str	r3, [r2, #64]	; 0x40
 800490e:	4b19      	ldr	r3, [pc, #100]	; (8004974 <HAL_UART_MspInit+0x98>)
 8004910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004912:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004916:	613b      	str	r3, [r7, #16]
 8004918:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800491a:	2300      	movs	r3, #0
 800491c:	60fb      	str	r3, [r7, #12]
 800491e:	4b15      	ldr	r3, [pc, #84]	; (8004974 <HAL_UART_MspInit+0x98>)
 8004920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004922:	4a14      	ldr	r2, [pc, #80]	; (8004974 <HAL_UART_MspInit+0x98>)
 8004924:	f043 0304 	orr.w	r3, r3, #4
 8004928:	6313      	str	r3, [r2, #48]	; 0x30
 800492a:	4b12      	ldr	r3, [pc, #72]	; (8004974 <HAL_UART_MspInit+0x98>)
 800492c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492e:	f003 0304 	and.w	r3, r3, #4
 8004932:	60fb      	str	r3, [r7, #12]
 8004934:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004936:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800493a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800493c:	2302      	movs	r3, #2
 800493e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004940:	2300      	movs	r3, #0
 8004942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004944:	2303      	movs	r3, #3
 8004946:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004948:	2307      	movs	r3, #7
 800494a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800494c:	f107 0314 	add.w	r3, r7, #20
 8004950:	4619      	mov	r1, r3
 8004952:	4809      	ldr	r0, [pc, #36]	; (8004978 <HAL_UART_MspInit+0x9c>)
 8004954:	f000 ff16 	bl	8005784 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004958:	2200      	movs	r2, #0
 800495a:	2105      	movs	r1, #5
 800495c:	2027      	movs	r0, #39	; 0x27
 800495e:	f000 fe48 	bl	80055f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004962:	2027      	movs	r0, #39	; 0x27
 8004964:	f000 fe61 	bl	800562a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004968:	bf00      	nop
 800496a:	3728      	adds	r7, #40	; 0x28
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	40004800 	.word	0x40004800
 8004974:	40023800 	.word	0x40023800
 8004978:	40020800 	.word	0x40020800

0800497c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800497c:	b480      	push	{r7}
 800497e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004980:	e7fe      	b.n	8004980 <NMI_Handler+0x4>

08004982 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004982:	b480      	push	{r7}
 8004984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004986:	e7fe      	b.n	8004986 <HardFault_Handler+0x4>

08004988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004988:	b480      	push	{r7}
 800498a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800498c:	e7fe      	b.n	800498c <MemManage_Handler+0x4>

0800498e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800498e:	b480      	push	{r7}
 8004990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004992:	e7fe      	b.n	8004992 <BusFault_Handler+0x4>

08004994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004994:	b480      	push	{r7}
 8004996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004998:	e7fe      	b.n	8004998 <UsageFault_Handler+0x4>

0800499a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800499a:	b480      	push	{r7}
 800499c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800499e:	bf00      	nop
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049ac:	f000 f936 	bl	8004c1c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80049b0:	f006 ff44 	bl	800b83c <xTaskGetSchedulerState>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d001      	beq.n	80049be <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80049ba:	f007 fd2d 	bl	800c418 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80049be:	bf00      	nop
 80049c0:	bd80      	pop	{r7, pc}
	...

080049c4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80049c8:	4802      	ldr	r0, [pc, #8]	; (80049d4 <TIM4_IRQHandler+0x10>)
 80049ca:	f003 f8eb 	bl	8007ba4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80049ce:	bf00      	nop
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	20000344 	.word	0x20000344

080049d8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80049dc:	4802      	ldr	r0, [pc, #8]	; (80049e8 <USART3_IRQHandler+0x10>)
 80049de:	f004 faa7 	bl	8008f30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80049e2:	bf00      	nop
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	200003d4 	.word	0x200003d4

080049ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80049f0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80049f4:	f001 f896 	bl	8005b24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80049f8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80049fc:	f001 f892 	bl	8005b24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004a00:	bf00      	nop
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <strtoint>:
#include "string.h";
#include "string_func.h"

int strtoint(char* str){
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
    int num = 0;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	60fb      	str	r3, [r7, #12]
    for (int i = 0; str[i] != '\0'; i++) {
 8004a10:	2300      	movs	r3, #0
 8004a12:	60bb      	str	r3, [r7, #8]
 8004a14:	e00f      	b.n	8004a36 <strtoint+0x32>
        num = num * 10 + (str[i] - 48);
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	4413      	add	r3, r2
 8004a1e:	005b      	lsls	r3, r3, #1
 8004a20:	4619      	mov	r1, r3
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	4413      	add	r3, r2
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	3b30      	subs	r3, #48	; 0x30
 8004a2c:	440b      	add	r3, r1
 8004a2e:	60fb      	str	r3, [r7, #12]
    for (int i = 0; str[i] != '\0'; i++) {
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	3301      	adds	r3, #1
 8004a34:	60bb      	str	r3, [r7, #8]
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1e9      	bne.n	8004a16 <strtoint+0x12>
    }
    return num;
 8004a42:	68fb      	ldr	r3, [r7, #12]
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3714      	adds	r7, #20
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <slice>:

void slice(const char* str, char* result, size_t start, size_t end)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
 8004a5c:	603b      	str	r3, [r7, #0]
	int length = strlen(result);
 8004a5e:	68b8      	ldr	r0, [r7, #8]
 8004a60:	f7fb fbc0 	bl	80001e4 <strlen>
 8004a64:	4603      	mov	r3, r0
 8004a66:	617b      	str	r3, [r7, #20]
    strncpy(result, str + start, end - start);
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	18d1      	adds	r1, r2, r3
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	461a      	mov	r2, r3
 8004a76:	68b8      	ldr	r0, [r7, #8]
 8004a78:	f008 f81c 	bl	800cab4 <strncpy>
    result[end-start] = '\0'; //we're all stupid
 8004a7c:	683a      	ldr	r2, [r7, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	68ba      	ldr	r2, [r7, #8]
 8004a84:	4413      	add	r3, r2
 8004a86:	2200      	movs	r2, #0
 8004a88:	701a      	strb	r2, [r3, #0]
}
 8004a8a:	bf00      	nop
 8004a8c:	3718      	adds	r7, #24
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
	...

08004a94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004a9c:	4a14      	ldr	r2, [pc, #80]	; (8004af0 <_sbrk+0x5c>)
 8004a9e:	4b15      	ldr	r3, [pc, #84]	; (8004af4 <_sbrk+0x60>)
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004aa8:	4b13      	ldr	r3, [pc, #76]	; (8004af8 <_sbrk+0x64>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d102      	bne.n	8004ab6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004ab0:	4b11      	ldr	r3, [pc, #68]	; (8004af8 <_sbrk+0x64>)
 8004ab2:	4a12      	ldr	r2, [pc, #72]	; (8004afc <_sbrk+0x68>)
 8004ab4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004ab6:	4b10      	ldr	r3, [pc, #64]	; (8004af8 <_sbrk+0x64>)
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	4413      	add	r3, r2
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d207      	bcs.n	8004ad4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004ac4:	f008 f81a 	bl	800cafc <__errno>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	220c      	movs	r2, #12
 8004acc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004ace:	f04f 33ff 	mov.w	r3, #4294967295
 8004ad2:	e009      	b.n	8004ae8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004ad4:	4b08      	ldr	r3, [pc, #32]	; (8004af8 <_sbrk+0x64>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004ada:	4b07      	ldr	r3, [pc, #28]	; (8004af8 <_sbrk+0x64>)
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	4a05      	ldr	r2, [pc, #20]	; (8004af8 <_sbrk+0x64>)
 8004ae4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3718      	adds	r7, #24
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	20020000 	.word	0x20020000
 8004af4:	00000400 	.word	0x00000400
 8004af8:	20000860 	.word	0x20000860
 8004afc:	20005300 	.word	0x20005300

08004b00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b00:	b480      	push	{r7}
 8004b02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b04:	4b06      	ldr	r3, [pc, #24]	; (8004b20 <SystemInit+0x20>)
 8004b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b0a:	4a05      	ldr	r2, [pc, #20]	; (8004b20 <SystemInit+0x20>)
 8004b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004b14:	bf00      	nop
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	e000ed00 	.word	0xe000ed00

08004b24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004b24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004b5c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004b28:	f7ff ffea 	bl	8004b00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004b2c:	480c      	ldr	r0, [pc, #48]	; (8004b60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004b2e:	490d      	ldr	r1, [pc, #52]	; (8004b64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004b30:	4a0d      	ldr	r2, [pc, #52]	; (8004b68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004b32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004b34:	e002      	b.n	8004b3c <LoopCopyDataInit>

08004b36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b3a:	3304      	adds	r3, #4

08004b3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b40:	d3f9      	bcc.n	8004b36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b42:	4a0a      	ldr	r2, [pc, #40]	; (8004b6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004b44:	4c0a      	ldr	r4, [pc, #40]	; (8004b70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004b46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b48:	e001      	b.n	8004b4e <LoopFillZerobss>

08004b4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b4c:	3204      	adds	r2, #4

08004b4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b50:	d3fb      	bcc.n	8004b4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004b52:	f007 ffd9 	bl	800cb08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004b56:	f7fc fa3b 	bl	8000fd0 <main>
  bx  lr    
 8004b5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004b5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004b60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b64:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8004b68:	0800f000 	.word	0x0800f000
  ldr r2, =_sbss
 8004b6c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8004b70:	20005300 	.word	0x20005300

08004b74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b74:	e7fe      	b.n	8004b74 <ADC_IRQHandler>
	...

08004b78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004b7c:	4b0e      	ldr	r3, [pc, #56]	; (8004bb8 <HAL_Init+0x40>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a0d      	ldr	r2, [pc, #52]	; (8004bb8 <HAL_Init+0x40>)
 8004b82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004b88:	4b0b      	ldr	r3, [pc, #44]	; (8004bb8 <HAL_Init+0x40>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a0a      	ldr	r2, [pc, #40]	; (8004bb8 <HAL_Init+0x40>)
 8004b8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b94:	4b08      	ldr	r3, [pc, #32]	; (8004bb8 <HAL_Init+0x40>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a07      	ldr	r2, [pc, #28]	; (8004bb8 <HAL_Init+0x40>)
 8004b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ba0:	2003      	movs	r0, #3
 8004ba2:	f000 fd1b 	bl	80055dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004ba6:	200f      	movs	r0, #15
 8004ba8:	f000 f808 	bl	8004bbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004bac:	f7ff fc20 	bl	80043f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	40023c00 	.word	0x40023c00

08004bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004bc4:	4b12      	ldr	r3, [pc, #72]	; (8004c10 <HAL_InitTick+0x54>)
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	4b12      	ldr	r3, [pc, #72]	; (8004c14 <HAL_InitTick+0x58>)
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	4619      	mov	r1, r3
 8004bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004bd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f000 fd33 	bl	8005646 <HAL_SYSTICK_Config>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e00e      	b.n	8004c08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2b0f      	cmp	r3, #15
 8004bee:	d80a      	bhi.n	8004c06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	6879      	ldr	r1, [r7, #4]
 8004bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf8:	f000 fcfb 	bl	80055f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004bfc:	4a06      	ldr	r2, [pc, #24]	; (8004c18 <HAL_InitTick+0x5c>)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004c02:	2300      	movs	r3, #0
 8004c04:	e000      	b.n	8004c08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3708      	adds	r7, #8
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	2000000c 	.word	0x2000000c
 8004c14:	20000014 	.word	0x20000014
 8004c18:	20000010 	.word	0x20000010

08004c1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c20:	4b06      	ldr	r3, [pc, #24]	; (8004c3c <HAL_IncTick+0x20>)
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	461a      	mov	r2, r3
 8004c26:	4b06      	ldr	r3, [pc, #24]	; (8004c40 <HAL_IncTick+0x24>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	4a04      	ldr	r2, [pc, #16]	; (8004c40 <HAL_IncTick+0x24>)
 8004c2e:	6013      	str	r3, [r2, #0]
}
 8004c30:	bf00      	nop
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	20000014 	.word	0x20000014
 8004c40:	20000864 	.word	0x20000864

08004c44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c44:	b480      	push	{r7}
 8004c46:	af00      	add	r7, sp, #0
  return uwTick;
 8004c48:	4b03      	ldr	r3, [pc, #12]	; (8004c58 <HAL_GetTick+0x14>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	20000864 	.word	0x20000864

08004c5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c64:	f7ff ffee 	bl	8004c44 <HAL_GetTick>
 8004c68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c74:	d005      	beq.n	8004c82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c76:	4b0a      	ldr	r3, [pc, #40]	; (8004ca0 <HAL_Delay+0x44>)
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	4413      	add	r3, r2
 8004c80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004c82:	bf00      	nop
 8004c84:	f7ff ffde 	bl	8004c44 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d8f7      	bhi.n	8004c84 <HAL_Delay+0x28>
  {
  }
}
 8004c94:	bf00      	nop
 8004c96:	bf00      	nop
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	20000014 	.word	0x20000014

08004ca4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004cac:	2300      	movs	r3, #0
 8004cae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d101      	bne.n	8004cba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e033      	b.n	8004d22 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d109      	bne.n	8004cd6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f7ff fbc0 	bl	8004448 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cda:	f003 0310 	and.w	r3, r3, #16
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d118      	bne.n	8004d14 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004cea:	f023 0302 	bic.w	r3, r3, #2
 8004cee:	f043 0202 	orr.w	r2, r3, #2
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 faa4 	bl	8005244 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	f023 0303 	bic.w	r3, r3, #3
 8004d0a:	f043 0201 	orr.w	r2, r3, #1
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	641a      	str	r2, [r3, #64]	; 0x40
 8004d12:	e001      	b.n	8004d18 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
	...

08004d2c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004d34:	2300      	movs	r3, #0
 8004d36:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d101      	bne.n	8004d46 <HAL_ADC_Start+0x1a>
 8004d42:	2302      	movs	r3, #2
 8004d44:	e0b2      	b.n	8004eac <HAL_ADC_Start+0x180>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f003 0301 	and.w	r3, r3, #1
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d018      	beq.n	8004d8e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689a      	ldr	r2, [r3, #8]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f042 0201 	orr.w	r2, r2, #1
 8004d6a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004d6c:	4b52      	ldr	r3, [pc, #328]	; (8004eb8 <HAL_ADC_Start+0x18c>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a52      	ldr	r2, [pc, #328]	; (8004ebc <HAL_ADC_Start+0x190>)
 8004d72:	fba2 2303 	umull	r2, r3, r2, r3
 8004d76:	0c9a      	lsrs	r2, r3, #18
 8004d78:	4613      	mov	r3, r2
 8004d7a:	005b      	lsls	r3, r3, #1
 8004d7c:	4413      	add	r3, r2
 8004d7e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004d80:	e002      	b.n	8004d88 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	3b01      	subs	r3, #1
 8004d86:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1f9      	bne.n	8004d82 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f003 0301 	and.w	r3, r3, #1
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d17a      	bne.n	8004e92 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004da4:	f023 0301 	bic.w	r3, r3, #1
 8004da8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d007      	beq.n	8004dce <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004dc6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dda:	d106      	bne.n	8004dea <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de0:	f023 0206 	bic.w	r2, r3, #6
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	645a      	str	r2, [r3, #68]	; 0x44
 8004de8:	e002      	b.n	8004df0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004df8:	4b31      	ldr	r3, [pc, #196]	; (8004ec0 <HAL_ADC_Start+0x194>)
 8004dfa:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004e04:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f003 031f 	and.w	r3, r3, #31
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d12a      	bne.n	8004e68 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a2b      	ldr	r2, [pc, #172]	; (8004ec4 <HAL_ADC_Start+0x198>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d015      	beq.n	8004e48 <HAL_ADC_Start+0x11c>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a29      	ldr	r2, [pc, #164]	; (8004ec8 <HAL_ADC_Start+0x19c>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d105      	bne.n	8004e32 <HAL_ADC_Start+0x106>
 8004e26:	4b26      	ldr	r3, [pc, #152]	; (8004ec0 <HAL_ADC_Start+0x194>)
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f003 031f 	and.w	r3, r3, #31
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00a      	beq.n	8004e48 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a25      	ldr	r2, [pc, #148]	; (8004ecc <HAL_ADC_Start+0x1a0>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d136      	bne.n	8004eaa <HAL_ADC_Start+0x17e>
 8004e3c:	4b20      	ldr	r3, [pc, #128]	; (8004ec0 <HAL_ADC_Start+0x194>)
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f003 0310 	and.w	r3, r3, #16
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d130      	bne.n	8004eaa <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d129      	bne.n	8004eaa <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	689a      	ldr	r2, [r3, #8]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004e64:	609a      	str	r2, [r3, #8]
 8004e66:	e020      	b.n	8004eaa <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a15      	ldr	r2, [pc, #84]	; (8004ec4 <HAL_ADC_Start+0x198>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d11b      	bne.n	8004eaa <HAL_ADC_Start+0x17e>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d114      	bne.n	8004eaa <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	689a      	ldr	r2, [r3, #8]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004e8e:	609a      	str	r2, [r3, #8]
 8004e90:	e00b      	b.n	8004eaa <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e96:	f043 0210 	orr.w	r2, r3, #16
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea2:	f043 0201 	orr.w	r2, r3, #1
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3714      	adds	r7, #20
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr
 8004eb8:	2000000c 	.word	0x2000000c
 8004ebc:	431bde83 	.word	0x431bde83
 8004ec0:	40012300 	.word	0x40012300
 8004ec4:	40012000 	.word	0x40012000
 8004ec8:	40012100 	.word	0x40012100
 8004ecc:	40012200 	.word	0x40012200

08004ed0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004eda:	2300      	movs	r3, #0
 8004edc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eec:	d113      	bne.n	8004f16 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004ef8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004efc:	d10b      	bne.n	8004f16 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f02:	f043 0220 	orr.w	r2, r3, #32
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	e063      	b.n	8004fde <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004f16:	f7ff fe95 	bl	8004c44 <HAL_GetTick>
 8004f1a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004f1c:	e021      	b.n	8004f62 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f24:	d01d      	beq.n	8004f62 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d007      	beq.n	8004f3c <HAL_ADC_PollForConversion+0x6c>
 8004f2c:	f7ff fe8a 	bl	8004c44 <HAL_GetTick>
 8004f30:	4602      	mov	r2, r0
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	683a      	ldr	r2, [r7, #0]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d212      	bcs.n	8004f62 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d00b      	beq.n	8004f62 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4e:	f043 0204 	orr.w	r2, r3, #4
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e03d      	b.n	8004fde <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0302 	and.w	r3, r3, #2
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d1d6      	bne.n	8004f1e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f06f 0212 	mvn.w	r2, #18
 8004f78:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d123      	bne.n	8004fdc <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d11f      	bne.n	8004fdc <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d006      	beq.n	8004fb8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d111      	bne.n	8004fdc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d105      	bne.n	8004fdc <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd4:	f043 0201 	orr.w	r2, r3, #1
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004fe6:	b480      	push	{r7}
 8004fe8:	b083      	sub	sp, #12
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr

08005000 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800500a:	2300      	movs	r3, #0
 800500c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005014:	2b01      	cmp	r3, #1
 8005016:	d101      	bne.n	800501c <HAL_ADC_ConfigChannel+0x1c>
 8005018:	2302      	movs	r3, #2
 800501a:	e105      	b.n	8005228 <HAL_ADC_ConfigChannel+0x228>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2b09      	cmp	r3, #9
 800502a:	d925      	bls.n	8005078 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68d9      	ldr	r1, [r3, #12]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	b29b      	uxth	r3, r3
 8005038:	461a      	mov	r2, r3
 800503a:	4613      	mov	r3, r2
 800503c:	005b      	lsls	r3, r3, #1
 800503e:	4413      	add	r3, r2
 8005040:	3b1e      	subs	r3, #30
 8005042:	2207      	movs	r2, #7
 8005044:	fa02 f303 	lsl.w	r3, r2, r3
 8005048:	43da      	mvns	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	400a      	ands	r2, r1
 8005050:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68d9      	ldr	r1, [r3, #12]
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	689a      	ldr	r2, [r3, #8]
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	b29b      	uxth	r3, r3
 8005062:	4618      	mov	r0, r3
 8005064:	4603      	mov	r3, r0
 8005066:	005b      	lsls	r3, r3, #1
 8005068:	4403      	add	r3, r0
 800506a:	3b1e      	subs	r3, #30
 800506c:	409a      	lsls	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	60da      	str	r2, [r3, #12]
 8005076:	e022      	b.n	80050be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6919      	ldr	r1, [r3, #16]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	b29b      	uxth	r3, r3
 8005084:	461a      	mov	r2, r3
 8005086:	4613      	mov	r3, r2
 8005088:	005b      	lsls	r3, r3, #1
 800508a:	4413      	add	r3, r2
 800508c:	2207      	movs	r2, #7
 800508e:	fa02 f303 	lsl.w	r3, r2, r3
 8005092:	43da      	mvns	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	400a      	ands	r2, r1
 800509a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6919      	ldr	r1, [r3, #16]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	689a      	ldr	r2, [r3, #8]
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	4618      	mov	r0, r3
 80050ae:	4603      	mov	r3, r0
 80050b0:	005b      	lsls	r3, r3, #1
 80050b2:	4403      	add	r3, r0
 80050b4:	409a      	lsls	r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	430a      	orrs	r2, r1
 80050bc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	2b06      	cmp	r3, #6
 80050c4:	d824      	bhi.n	8005110 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	4613      	mov	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4413      	add	r3, r2
 80050d6:	3b05      	subs	r3, #5
 80050d8:	221f      	movs	r2, #31
 80050da:	fa02 f303 	lsl.w	r3, r2, r3
 80050de:	43da      	mvns	r2, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	400a      	ands	r2, r1
 80050e6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	4618      	mov	r0, r3
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	685a      	ldr	r2, [r3, #4]
 80050fa:	4613      	mov	r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	4413      	add	r3, r2
 8005100:	3b05      	subs	r3, #5
 8005102:	fa00 f203 	lsl.w	r2, r0, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	430a      	orrs	r2, r1
 800510c:	635a      	str	r2, [r3, #52]	; 0x34
 800510e:	e04c      	b.n	80051aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	2b0c      	cmp	r3, #12
 8005116:	d824      	bhi.n	8005162 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	685a      	ldr	r2, [r3, #4]
 8005122:	4613      	mov	r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4413      	add	r3, r2
 8005128:	3b23      	subs	r3, #35	; 0x23
 800512a:	221f      	movs	r2, #31
 800512c:	fa02 f303 	lsl.w	r3, r2, r3
 8005130:	43da      	mvns	r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	400a      	ands	r2, r1
 8005138:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	b29b      	uxth	r3, r3
 8005146:	4618      	mov	r0, r3
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	685a      	ldr	r2, [r3, #4]
 800514c:	4613      	mov	r3, r2
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	4413      	add	r3, r2
 8005152:	3b23      	subs	r3, #35	; 0x23
 8005154:	fa00 f203 	lsl.w	r2, r0, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	430a      	orrs	r2, r1
 800515e:	631a      	str	r2, [r3, #48]	; 0x30
 8005160:	e023      	b.n	80051aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	4613      	mov	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4413      	add	r3, r2
 8005172:	3b41      	subs	r3, #65	; 0x41
 8005174:	221f      	movs	r2, #31
 8005176:	fa02 f303 	lsl.w	r3, r2, r3
 800517a:	43da      	mvns	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	400a      	ands	r2, r1
 8005182:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	b29b      	uxth	r3, r3
 8005190:	4618      	mov	r0, r3
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	4613      	mov	r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	4413      	add	r3, r2
 800519c:	3b41      	subs	r3, #65	; 0x41
 800519e:	fa00 f203 	lsl.w	r2, r0, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	430a      	orrs	r2, r1
 80051a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80051aa:	4b22      	ldr	r3, [pc, #136]	; (8005234 <HAL_ADC_ConfigChannel+0x234>)
 80051ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a21      	ldr	r2, [pc, #132]	; (8005238 <HAL_ADC_ConfigChannel+0x238>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d109      	bne.n	80051cc <HAL_ADC_ConfigChannel+0x1cc>
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2b12      	cmp	r3, #18
 80051be:	d105      	bne.n	80051cc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a19      	ldr	r2, [pc, #100]	; (8005238 <HAL_ADC_ConfigChannel+0x238>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d123      	bne.n	800521e <HAL_ADC_ConfigChannel+0x21e>
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2b10      	cmp	r3, #16
 80051dc:	d003      	beq.n	80051e6 <HAL_ADC_ConfigChannel+0x1e6>
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2b11      	cmp	r3, #17
 80051e4:	d11b      	bne.n	800521e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2b10      	cmp	r3, #16
 80051f8:	d111      	bne.n	800521e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80051fa:	4b10      	ldr	r3, [pc, #64]	; (800523c <HAL_ADC_ConfigChannel+0x23c>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a10      	ldr	r2, [pc, #64]	; (8005240 <HAL_ADC_ConfigChannel+0x240>)
 8005200:	fba2 2303 	umull	r2, r3, r2, r3
 8005204:	0c9a      	lsrs	r2, r3, #18
 8005206:	4613      	mov	r3, r2
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	4413      	add	r3, r2
 800520c:	005b      	lsls	r3, r3, #1
 800520e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005210:	e002      	b.n	8005218 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	3b01      	subs	r3, #1
 8005216:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1f9      	bne.n	8005212 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3714      	adds	r7, #20
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr
 8005234:	40012300 	.word	0x40012300
 8005238:	40012000 	.word	0x40012000
 800523c:	2000000c 	.word	0x2000000c
 8005240:	431bde83 	.word	0x431bde83

08005244 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800524c:	4b79      	ldr	r3, [pc, #484]	; (8005434 <ADC_Init+0x1f0>)
 800524e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	431a      	orrs	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	685a      	ldr	r2, [r3, #4]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005278:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	6859      	ldr	r1, [r3, #4]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	021a      	lsls	r2, r3, #8
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	430a      	orrs	r2, r1
 800528c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	685a      	ldr	r2, [r3, #4]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800529c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	6859      	ldr	r1, [r3, #4]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	689a      	ldr	r2, [r3, #8]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	430a      	orrs	r2, r1
 80052ae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	689a      	ldr	r2, [r3, #8]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	6899      	ldr	r1, [r3, #8]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68da      	ldr	r2, [r3, #12]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	430a      	orrs	r2, r1
 80052d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d6:	4a58      	ldr	r2, [pc, #352]	; (8005438 <ADC_Init+0x1f4>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d022      	beq.n	8005322 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689a      	ldr	r2, [r3, #8]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80052ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	6899      	ldr	r1, [r3, #8]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	430a      	orrs	r2, r1
 80052fc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	689a      	ldr	r2, [r3, #8]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800530c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6899      	ldr	r1, [r3, #8]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	430a      	orrs	r2, r1
 800531e:	609a      	str	r2, [r3, #8]
 8005320:	e00f      	b.n	8005342 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	689a      	ldr	r2, [r3, #8]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005330:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	689a      	ldr	r2, [r3, #8]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005340:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	689a      	ldr	r2, [r3, #8]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f022 0202 	bic.w	r2, r2, #2
 8005350:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	6899      	ldr	r1, [r3, #8]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	7e1b      	ldrb	r3, [r3, #24]
 800535c:	005a      	lsls	r2, r3, #1
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	430a      	orrs	r2, r1
 8005364:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 3020 	ldrb.w	r3, [r3, #32]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d01b      	beq.n	80053a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685a      	ldr	r2, [r3, #4]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800537e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800538e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6859      	ldr	r1, [r3, #4]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539a:	3b01      	subs	r3, #1
 800539c:	035a      	lsls	r2, r3, #13
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	430a      	orrs	r2, r1
 80053a4:	605a      	str	r2, [r3, #4]
 80053a6:	e007      	b.n	80053b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	685a      	ldr	r2, [r3, #4]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80053c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	69db      	ldr	r3, [r3, #28]
 80053d2:	3b01      	subs	r3, #1
 80053d4:	051a      	lsls	r2, r3, #20
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	430a      	orrs	r2, r1
 80053dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	689a      	ldr	r2, [r3, #8]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80053ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	6899      	ldr	r1, [r3, #8]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80053fa:	025a      	lsls	r2, r3, #9
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	430a      	orrs	r2, r1
 8005402:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	689a      	ldr	r2, [r3, #8]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005412:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	6899      	ldr	r1, [r3, #8]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	029a      	lsls	r2, r3, #10
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	430a      	orrs	r2, r1
 8005426:	609a      	str	r2, [r3, #8]
}
 8005428:	bf00      	nop
 800542a:	3714      	adds	r7, #20
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr
 8005434:	40012300 	.word	0x40012300
 8005438:	0f000001 	.word	0x0f000001

0800543c <__NVIC_SetPriorityGrouping>:
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f003 0307 	and.w	r3, r3, #7
 800544a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800544c:	4b0c      	ldr	r3, [pc, #48]	; (8005480 <__NVIC_SetPriorityGrouping+0x44>)
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005452:	68ba      	ldr	r2, [r7, #8]
 8005454:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005458:	4013      	ands	r3, r2
 800545a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005464:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800546c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800546e:	4a04      	ldr	r2, [pc, #16]	; (8005480 <__NVIC_SetPriorityGrouping+0x44>)
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	60d3      	str	r3, [r2, #12]
}
 8005474:	bf00      	nop
 8005476:	3714      	adds	r7, #20
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr
 8005480:	e000ed00 	.word	0xe000ed00

08005484 <__NVIC_GetPriorityGrouping>:
{
 8005484:	b480      	push	{r7}
 8005486:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005488:	4b04      	ldr	r3, [pc, #16]	; (800549c <__NVIC_GetPriorityGrouping+0x18>)
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	0a1b      	lsrs	r3, r3, #8
 800548e:	f003 0307 	and.w	r3, r3, #7
}
 8005492:	4618      	mov	r0, r3
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr
 800549c:	e000ed00 	.word	0xe000ed00

080054a0 <__NVIC_EnableIRQ>:
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	4603      	mov	r3, r0
 80054a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	db0b      	blt.n	80054ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054b2:	79fb      	ldrb	r3, [r7, #7]
 80054b4:	f003 021f 	and.w	r2, r3, #31
 80054b8:	4907      	ldr	r1, [pc, #28]	; (80054d8 <__NVIC_EnableIRQ+0x38>)
 80054ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054be:	095b      	lsrs	r3, r3, #5
 80054c0:	2001      	movs	r0, #1
 80054c2:	fa00 f202 	lsl.w	r2, r0, r2
 80054c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80054ca:	bf00      	nop
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr
 80054d6:	bf00      	nop
 80054d8:	e000e100 	.word	0xe000e100

080054dc <__NVIC_SetPriority>:
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	4603      	mov	r3, r0
 80054e4:	6039      	str	r1, [r7, #0]
 80054e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	db0a      	blt.n	8005506 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	b2da      	uxtb	r2, r3
 80054f4:	490c      	ldr	r1, [pc, #48]	; (8005528 <__NVIC_SetPriority+0x4c>)
 80054f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054fa:	0112      	lsls	r2, r2, #4
 80054fc:	b2d2      	uxtb	r2, r2
 80054fe:	440b      	add	r3, r1
 8005500:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005504:	e00a      	b.n	800551c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	b2da      	uxtb	r2, r3
 800550a:	4908      	ldr	r1, [pc, #32]	; (800552c <__NVIC_SetPriority+0x50>)
 800550c:	79fb      	ldrb	r3, [r7, #7]
 800550e:	f003 030f 	and.w	r3, r3, #15
 8005512:	3b04      	subs	r3, #4
 8005514:	0112      	lsls	r2, r2, #4
 8005516:	b2d2      	uxtb	r2, r2
 8005518:	440b      	add	r3, r1
 800551a:	761a      	strb	r2, [r3, #24]
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr
 8005528:	e000e100 	.word	0xe000e100
 800552c:	e000ed00 	.word	0xe000ed00

08005530 <NVIC_EncodePriority>:
{
 8005530:	b480      	push	{r7}
 8005532:	b089      	sub	sp, #36	; 0x24
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f003 0307 	and.w	r3, r3, #7
 8005542:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005544:	69fb      	ldr	r3, [r7, #28]
 8005546:	f1c3 0307 	rsb	r3, r3, #7
 800554a:	2b04      	cmp	r3, #4
 800554c:	bf28      	it	cs
 800554e:	2304      	movcs	r3, #4
 8005550:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	3304      	adds	r3, #4
 8005556:	2b06      	cmp	r3, #6
 8005558:	d902      	bls.n	8005560 <NVIC_EncodePriority+0x30>
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	3b03      	subs	r3, #3
 800555e:	e000      	b.n	8005562 <NVIC_EncodePriority+0x32>
 8005560:	2300      	movs	r3, #0
 8005562:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005564:	f04f 32ff 	mov.w	r2, #4294967295
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	fa02 f303 	lsl.w	r3, r2, r3
 800556e:	43da      	mvns	r2, r3
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	401a      	ands	r2, r3
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005578:	f04f 31ff 	mov.w	r1, #4294967295
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	fa01 f303 	lsl.w	r3, r1, r3
 8005582:	43d9      	mvns	r1, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005588:	4313      	orrs	r3, r2
}
 800558a:	4618      	mov	r0, r3
 800558c:	3724      	adds	r7, #36	; 0x24
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
	...

08005598 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	3b01      	subs	r3, #1
 80055a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055a8:	d301      	bcc.n	80055ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80055aa:	2301      	movs	r3, #1
 80055ac:	e00f      	b.n	80055ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80055ae:	4a0a      	ldr	r2, [pc, #40]	; (80055d8 <SysTick_Config+0x40>)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	3b01      	subs	r3, #1
 80055b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80055b6:	210f      	movs	r1, #15
 80055b8:	f04f 30ff 	mov.w	r0, #4294967295
 80055bc:	f7ff ff8e 	bl	80054dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80055c0:	4b05      	ldr	r3, [pc, #20]	; (80055d8 <SysTick_Config+0x40>)
 80055c2:	2200      	movs	r2, #0
 80055c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80055c6:	4b04      	ldr	r3, [pc, #16]	; (80055d8 <SysTick_Config+0x40>)
 80055c8:	2207      	movs	r2, #7
 80055ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3708      	adds	r7, #8
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	e000e010 	.word	0xe000e010

080055dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f7ff ff29 	bl	800543c <__NVIC_SetPriorityGrouping>
}
 80055ea:	bf00      	nop
 80055ec:	3708      	adds	r7, #8
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b086      	sub	sp, #24
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	4603      	mov	r3, r0
 80055fa:	60b9      	str	r1, [r7, #8]
 80055fc:	607a      	str	r2, [r7, #4]
 80055fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005600:	2300      	movs	r3, #0
 8005602:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005604:	f7ff ff3e 	bl	8005484 <__NVIC_GetPriorityGrouping>
 8005608:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	68b9      	ldr	r1, [r7, #8]
 800560e:	6978      	ldr	r0, [r7, #20]
 8005610:	f7ff ff8e 	bl	8005530 <NVIC_EncodePriority>
 8005614:	4602      	mov	r2, r0
 8005616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800561a:	4611      	mov	r1, r2
 800561c:	4618      	mov	r0, r3
 800561e:	f7ff ff5d 	bl	80054dc <__NVIC_SetPriority>
}
 8005622:	bf00      	nop
 8005624:	3718      	adds	r7, #24
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b082      	sub	sp, #8
 800562e:	af00      	add	r7, sp, #0
 8005630:	4603      	mov	r3, r0
 8005632:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005638:	4618      	mov	r0, r3
 800563a:	f7ff ff31 	bl	80054a0 <__NVIC_EnableIRQ>
}
 800563e:	bf00      	nop
 8005640:	3708      	adds	r7, #8
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005646:	b580      	push	{r7, lr}
 8005648:	b082      	sub	sp, #8
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f7ff ffa2 	bl	8005598 <SysTick_Config>
 8005654:	4603      	mov	r3, r0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3708      	adds	r7, #8
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b084      	sub	sp, #16
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800566a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800566c:	f7ff faea 	bl	8004c44 <HAL_GetTick>
 8005670:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005678:	b2db      	uxtb	r3, r3
 800567a:	2b02      	cmp	r3, #2
 800567c:	d008      	beq.n	8005690 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2280      	movs	r2, #128	; 0x80
 8005682:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e052      	b.n	8005736 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f022 0216 	bic.w	r2, r2, #22
 800569e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	695a      	ldr	r2, [r3, #20]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056ae:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d103      	bne.n	80056c0 <HAL_DMA_Abort+0x62>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d007      	beq.n	80056d0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f022 0208 	bic.w	r2, r2, #8
 80056ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f022 0201 	bic.w	r2, r2, #1
 80056de:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056e0:	e013      	b.n	800570a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80056e2:	f7ff faaf 	bl	8004c44 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	2b05      	cmp	r3, #5
 80056ee:	d90c      	bls.n	800570a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2220      	movs	r2, #32
 80056f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2203      	movs	r2, #3
 80056fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e015      	b.n	8005736 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 0301 	and.w	r3, r3, #1
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1e4      	bne.n	80056e2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800571c:	223f      	movs	r2, #63	; 0x3f
 800571e:	409a      	lsls	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3710      	adds	r7, #16
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800573e:	b480      	push	{r7}
 8005740:	b083      	sub	sp, #12
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800574c:	b2db      	uxtb	r3, r3
 800574e:	2b02      	cmp	r3, #2
 8005750:	d004      	beq.n	800575c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2280      	movs	r2, #128	; 0x80
 8005756:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e00c      	b.n	8005776 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2205      	movs	r2, #5
 8005760:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f022 0201 	bic.w	r2, r2, #1
 8005772:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	370c      	adds	r7, #12
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
	...

08005784 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005784:	b480      	push	{r7}
 8005786:	b089      	sub	sp, #36	; 0x24
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800578e:	2300      	movs	r3, #0
 8005790:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005792:	2300      	movs	r3, #0
 8005794:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005796:	2300      	movs	r3, #0
 8005798:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800579a:	2300      	movs	r3, #0
 800579c:	61fb      	str	r3, [r7, #28]
 800579e:	e16b      	b.n	8005a78 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80057a0:	2201      	movs	r2, #1
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	fa02 f303 	lsl.w	r3, r2, r3
 80057a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	4013      	ands	r3, r2
 80057b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	f040 815a 	bne.w	8005a72 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f003 0303 	and.w	r3, r3, #3
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d005      	beq.n	80057d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d130      	bne.n	8005838 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	005b      	lsls	r3, r3, #1
 80057e0:	2203      	movs	r2, #3
 80057e2:	fa02 f303 	lsl.w	r3, r2, r3
 80057e6:	43db      	mvns	r3, r3
 80057e8:	69ba      	ldr	r2, [r7, #24]
 80057ea:	4013      	ands	r3, r2
 80057ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	68da      	ldr	r2, [r3, #12]
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	005b      	lsls	r3, r3, #1
 80057f6:	fa02 f303 	lsl.w	r3, r2, r3
 80057fa:	69ba      	ldr	r2, [r7, #24]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	69ba      	ldr	r2, [r7, #24]
 8005804:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800580c:	2201      	movs	r2, #1
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	fa02 f303 	lsl.w	r3, r2, r3
 8005814:	43db      	mvns	r3, r3
 8005816:	69ba      	ldr	r2, [r7, #24]
 8005818:	4013      	ands	r3, r2
 800581a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	091b      	lsrs	r3, r3, #4
 8005822:	f003 0201 	and.w	r2, r3, #1
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	fa02 f303 	lsl.w	r3, r2, r3
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	4313      	orrs	r3, r2
 8005830:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	69ba      	ldr	r2, [r7, #24]
 8005836:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f003 0303 	and.w	r3, r3, #3
 8005840:	2b03      	cmp	r3, #3
 8005842:	d017      	beq.n	8005874 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	005b      	lsls	r3, r3, #1
 800584e:	2203      	movs	r2, #3
 8005850:	fa02 f303 	lsl.w	r3, r2, r3
 8005854:	43db      	mvns	r3, r3
 8005856:	69ba      	ldr	r2, [r7, #24]
 8005858:	4013      	ands	r3, r2
 800585a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	689a      	ldr	r2, [r3, #8]
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	005b      	lsls	r3, r3, #1
 8005864:	fa02 f303 	lsl.w	r3, r2, r3
 8005868:	69ba      	ldr	r2, [r7, #24]
 800586a:	4313      	orrs	r3, r2
 800586c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	69ba      	ldr	r2, [r7, #24]
 8005872:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f003 0303 	and.w	r3, r3, #3
 800587c:	2b02      	cmp	r3, #2
 800587e:	d123      	bne.n	80058c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	08da      	lsrs	r2, r3, #3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	3208      	adds	r2, #8
 8005888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800588c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	f003 0307 	and.w	r3, r3, #7
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	220f      	movs	r2, #15
 8005898:	fa02 f303 	lsl.w	r3, r2, r3
 800589c:	43db      	mvns	r3, r3
 800589e:	69ba      	ldr	r2, [r7, #24]
 80058a0:	4013      	ands	r3, r2
 80058a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	691a      	ldr	r2, [r3, #16]
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	f003 0307 	and.w	r3, r3, #7
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	fa02 f303 	lsl.w	r3, r2, r3
 80058b4:	69ba      	ldr	r2, [r7, #24]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	08da      	lsrs	r2, r3, #3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	3208      	adds	r2, #8
 80058c2:	69b9      	ldr	r1, [r7, #24]
 80058c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	005b      	lsls	r3, r3, #1
 80058d2:	2203      	movs	r2, #3
 80058d4:	fa02 f303 	lsl.w	r3, r2, r3
 80058d8:	43db      	mvns	r3, r3
 80058da:	69ba      	ldr	r2, [r7, #24]
 80058dc:	4013      	ands	r3, r2
 80058de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f003 0203 	and.w	r2, r3, #3
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	005b      	lsls	r3, r3, #1
 80058ec:	fa02 f303 	lsl.w	r3, r2, r3
 80058f0:	69ba      	ldr	r2, [r7, #24]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	69ba      	ldr	r2, [r7, #24]
 80058fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005904:	2b00      	cmp	r3, #0
 8005906:	f000 80b4 	beq.w	8005a72 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800590a:	2300      	movs	r3, #0
 800590c:	60fb      	str	r3, [r7, #12]
 800590e:	4b60      	ldr	r3, [pc, #384]	; (8005a90 <HAL_GPIO_Init+0x30c>)
 8005910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005912:	4a5f      	ldr	r2, [pc, #380]	; (8005a90 <HAL_GPIO_Init+0x30c>)
 8005914:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005918:	6453      	str	r3, [r2, #68]	; 0x44
 800591a:	4b5d      	ldr	r3, [pc, #372]	; (8005a90 <HAL_GPIO_Init+0x30c>)
 800591c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800591e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005922:	60fb      	str	r3, [r7, #12]
 8005924:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005926:	4a5b      	ldr	r2, [pc, #364]	; (8005a94 <HAL_GPIO_Init+0x310>)
 8005928:	69fb      	ldr	r3, [r7, #28]
 800592a:	089b      	lsrs	r3, r3, #2
 800592c:	3302      	adds	r3, #2
 800592e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005932:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	f003 0303 	and.w	r3, r3, #3
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	220f      	movs	r2, #15
 800593e:	fa02 f303 	lsl.w	r3, r2, r3
 8005942:	43db      	mvns	r3, r3
 8005944:	69ba      	ldr	r2, [r7, #24]
 8005946:	4013      	ands	r3, r2
 8005948:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a52      	ldr	r2, [pc, #328]	; (8005a98 <HAL_GPIO_Init+0x314>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d02b      	beq.n	80059aa <HAL_GPIO_Init+0x226>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a51      	ldr	r2, [pc, #324]	; (8005a9c <HAL_GPIO_Init+0x318>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d025      	beq.n	80059a6 <HAL_GPIO_Init+0x222>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a50      	ldr	r2, [pc, #320]	; (8005aa0 <HAL_GPIO_Init+0x31c>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d01f      	beq.n	80059a2 <HAL_GPIO_Init+0x21e>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a4f      	ldr	r2, [pc, #316]	; (8005aa4 <HAL_GPIO_Init+0x320>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d019      	beq.n	800599e <HAL_GPIO_Init+0x21a>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a4e      	ldr	r2, [pc, #312]	; (8005aa8 <HAL_GPIO_Init+0x324>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d013      	beq.n	800599a <HAL_GPIO_Init+0x216>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a4d      	ldr	r2, [pc, #308]	; (8005aac <HAL_GPIO_Init+0x328>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d00d      	beq.n	8005996 <HAL_GPIO_Init+0x212>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a4c      	ldr	r2, [pc, #304]	; (8005ab0 <HAL_GPIO_Init+0x32c>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d007      	beq.n	8005992 <HAL_GPIO_Init+0x20e>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a4b      	ldr	r2, [pc, #300]	; (8005ab4 <HAL_GPIO_Init+0x330>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d101      	bne.n	800598e <HAL_GPIO_Init+0x20a>
 800598a:	2307      	movs	r3, #7
 800598c:	e00e      	b.n	80059ac <HAL_GPIO_Init+0x228>
 800598e:	2308      	movs	r3, #8
 8005990:	e00c      	b.n	80059ac <HAL_GPIO_Init+0x228>
 8005992:	2306      	movs	r3, #6
 8005994:	e00a      	b.n	80059ac <HAL_GPIO_Init+0x228>
 8005996:	2305      	movs	r3, #5
 8005998:	e008      	b.n	80059ac <HAL_GPIO_Init+0x228>
 800599a:	2304      	movs	r3, #4
 800599c:	e006      	b.n	80059ac <HAL_GPIO_Init+0x228>
 800599e:	2303      	movs	r3, #3
 80059a0:	e004      	b.n	80059ac <HAL_GPIO_Init+0x228>
 80059a2:	2302      	movs	r3, #2
 80059a4:	e002      	b.n	80059ac <HAL_GPIO_Init+0x228>
 80059a6:	2301      	movs	r3, #1
 80059a8:	e000      	b.n	80059ac <HAL_GPIO_Init+0x228>
 80059aa:	2300      	movs	r3, #0
 80059ac:	69fa      	ldr	r2, [r7, #28]
 80059ae:	f002 0203 	and.w	r2, r2, #3
 80059b2:	0092      	lsls	r2, r2, #2
 80059b4:	4093      	lsls	r3, r2
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80059bc:	4935      	ldr	r1, [pc, #212]	; (8005a94 <HAL_GPIO_Init+0x310>)
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	089b      	lsrs	r3, r3, #2
 80059c2:	3302      	adds	r3, #2
 80059c4:	69ba      	ldr	r2, [r7, #24]
 80059c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80059ca:	4b3b      	ldr	r3, [pc, #236]	; (8005ab8 <HAL_GPIO_Init+0x334>)
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	43db      	mvns	r3, r3
 80059d4:	69ba      	ldr	r2, [r7, #24]
 80059d6:	4013      	ands	r3, r2
 80059d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d003      	beq.n	80059ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80059e6:	69ba      	ldr	r2, [r7, #24]
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	4313      	orrs	r3, r2
 80059ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80059ee:	4a32      	ldr	r2, [pc, #200]	; (8005ab8 <HAL_GPIO_Init+0x334>)
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80059f4:	4b30      	ldr	r3, [pc, #192]	; (8005ab8 <HAL_GPIO_Init+0x334>)
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	43db      	mvns	r3, r3
 80059fe:	69ba      	ldr	r2, [r7, #24]
 8005a00:	4013      	ands	r3, r2
 8005a02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d003      	beq.n	8005a18 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005a10:	69ba      	ldr	r2, [r7, #24]
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005a18:	4a27      	ldr	r2, [pc, #156]	; (8005ab8 <HAL_GPIO_Init+0x334>)
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005a1e:	4b26      	ldr	r3, [pc, #152]	; (8005ab8 <HAL_GPIO_Init+0x334>)
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	43db      	mvns	r3, r3
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d003      	beq.n	8005a42 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005a3a:	69ba      	ldr	r2, [r7, #24]
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005a42:	4a1d      	ldr	r2, [pc, #116]	; (8005ab8 <HAL_GPIO_Init+0x334>)
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a48:	4b1b      	ldr	r3, [pc, #108]	; (8005ab8 <HAL_GPIO_Init+0x334>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	43db      	mvns	r3, r3
 8005a52:	69ba      	ldr	r2, [r7, #24]
 8005a54:	4013      	ands	r3, r2
 8005a56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d003      	beq.n	8005a6c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a6c:	4a12      	ldr	r2, [pc, #72]	; (8005ab8 <HAL_GPIO_Init+0x334>)
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	3301      	adds	r3, #1
 8005a76:	61fb      	str	r3, [r7, #28]
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	2b0f      	cmp	r3, #15
 8005a7c:	f67f ae90 	bls.w	80057a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005a80:	bf00      	nop
 8005a82:	bf00      	nop
 8005a84:	3724      	adds	r7, #36	; 0x24
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	40023800 	.word	0x40023800
 8005a94:	40013800 	.word	0x40013800
 8005a98:	40020000 	.word	0x40020000
 8005a9c:	40020400 	.word	0x40020400
 8005aa0:	40020800 	.word	0x40020800
 8005aa4:	40020c00 	.word	0x40020c00
 8005aa8:	40021000 	.word	0x40021000
 8005aac:	40021400 	.word	0x40021400
 8005ab0:	40021800 	.word	0x40021800
 8005ab4:	40021c00 	.word	0x40021c00
 8005ab8:	40013c00 	.word	0x40013c00

08005abc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	807b      	strh	r3, [r7, #2]
 8005ac8:	4613      	mov	r3, r2
 8005aca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005acc:	787b      	ldrb	r3, [r7, #1]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d003      	beq.n	8005ada <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005ad2:	887a      	ldrh	r2, [r7, #2]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005ad8:	e003      	b.n	8005ae2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005ada:	887b      	ldrh	r3, [r7, #2]
 8005adc:	041a      	lsls	r2, r3, #16
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	619a      	str	r2, [r3, #24]
}
 8005ae2:	bf00      	nop
 8005ae4:	370c      	adds	r7, #12
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr

08005aee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b085      	sub	sp, #20
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
 8005af6:	460b      	mov	r3, r1
 8005af8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005b00:	887a      	ldrh	r2, [r7, #2]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	4013      	ands	r3, r2
 8005b06:	041a      	lsls	r2, r3, #16
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	43d9      	mvns	r1, r3
 8005b0c:	887b      	ldrh	r3, [r7, #2]
 8005b0e:	400b      	ands	r3, r1
 8005b10:	431a      	orrs	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	619a      	str	r2, [r3, #24]
}
 8005b16:	bf00      	nop
 8005b18:	3714      	adds	r7, #20
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
	...

08005b24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005b2e:	4b08      	ldr	r3, [pc, #32]	; (8005b50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b30:	695a      	ldr	r2, [r3, #20]
 8005b32:	88fb      	ldrh	r3, [r7, #6]
 8005b34:	4013      	ands	r3, r2
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d006      	beq.n	8005b48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005b3a:	4a05      	ldr	r2, [pc, #20]	; (8005b50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005b3c:	88fb      	ldrh	r3, [r7, #6]
 8005b3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005b40:	88fb      	ldrh	r3, [r7, #6]
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7fb ff10 	bl	8001968 <HAL_GPIO_EXTI_Callback>
  }
}
 8005b48:	bf00      	nop
 8005b4a:	3708      	adds	r7, #8
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	40013c00 	.word	0x40013c00

08005b54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d101      	bne.n	8005b66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e12b      	b.n	8005dbe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d106      	bne.n	8005b80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f7fe fcd8 	bl	8004530 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2224      	movs	r2, #36	; 0x24
 8005b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f022 0201 	bic.w	r2, r2, #1
 8005b96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ba6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005bb6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005bb8:	f001 fbba 	bl	8007330 <HAL_RCC_GetPCLK1Freq>
 8005bbc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	4a81      	ldr	r2, [pc, #516]	; (8005dc8 <HAL_I2C_Init+0x274>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d807      	bhi.n	8005bd8 <HAL_I2C_Init+0x84>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	4a80      	ldr	r2, [pc, #512]	; (8005dcc <HAL_I2C_Init+0x278>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	bf94      	ite	ls
 8005bd0:	2301      	movls	r3, #1
 8005bd2:	2300      	movhi	r3, #0
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	e006      	b.n	8005be6 <HAL_I2C_Init+0x92>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	4a7d      	ldr	r2, [pc, #500]	; (8005dd0 <HAL_I2C_Init+0x27c>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	bf94      	ite	ls
 8005be0:	2301      	movls	r3, #1
 8005be2:	2300      	movhi	r3, #0
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d001      	beq.n	8005bee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e0e7      	b.n	8005dbe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	4a78      	ldr	r2, [pc, #480]	; (8005dd4 <HAL_I2C_Init+0x280>)
 8005bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf6:	0c9b      	lsrs	r3, r3, #18
 8005bf8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68ba      	ldr	r2, [r7, #8]
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	6a1b      	ldr	r3, [r3, #32]
 8005c14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	4a6a      	ldr	r2, [pc, #424]	; (8005dc8 <HAL_I2C_Init+0x274>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d802      	bhi.n	8005c28 <HAL_I2C_Init+0xd4>
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	3301      	adds	r3, #1
 8005c26:	e009      	b.n	8005c3c <HAL_I2C_Init+0xe8>
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005c2e:	fb02 f303 	mul.w	r3, r2, r3
 8005c32:	4a69      	ldr	r2, [pc, #420]	; (8005dd8 <HAL_I2C_Init+0x284>)
 8005c34:	fba2 2303 	umull	r2, r3, r2, r3
 8005c38:	099b      	lsrs	r3, r3, #6
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	6812      	ldr	r2, [r2, #0]
 8005c40:	430b      	orrs	r3, r1
 8005c42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	69db      	ldr	r3, [r3, #28]
 8005c4a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005c4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	495c      	ldr	r1, [pc, #368]	; (8005dc8 <HAL_I2C_Init+0x274>)
 8005c58:	428b      	cmp	r3, r1
 8005c5a:	d819      	bhi.n	8005c90 <HAL_I2C_Init+0x13c>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	1e59      	subs	r1, r3, #1
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	005b      	lsls	r3, r3, #1
 8005c66:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c6a:	1c59      	adds	r1, r3, #1
 8005c6c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005c70:	400b      	ands	r3, r1
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00a      	beq.n	8005c8c <HAL_I2C_Init+0x138>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	1e59      	subs	r1, r3, #1
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	005b      	lsls	r3, r3, #1
 8005c80:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c84:	3301      	adds	r3, #1
 8005c86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c8a:	e051      	b.n	8005d30 <HAL_I2C_Init+0x1dc>
 8005c8c:	2304      	movs	r3, #4
 8005c8e:	e04f      	b.n	8005d30 <HAL_I2C_Init+0x1dc>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d111      	bne.n	8005cbc <HAL_I2C_Init+0x168>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	1e58      	subs	r0, r3, #1
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6859      	ldr	r1, [r3, #4]
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	005b      	lsls	r3, r3, #1
 8005ca4:	440b      	add	r3, r1
 8005ca6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005caa:	3301      	adds	r3, #1
 8005cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	bf0c      	ite	eq
 8005cb4:	2301      	moveq	r3, #1
 8005cb6:	2300      	movne	r3, #0
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	e012      	b.n	8005ce2 <HAL_I2C_Init+0x18e>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	1e58      	subs	r0, r3, #1
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6859      	ldr	r1, [r3, #4]
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	440b      	add	r3, r1
 8005cca:	0099      	lsls	r1, r3, #2
 8005ccc:	440b      	add	r3, r1
 8005cce:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	bf0c      	ite	eq
 8005cdc:	2301      	moveq	r3, #1
 8005cde:	2300      	movne	r3, #0
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d001      	beq.n	8005cea <HAL_I2C_Init+0x196>
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e022      	b.n	8005d30 <HAL_I2C_Init+0x1dc>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d10e      	bne.n	8005d10 <HAL_I2C_Init+0x1bc>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	1e58      	subs	r0, r3, #1
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6859      	ldr	r1, [r3, #4]
 8005cfa:	460b      	mov	r3, r1
 8005cfc:	005b      	lsls	r3, r3, #1
 8005cfe:	440b      	add	r3, r1
 8005d00:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d04:	3301      	adds	r3, #1
 8005d06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d0e:	e00f      	b.n	8005d30 <HAL_I2C_Init+0x1dc>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	1e58      	subs	r0, r3, #1
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6859      	ldr	r1, [r3, #4]
 8005d18:	460b      	mov	r3, r1
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	440b      	add	r3, r1
 8005d1e:	0099      	lsls	r1, r3, #2
 8005d20:	440b      	add	r3, r1
 8005d22:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d26:	3301      	adds	r3, #1
 8005d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005d30:	6879      	ldr	r1, [r7, #4]
 8005d32:	6809      	ldr	r1, [r1, #0]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	69da      	ldr	r2, [r3, #28]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	431a      	orrs	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	430a      	orrs	r2, r1
 8005d52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005d5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	6911      	ldr	r1, [r2, #16]
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	68d2      	ldr	r2, [r2, #12]
 8005d6a:	4311      	orrs	r1, r2
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	6812      	ldr	r2, [r2, #0]
 8005d70:	430b      	orrs	r3, r1
 8005d72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	695a      	ldr	r2, [r3, #20]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	431a      	orrs	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	430a      	orrs	r2, r1
 8005d8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f042 0201 	orr.w	r2, r2, #1
 8005d9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2220      	movs	r2, #32
 8005daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3710      	adds	r7, #16
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	000186a0 	.word	0x000186a0
 8005dcc:	001e847f 	.word	0x001e847f
 8005dd0:	003d08ff 	.word	0x003d08ff
 8005dd4:	431bde83 	.word	0x431bde83
 8005dd8:	10624dd3 	.word	0x10624dd3

08005ddc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b088      	sub	sp, #32
 8005de0:	af02      	add	r7, sp, #8
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	607a      	str	r2, [r7, #4]
 8005de6:	461a      	mov	r2, r3
 8005de8:	460b      	mov	r3, r1
 8005dea:	817b      	strh	r3, [r7, #10]
 8005dec:	4613      	mov	r3, r2
 8005dee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005df0:	f7fe ff28 	bl	8004c44 <HAL_GetTick>
 8005df4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b20      	cmp	r3, #32
 8005e00:	f040 80e0 	bne.w	8005fc4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	9300      	str	r3, [sp, #0]
 8005e08:	2319      	movs	r3, #25
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	4970      	ldr	r1, [pc, #448]	; (8005fd0 <HAL_I2C_Master_Transmit+0x1f4>)
 8005e0e:	68f8      	ldr	r0, [r7, #12]
 8005e10:	f000 fc58 	bl	80066c4 <I2C_WaitOnFlagUntilTimeout>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d001      	beq.n	8005e1e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005e1a:	2302      	movs	r3, #2
 8005e1c:	e0d3      	b.n	8005fc6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d101      	bne.n	8005e2c <HAL_I2C_Master_Transmit+0x50>
 8005e28:	2302      	movs	r3, #2
 8005e2a:	e0cc      	b.n	8005fc6 <HAL_I2C_Master_Transmit+0x1ea>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 0301 	and.w	r3, r3, #1
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d007      	beq.n	8005e52 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f042 0201 	orr.w	r2, r2, #1
 8005e50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e60:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2221      	movs	r2, #33	; 0x21
 8005e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2210      	movs	r2, #16
 8005e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	893a      	ldrh	r2, [r7, #8]
 8005e82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	4a50      	ldr	r2, [pc, #320]	; (8005fd4 <HAL_I2C_Master_Transmit+0x1f8>)
 8005e92:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005e94:	8979      	ldrh	r1, [r7, #10]
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	6a3a      	ldr	r2, [r7, #32]
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f000 fac2 	bl	8006424 <I2C_MasterRequestWrite>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d001      	beq.n	8005eaa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e08d      	b.n	8005fc6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eaa:	2300      	movs	r3, #0
 8005eac:	613b      	str	r3, [r7, #16]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	695b      	ldr	r3, [r3, #20]
 8005eb4:	613b      	str	r3, [r7, #16]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	613b      	str	r3, [r7, #16]
 8005ebe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005ec0:	e066      	b.n	8005f90 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	6a39      	ldr	r1, [r7, #32]
 8005ec6:	68f8      	ldr	r0, [r7, #12]
 8005ec8:	f000 fcd2 	bl	8006870 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00d      	beq.n	8005eee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed6:	2b04      	cmp	r3, #4
 8005ed8:	d107      	bne.n	8005eea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ee8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e06b      	b.n	8005fc6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef2:	781a      	ldrb	r2, [r3, #0]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efe:	1c5a      	adds	r2, r3, #1
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	b29a      	uxth	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f16:	3b01      	subs	r3, #1
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	695b      	ldr	r3, [r3, #20]
 8005f24:	f003 0304 	and.w	r3, r3, #4
 8005f28:	2b04      	cmp	r3, #4
 8005f2a:	d11b      	bne.n	8005f64 <HAL_I2C_Master_Transmit+0x188>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d017      	beq.n	8005f64 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f38:	781a      	ldrb	r2, [r3, #0]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f44:	1c5a      	adds	r2, r3, #1
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	3b01      	subs	r3, #1
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	6a39      	ldr	r1, [r7, #32]
 8005f68:	68f8      	ldr	r0, [r7, #12]
 8005f6a:	f000 fcc2 	bl	80068f2 <I2C_WaitOnBTFFlagUntilTimeout>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d00d      	beq.n	8005f90 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f78:	2b04      	cmp	r3, #4
 8005f7a:	d107      	bne.n	8005f8c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f8a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e01a      	b.n	8005fc6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d194      	bne.n	8005ec2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fa6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2220      	movs	r2, #32
 8005fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	e000      	b.n	8005fc6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005fc4:	2302      	movs	r3, #2
  }
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3718      	adds	r7, #24
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	00100002 	.word	0x00100002
 8005fd4:	ffff0000 	.word	0xffff0000

08005fd8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b08c      	sub	sp, #48	; 0x30
 8005fdc:	af02      	add	r7, sp, #8
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	607a      	str	r2, [r7, #4]
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	817b      	strh	r3, [r7, #10]
 8005fe8:	4613      	mov	r3, r2
 8005fea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005fec:	f7fe fe2a 	bl	8004c44 <HAL_GetTick>
 8005ff0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	2b20      	cmp	r3, #32
 8005ffc:	f040 820b 	bne.w	8006416 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006002:	9300      	str	r3, [sp, #0]
 8006004:	2319      	movs	r3, #25
 8006006:	2201      	movs	r2, #1
 8006008:	497c      	ldr	r1, [pc, #496]	; (80061fc <HAL_I2C_Master_Receive+0x224>)
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	f000 fb5a 	bl	80066c4 <I2C_WaitOnFlagUntilTimeout>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d001      	beq.n	800601a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006016:	2302      	movs	r3, #2
 8006018:	e1fe      	b.n	8006418 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006020:	2b01      	cmp	r3, #1
 8006022:	d101      	bne.n	8006028 <HAL_I2C_Master_Receive+0x50>
 8006024:	2302      	movs	r3, #2
 8006026:	e1f7      	b.n	8006418 <HAL_I2C_Master_Receive+0x440>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0301 	and.w	r3, r3, #1
 800603a:	2b01      	cmp	r3, #1
 800603c:	d007      	beq.n	800604e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f042 0201 	orr.w	r2, r2, #1
 800604c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800605c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2222      	movs	r2, #34	; 0x22
 8006062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2210      	movs	r2, #16
 800606a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	893a      	ldrh	r2, [r7, #8]
 800607e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006084:	b29a      	uxth	r2, r3
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	4a5c      	ldr	r2, [pc, #368]	; (8006200 <HAL_I2C_Master_Receive+0x228>)
 800608e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006090:	8979      	ldrh	r1, [r7, #10]
 8006092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006094:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006096:	68f8      	ldr	r0, [r7, #12]
 8006098:	f000 fa46 	bl	8006528 <I2C_MasterRequestRead>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d001      	beq.n	80060a6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e1b8      	b.n	8006418 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d113      	bne.n	80060d6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060ae:	2300      	movs	r3, #0
 80060b0:	623b      	str	r3, [r7, #32]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	695b      	ldr	r3, [r3, #20]
 80060b8:	623b      	str	r3, [r7, #32]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	623b      	str	r3, [r7, #32]
 80060c2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060d2:	601a      	str	r2, [r3, #0]
 80060d4:	e18c      	b.n	80063f0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d11b      	bne.n	8006116 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060ee:	2300      	movs	r3, #0
 80060f0:	61fb      	str	r3, [r7, #28]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	695b      	ldr	r3, [r3, #20]
 80060f8:	61fb      	str	r3, [r7, #28]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	699b      	ldr	r3, [r3, #24]
 8006100:	61fb      	str	r3, [r7, #28]
 8006102:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006112:	601a      	str	r2, [r3, #0]
 8006114:	e16c      	b.n	80063f0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800611a:	2b02      	cmp	r3, #2
 800611c:	d11b      	bne.n	8006156 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800612c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800613c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800613e:	2300      	movs	r3, #0
 8006140:	61bb      	str	r3, [r7, #24]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	695b      	ldr	r3, [r3, #20]
 8006148:	61bb      	str	r3, [r7, #24]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	61bb      	str	r3, [r7, #24]
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	e14c      	b.n	80063f0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006164:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006166:	2300      	movs	r3, #0
 8006168:	617b      	str	r3, [r7, #20]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	695b      	ldr	r3, [r3, #20]
 8006170:	617b      	str	r3, [r7, #20]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	617b      	str	r3, [r7, #20]
 800617a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800617c:	e138      	b.n	80063f0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006182:	2b03      	cmp	r3, #3
 8006184:	f200 80f1 	bhi.w	800636a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800618c:	2b01      	cmp	r3, #1
 800618e:	d123      	bne.n	80061d8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006192:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f000 fbed 	bl	8006974 <I2C_WaitOnRXNEFlagUntilTimeout>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d001      	beq.n	80061a4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e139      	b.n	8006418 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	691a      	ldr	r2, [r3, #16]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ae:	b2d2      	uxtb	r2, r2
 80061b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b6:	1c5a      	adds	r2, r3, #1
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061c0:	3b01      	subs	r3, #1
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	3b01      	subs	r3, #1
 80061d0:	b29a      	uxth	r2, r3
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80061d6:	e10b      	b.n	80063f0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d14e      	bne.n	800627e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80061e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e2:	9300      	str	r3, [sp, #0]
 80061e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e6:	2200      	movs	r2, #0
 80061e8:	4906      	ldr	r1, [pc, #24]	; (8006204 <HAL_I2C_Master_Receive+0x22c>)
 80061ea:	68f8      	ldr	r0, [r7, #12]
 80061ec:	f000 fa6a 	bl	80066c4 <I2C_WaitOnFlagUntilTimeout>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d008      	beq.n	8006208 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e10e      	b.n	8006418 <HAL_I2C_Master_Receive+0x440>
 80061fa:	bf00      	nop
 80061fc:	00100002 	.word	0x00100002
 8006200:	ffff0000 	.word	0xffff0000
 8006204:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006216:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	691a      	ldr	r2, [r3, #16]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006222:	b2d2      	uxtb	r2, r2
 8006224:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622a:	1c5a      	adds	r2, r3, #1
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006234:	3b01      	subs	r3, #1
 8006236:	b29a      	uxth	r2, r3
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006240:	b29b      	uxth	r3, r3
 8006242:	3b01      	subs	r3, #1
 8006244:	b29a      	uxth	r2, r3
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	691a      	ldr	r2, [r3, #16]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006254:	b2d2      	uxtb	r2, r2
 8006256:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625c:	1c5a      	adds	r2, r3, #1
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006266:	3b01      	subs	r3, #1
 8006268:	b29a      	uxth	r2, r3
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006272:	b29b      	uxth	r3, r3
 8006274:	3b01      	subs	r3, #1
 8006276:	b29a      	uxth	r2, r3
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800627c:	e0b8      	b.n	80063f0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800627e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006280:	9300      	str	r3, [sp, #0]
 8006282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006284:	2200      	movs	r2, #0
 8006286:	4966      	ldr	r1, [pc, #408]	; (8006420 <HAL_I2C_Master_Receive+0x448>)
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f000 fa1b 	bl	80066c4 <I2C_WaitOnFlagUntilTimeout>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	d001      	beq.n	8006298 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e0bf      	b.n	8006418 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	691a      	ldr	r2, [r3, #16]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b2:	b2d2      	uxtb	r2, r2
 80062b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ba:	1c5a      	adds	r2, r3, #1
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062c4:	3b01      	subs	r3, #1
 80062c6:	b29a      	uxth	r2, r3
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	3b01      	subs	r3, #1
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80062da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062dc:	9300      	str	r3, [sp, #0]
 80062de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e0:	2200      	movs	r2, #0
 80062e2:	494f      	ldr	r1, [pc, #316]	; (8006420 <HAL_I2C_Master_Receive+0x448>)
 80062e4:	68f8      	ldr	r0, [r7, #12]
 80062e6:	f000 f9ed 	bl	80066c4 <I2C_WaitOnFlagUntilTimeout>
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d001      	beq.n	80062f4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e091      	b.n	8006418 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006302:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	691a      	ldr	r2, [r3, #16]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630e:	b2d2      	uxtb	r2, r2
 8006310:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006316:	1c5a      	adds	r2, r3, #1
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006320:	3b01      	subs	r3, #1
 8006322:	b29a      	uxth	r2, r3
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800632c:	b29b      	uxth	r3, r3
 800632e:	3b01      	subs	r3, #1
 8006330:	b29a      	uxth	r2, r3
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	691a      	ldr	r2, [r3, #16]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006340:	b2d2      	uxtb	r2, r2
 8006342:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006348:	1c5a      	adds	r2, r3, #1
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006352:	3b01      	subs	r3, #1
 8006354:	b29a      	uxth	r2, r3
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800635e:	b29b      	uxth	r3, r3
 8006360:	3b01      	subs	r3, #1
 8006362:	b29a      	uxth	r2, r3
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006368:	e042      	b.n	80063f0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800636a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800636c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f000 fb00 	bl	8006974 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d001      	beq.n	800637e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e04c      	b.n	8006418 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	691a      	ldr	r2, [r3, #16]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006388:	b2d2      	uxtb	r2, r2
 800638a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006390:	1c5a      	adds	r2, r3, #1
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800639a:	3b01      	subs	r3, #1
 800639c:	b29a      	uxth	r2, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	3b01      	subs	r3, #1
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	695b      	ldr	r3, [r3, #20]
 80063b6:	f003 0304 	and.w	r3, r3, #4
 80063ba:	2b04      	cmp	r3, #4
 80063bc:	d118      	bne.n	80063f0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	691a      	ldr	r2, [r3, #16]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c8:	b2d2      	uxtb	r2, r2
 80063ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d0:	1c5a      	adds	r2, r3, #1
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063da:	3b01      	subs	r3, #1
 80063dc:	b29a      	uxth	r2, r3
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	3b01      	subs	r3, #1
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f47f aec2 	bne.w	800617e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2220      	movs	r2, #32
 80063fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2200      	movs	r2, #0
 800640e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006412:	2300      	movs	r3, #0
 8006414:	e000      	b.n	8006418 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006416:	2302      	movs	r3, #2
  }
}
 8006418:	4618      	mov	r0, r3
 800641a:	3728      	adds	r7, #40	; 0x28
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	00010004 	.word	0x00010004

08006424 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b088      	sub	sp, #32
 8006428:	af02      	add	r7, sp, #8
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	607a      	str	r2, [r7, #4]
 800642e:	603b      	str	r3, [r7, #0]
 8006430:	460b      	mov	r3, r1
 8006432:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006438:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	2b08      	cmp	r3, #8
 800643e:	d006      	beq.n	800644e <I2C_MasterRequestWrite+0x2a>
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	2b01      	cmp	r3, #1
 8006444:	d003      	beq.n	800644e <I2C_MasterRequestWrite+0x2a>
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800644c:	d108      	bne.n	8006460 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800645c:	601a      	str	r2, [r3, #0]
 800645e:	e00b      	b.n	8006478 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006464:	2b12      	cmp	r3, #18
 8006466:	d107      	bne.n	8006478 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006476:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	9300      	str	r3, [sp, #0]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006484:	68f8      	ldr	r0, [r7, #12]
 8006486:	f000 f91d 	bl	80066c4 <I2C_WaitOnFlagUntilTimeout>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00d      	beq.n	80064ac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800649a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800649e:	d103      	bne.n	80064a8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80064a8:	2303      	movs	r3, #3
 80064aa:	e035      	b.n	8006518 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064b4:	d108      	bne.n	80064c8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80064b6:	897b      	ldrh	r3, [r7, #10]
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	461a      	mov	r2, r3
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80064c4:	611a      	str	r2, [r3, #16]
 80064c6:	e01b      	b.n	8006500 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80064c8:	897b      	ldrh	r3, [r7, #10]
 80064ca:	11db      	asrs	r3, r3, #7
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	f003 0306 	and.w	r3, r3, #6
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	f063 030f 	orn	r3, r3, #15
 80064d8:	b2da      	uxtb	r2, r3
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	490e      	ldr	r1, [pc, #56]	; (8006520 <I2C_MasterRequestWrite+0xfc>)
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	f000 f943 	bl	8006772 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d001      	beq.n	80064f6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e010      	b.n	8006518 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80064f6:	897b      	ldrh	r3, [r7, #10]
 80064f8:	b2da      	uxtb	r2, r3
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	4907      	ldr	r1, [pc, #28]	; (8006524 <I2C_MasterRequestWrite+0x100>)
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	f000 f933 	bl	8006772 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d001      	beq.n	8006516 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e000      	b.n	8006518 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	3718      	adds	r7, #24
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	00010008 	.word	0x00010008
 8006524:	00010002 	.word	0x00010002

08006528 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b088      	sub	sp, #32
 800652c:	af02      	add	r7, sp, #8
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	607a      	str	r2, [r7, #4]
 8006532:	603b      	str	r3, [r7, #0]
 8006534:	460b      	mov	r3, r1
 8006536:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800654c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	2b08      	cmp	r3, #8
 8006552:	d006      	beq.n	8006562 <I2C_MasterRequestRead+0x3a>
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	2b01      	cmp	r3, #1
 8006558:	d003      	beq.n	8006562 <I2C_MasterRequestRead+0x3a>
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006560:	d108      	bne.n	8006574 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006570:	601a      	str	r2, [r3, #0]
 8006572:	e00b      	b.n	800658c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006578:	2b11      	cmp	r3, #17
 800657a:	d107      	bne.n	800658c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800658a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	9300      	str	r3, [sp, #0]
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006598:	68f8      	ldr	r0, [r7, #12]
 800659a:	f000 f893 	bl	80066c4 <I2C_WaitOnFlagUntilTimeout>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d00d      	beq.n	80065c0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065b2:	d103      	bne.n	80065bc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80065bc:	2303      	movs	r3, #3
 80065be:	e079      	b.n	80066b4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065c8:	d108      	bne.n	80065dc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80065ca:	897b      	ldrh	r3, [r7, #10]
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	f043 0301 	orr.w	r3, r3, #1
 80065d2:	b2da      	uxtb	r2, r3
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	611a      	str	r2, [r3, #16]
 80065da:	e05f      	b.n	800669c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80065dc:	897b      	ldrh	r3, [r7, #10]
 80065de:	11db      	asrs	r3, r3, #7
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	f003 0306 	and.w	r3, r3, #6
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	f063 030f 	orn	r3, r3, #15
 80065ec:	b2da      	uxtb	r2, r3
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	4930      	ldr	r1, [pc, #192]	; (80066bc <I2C_MasterRequestRead+0x194>)
 80065fa:	68f8      	ldr	r0, [r7, #12]
 80065fc:	f000 f8b9 	bl	8006772 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	d001      	beq.n	800660a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e054      	b.n	80066b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800660a:	897b      	ldrh	r3, [r7, #10]
 800660c:	b2da      	uxtb	r2, r3
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	4929      	ldr	r1, [pc, #164]	; (80066c0 <I2C_MasterRequestRead+0x198>)
 800661a:	68f8      	ldr	r0, [r7, #12]
 800661c:	f000 f8a9 	bl	8006772 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d001      	beq.n	800662a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e044      	b.n	80066b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800662a:	2300      	movs	r3, #0
 800662c:	613b      	str	r3, [r7, #16]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	695b      	ldr	r3, [r3, #20]
 8006634:	613b      	str	r3, [r7, #16]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	699b      	ldr	r3, [r3, #24]
 800663c:	613b      	str	r3, [r7, #16]
 800663e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800664e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	9300      	str	r3, [sp, #0]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800665c:	68f8      	ldr	r0, [r7, #12]
 800665e:	f000 f831 	bl	80066c4 <I2C_WaitOnFlagUntilTimeout>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00d      	beq.n	8006684 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006676:	d103      	bne.n	8006680 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800667e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006680:	2303      	movs	r3, #3
 8006682:	e017      	b.n	80066b4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006684:	897b      	ldrh	r3, [r7, #10]
 8006686:	11db      	asrs	r3, r3, #7
 8006688:	b2db      	uxtb	r3, r3
 800668a:	f003 0306 	and.w	r3, r3, #6
 800668e:	b2db      	uxtb	r3, r3
 8006690:	f063 030e 	orn	r3, r3, #14
 8006694:	b2da      	uxtb	r2, r3
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	4907      	ldr	r1, [pc, #28]	; (80066c0 <I2C_MasterRequestRead+0x198>)
 80066a2:	68f8      	ldr	r0, [r7, #12]
 80066a4:	f000 f865 	bl	8006772 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d001      	beq.n	80066b2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e000      	b.n	80066b4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3718      	adds	r7, #24
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	00010008 	.word	0x00010008
 80066c0:	00010002 	.word	0x00010002

080066c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	603b      	str	r3, [r7, #0]
 80066d0:	4613      	mov	r3, r2
 80066d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066d4:	e025      	b.n	8006722 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066dc:	d021      	beq.n	8006722 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066de:	f7fe fab1 	bl	8004c44 <HAL_GetTick>
 80066e2:	4602      	mov	r2, r0
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	683a      	ldr	r2, [r7, #0]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d302      	bcc.n	80066f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d116      	bne.n	8006722 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2200      	movs	r2, #0
 80066f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2220      	movs	r2, #32
 80066fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2200      	movs	r2, #0
 8006706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670e:	f043 0220 	orr.w	r2, r3, #32
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	e023      	b.n	800676a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	0c1b      	lsrs	r3, r3, #16
 8006726:	b2db      	uxtb	r3, r3
 8006728:	2b01      	cmp	r3, #1
 800672a:	d10d      	bne.n	8006748 <I2C_WaitOnFlagUntilTimeout+0x84>
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	43da      	mvns	r2, r3
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	4013      	ands	r3, r2
 8006738:	b29b      	uxth	r3, r3
 800673a:	2b00      	cmp	r3, #0
 800673c:	bf0c      	ite	eq
 800673e:	2301      	moveq	r3, #1
 8006740:	2300      	movne	r3, #0
 8006742:	b2db      	uxtb	r3, r3
 8006744:	461a      	mov	r2, r3
 8006746:	e00c      	b.n	8006762 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	699b      	ldr	r3, [r3, #24]
 800674e:	43da      	mvns	r2, r3
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	4013      	ands	r3, r2
 8006754:	b29b      	uxth	r3, r3
 8006756:	2b00      	cmp	r3, #0
 8006758:	bf0c      	ite	eq
 800675a:	2301      	moveq	r3, #1
 800675c:	2300      	movne	r3, #0
 800675e:	b2db      	uxtb	r3, r3
 8006760:	461a      	mov	r2, r3
 8006762:	79fb      	ldrb	r3, [r7, #7]
 8006764:	429a      	cmp	r2, r3
 8006766:	d0b6      	beq.n	80066d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3710      	adds	r7, #16
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006772:	b580      	push	{r7, lr}
 8006774:	b084      	sub	sp, #16
 8006776:	af00      	add	r7, sp, #0
 8006778:	60f8      	str	r0, [r7, #12]
 800677a:	60b9      	str	r1, [r7, #8]
 800677c:	607a      	str	r2, [r7, #4]
 800677e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006780:	e051      	b.n	8006826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	695b      	ldr	r3, [r3, #20]
 8006788:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800678c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006790:	d123      	bne.n	80067da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067a0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067aa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2220      	movs	r2, #32
 80067b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c6:	f043 0204 	orr.w	r2, r3, #4
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e046      	b.n	8006868 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067e0:	d021      	beq.n	8006826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067e2:	f7fe fa2f 	bl	8004c44 <HAL_GetTick>
 80067e6:	4602      	mov	r2, r0
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d302      	bcc.n	80067f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d116      	bne.n	8006826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2200      	movs	r2, #0
 80067fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2220      	movs	r2, #32
 8006802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006812:	f043 0220 	orr.w	r2, r3, #32
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	e020      	b.n	8006868 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	0c1b      	lsrs	r3, r3, #16
 800682a:	b2db      	uxtb	r3, r3
 800682c:	2b01      	cmp	r3, #1
 800682e:	d10c      	bne.n	800684a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	695b      	ldr	r3, [r3, #20]
 8006836:	43da      	mvns	r2, r3
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	4013      	ands	r3, r2
 800683c:	b29b      	uxth	r3, r3
 800683e:	2b00      	cmp	r3, #0
 8006840:	bf14      	ite	ne
 8006842:	2301      	movne	r3, #1
 8006844:	2300      	moveq	r3, #0
 8006846:	b2db      	uxtb	r3, r3
 8006848:	e00b      	b.n	8006862 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	699b      	ldr	r3, [r3, #24]
 8006850:	43da      	mvns	r2, r3
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	4013      	ands	r3, r2
 8006856:	b29b      	uxth	r3, r3
 8006858:	2b00      	cmp	r3, #0
 800685a:	bf14      	ite	ne
 800685c:	2301      	movne	r3, #1
 800685e:	2300      	moveq	r3, #0
 8006860:	b2db      	uxtb	r3, r3
 8006862:	2b00      	cmp	r3, #0
 8006864:	d18d      	bne.n	8006782 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006866:	2300      	movs	r3, #0
}
 8006868:	4618      	mov	r0, r3
 800686a:	3710      	adds	r7, #16
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800687c:	e02d      	b.n	80068da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800687e:	68f8      	ldr	r0, [r7, #12]
 8006880:	f000 f8ce 	bl	8006a20 <I2C_IsAcknowledgeFailed>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d001      	beq.n	800688e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e02d      	b.n	80068ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006894:	d021      	beq.n	80068da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006896:	f7fe f9d5 	bl	8004c44 <HAL_GetTick>
 800689a:	4602      	mov	r2, r0
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	68ba      	ldr	r2, [r7, #8]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d302      	bcc.n	80068ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d116      	bne.n	80068da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2220      	movs	r2, #32
 80068b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c6:	f043 0220 	orr.w	r2, r3, #32
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80068d6:	2301      	movs	r3, #1
 80068d8:	e007      	b.n	80068ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	695b      	ldr	r3, [r3, #20]
 80068e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068e4:	2b80      	cmp	r3, #128	; 0x80
 80068e6:	d1ca      	bne.n	800687e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b084      	sub	sp, #16
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	60f8      	str	r0, [r7, #12]
 80068fa:	60b9      	str	r1, [r7, #8]
 80068fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80068fe:	e02d      	b.n	800695c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006900:	68f8      	ldr	r0, [r7, #12]
 8006902:	f000 f88d 	bl	8006a20 <I2C_IsAcknowledgeFailed>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d001      	beq.n	8006910 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	e02d      	b.n	800696c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006916:	d021      	beq.n	800695c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006918:	f7fe f994 	bl	8004c44 <HAL_GetTick>
 800691c:	4602      	mov	r2, r0
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	68ba      	ldr	r2, [r7, #8]
 8006924:	429a      	cmp	r2, r3
 8006926:	d302      	bcc.n	800692e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d116      	bne.n	800695c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2220      	movs	r2, #32
 8006938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2200      	movs	r2, #0
 8006940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006948:	f043 0220 	orr.w	r2, r3, #32
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e007      	b.n	800696c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	695b      	ldr	r3, [r3, #20]
 8006962:	f003 0304 	and.w	r3, r3, #4
 8006966:	2b04      	cmp	r3, #4
 8006968:	d1ca      	bne.n	8006900 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3710      	adds	r7, #16
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006980:	e042      	b.n	8006a08 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	695b      	ldr	r3, [r3, #20]
 8006988:	f003 0310 	and.w	r3, r3, #16
 800698c:	2b10      	cmp	r3, #16
 800698e:	d119      	bne.n	80069c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f06f 0210 	mvn.w	r2, #16
 8006998:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2220      	movs	r2, #32
 80069a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	e029      	b.n	8006a18 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069c4:	f7fe f93e 	bl	8004c44 <HAL_GetTick>
 80069c8:	4602      	mov	r2, r0
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	1ad3      	subs	r3, r2, r3
 80069ce:	68ba      	ldr	r2, [r7, #8]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d302      	bcc.n	80069da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d116      	bne.n	8006a08 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2220      	movs	r2, #32
 80069e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f4:	f043 0220 	orr.w	r2, r3, #32
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e007      	b.n	8006a18 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	695b      	ldr	r3, [r3, #20]
 8006a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a12:	2b40      	cmp	r3, #64	; 0x40
 8006a14:	d1b5      	bne.n	8006982 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3710      	adds	r7, #16
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	695b      	ldr	r3, [r3, #20]
 8006a2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a36:	d11b      	bne.n	8006a70 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a40:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2220      	movs	r2, #32
 8006a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5c:	f043 0204 	orr.w	r2, r3, #4
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e000      	b.n	8006a72 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	370c      	adds	r7, #12
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
	...

08006a80 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8006a86:	4b06      	ldr	r3, [pc, #24]	; (8006aa0 <HAL_PWR_EnableBkUpAccess+0x20>)
 8006a88:	2201      	movs	r2, #1
 8006a8a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8006a8c:	4b05      	ldr	r3, [pc, #20]	; (8006aa4 <HAL_PWR_EnableBkUpAccess+0x24>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8006a92:	687b      	ldr	r3, [r7, #4]
}
 8006a94:	bf00      	nop
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr
 8006aa0:	420e0020 	.word	0x420e0020
 8006aa4:	40007000 	.word	0x40007000

08006aa8 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8006aae:	4b06      	ldr	r3, [pc, #24]	; (8006ac8 <HAL_PWR_DisableBkUpAccess+0x20>)
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8006ab4:	4b05      	ldr	r3, [pc, #20]	; (8006acc <HAL_PWR_DisableBkUpAccess+0x24>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8006aba:	687b      	ldr	r3, [r7, #4]
}
 8006abc:	bf00      	nop
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr
 8006ac8:	420e0020 	.word	0x420e0020
 8006acc:	40007000 	.word	0x40007000

08006ad0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b086      	sub	sp, #24
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d101      	bne.n	8006ae2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e267      	b.n	8006fb2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 0301 	and.w	r3, r3, #1
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d075      	beq.n	8006bda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006aee:	4b88      	ldr	r3, [pc, #544]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f003 030c 	and.w	r3, r3, #12
 8006af6:	2b04      	cmp	r3, #4
 8006af8:	d00c      	beq.n	8006b14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006afa:	4b85      	ldr	r3, [pc, #532]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006b02:	2b08      	cmp	r3, #8
 8006b04:	d112      	bne.n	8006b2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b06:	4b82      	ldr	r3, [pc, #520]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b12:	d10b      	bne.n	8006b2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b14:	4b7e      	ldr	r3, [pc, #504]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d05b      	beq.n	8006bd8 <HAL_RCC_OscConfig+0x108>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d157      	bne.n	8006bd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e242      	b.n	8006fb2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b34:	d106      	bne.n	8006b44 <HAL_RCC_OscConfig+0x74>
 8006b36:	4b76      	ldr	r3, [pc, #472]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a75      	ldr	r2, [pc, #468]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b40:	6013      	str	r3, [r2, #0]
 8006b42:	e01d      	b.n	8006b80 <HAL_RCC_OscConfig+0xb0>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b4c:	d10c      	bne.n	8006b68 <HAL_RCC_OscConfig+0x98>
 8006b4e:	4b70      	ldr	r3, [pc, #448]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a6f      	ldr	r2, [pc, #444]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006b54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b58:	6013      	str	r3, [r2, #0]
 8006b5a:	4b6d      	ldr	r3, [pc, #436]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a6c      	ldr	r2, [pc, #432]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b64:	6013      	str	r3, [r2, #0]
 8006b66:	e00b      	b.n	8006b80 <HAL_RCC_OscConfig+0xb0>
 8006b68:	4b69      	ldr	r3, [pc, #420]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a68      	ldr	r2, [pc, #416]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006b6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b72:	6013      	str	r3, [r2, #0]
 8006b74:	4b66      	ldr	r3, [pc, #408]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a65      	ldr	r2, [pc, #404]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006b7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d013      	beq.n	8006bb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b88:	f7fe f85c 	bl	8004c44 <HAL_GetTick>
 8006b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b8e:	e008      	b.n	8006ba2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b90:	f7fe f858 	bl	8004c44 <HAL_GetTick>
 8006b94:	4602      	mov	r2, r0
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	1ad3      	subs	r3, r2, r3
 8006b9a:	2b64      	cmp	r3, #100	; 0x64
 8006b9c:	d901      	bls.n	8006ba2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e207      	b.n	8006fb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ba2:	4b5b      	ldr	r3, [pc, #364]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d0f0      	beq.n	8006b90 <HAL_RCC_OscConfig+0xc0>
 8006bae:	e014      	b.n	8006bda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bb0:	f7fe f848 	bl	8004c44 <HAL_GetTick>
 8006bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bb6:	e008      	b.n	8006bca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006bb8:	f7fe f844 	bl	8004c44 <HAL_GetTick>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	2b64      	cmp	r3, #100	; 0x64
 8006bc4:	d901      	bls.n	8006bca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e1f3      	b.n	8006fb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bca:	4b51      	ldr	r3, [pc, #324]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1f0      	bne.n	8006bb8 <HAL_RCC_OscConfig+0xe8>
 8006bd6:	e000      	b.n	8006bda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 0302 	and.w	r3, r3, #2
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d063      	beq.n	8006cae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006be6:	4b4a      	ldr	r3, [pc, #296]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	f003 030c 	and.w	r3, r3, #12
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00b      	beq.n	8006c0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bf2:	4b47      	ldr	r3, [pc, #284]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006bfa:	2b08      	cmp	r3, #8
 8006bfc:	d11c      	bne.n	8006c38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bfe:	4b44      	ldr	r3, [pc, #272]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d116      	bne.n	8006c38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c0a:	4b41      	ldr	r3, [pc, #260]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0302 	and.w	r3, r3, #2
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d005      	beq.n	8006c22 <HAL_RCC_OscConfig+0x152>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d001      	beq.n	8006c22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e1c7      	b.n	8006fb2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c22:	4b3b      	ldr	r3, [pc, #236]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	00db      	lsls	r3, r3, #3
 8006c30:	4937      	ldr	r1, [pc, #220]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006c32:	4313      	orrs	r3, r2
 8006c34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c36:	e03a      	b.n	8006cae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d020      	beq.n	8006c82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c40:	4b34      	ldr	r3, [pc, #208]	; (8006d14 <HAL_RCC_OscConfig+0x244>)
 8006c42:	2201      	movs	r2, #1
 8006c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c46:	f7fd fffd 	bl	8004c44 <HAL_GetTick>
 8006c4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c4c:	e008      	b.n	8006c60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c4e:	f7fd fff9 	bl	8004c44 <HAL_GetTick>
 8006c52:	4602      	mov	r2, r0
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	d901      	bls.n	8006c60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	e1a8      	b.n	8006fb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c60:	4b2b      	ldr	r3, [pc, #172]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 0302 	and.w	r3, r3, #2
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d0f0      	beq.n	8006c4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c6c:	4b28      	ldr	r3, [pc, #160]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	00db      	lsls	r3, r3, #3
 8006c7a:	4925      	ldr	r1, [pc, #148]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	600b      	str	r3, [r1, #0]
 8006c80:	e015      	b.n	8006cae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c82:	4b24      	ldr	r3, [pc, #144]	; (8006d14 <HAL_RCC_OscConfig+0x244>)
 8006c84:	2200      	movs	r2, #0
 8006c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c88:	f7fd ffdc 	bl	8004c44 <HAL_GetTick>
 8006c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c8e:	e008      	b.n	8006ca2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c90:	f7fd ffd8 	bl	8004c44 <HAL_GetTick>
 8006c94:	4602      	mov	r2, r0
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	2b02      	cmp	r3, #2
 8006c9c:	d901      	bls.n	8006ca2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	e187      	b.n	8006fb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ca2:	4b1b      	ldr	r3, [pc, #108]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0302 	and.w	r3, r3, #2
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d1f0      	bne.n	8006c90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 0308 	and.w	r3, r3, #8
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d036      	beq.n	8006d28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d016      	beq.n	8006cf0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cc2:	4b15      	ldr	r3, [pc, #84]	; (8006d18 <HAL_RCC_OscConfig+0x248>)
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cc8:	f7fd ffbc 	bl	8004c44 <HAL_GetTick>
 8006ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cce:	e008      	b.n	8006ce2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cd0:	f7fd ffb8 	bl	8004c44 <HAL_GetTick>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	2b02      	cmp	r3, #2
 8006cdc:	d901      	bls.n	8006ce2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	e167      	b.n	8006fb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ce2:	4b0b      	ldr	r3, [pc, #44]	; (8006d10 <HAL_RCC_OscConfig+0x240>)
 8006ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ce6:	f003 0302 	and.w	r3, r3, #2
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d0f0      	beq.n	8006cd0 <HAL_RCC_OscConfig+0x200>
 8006cee:	e01b      	b.n	8006d28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006cf0:	4b09      	ldr	r3, [pc, #36]	; (8006d18 <HAL_RCC_OscConfig+0x248>)
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cf6:	f7fd ffa5 	bl	8004c44 <HAL_GetTick>
 8006cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cfc:	e00e      	b.n	8006d1c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cfe:	f7fd ffa1 	bl	8004c44 <HAL_GetTick>
 8006d02:	4602      	mov	r2, r0
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	1ad3      	subs	r3, r2, r3
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d907      	bls.n	8006d1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e150      	b.n	8006fb2 <HAL_RCC_OscConfig+0x4e2>
 8006d10:	40023800 	.word	0x40023800
 8006d14:	42470000 	.word	0x42470000
 8006d18:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d1c:	4b88      	ldr	r3, [pc, #544]	; (8006f40 <HAL_RCC_OscConfig+0x470>)
 8006d1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d20:	f003 0302 	and.w	r3, r3, #2
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1ea      	bne.n	8006cfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 0304 	and.w	r3, r3, #4
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	f000 8097 	beq.w	8006e64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d36:	2300      	movs	r3, #0
 8006d38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d3a:	4b81      	ldr	r3, [pc, #516]	; (8006f40 <HAL_RCC_OscConfig+0x470>)
 8006d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d10f      	bne.n	8006d66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d46:	2300      	movs	r3, #0
 8006d48:	60bb      	str	r3, [r7, #8]
 8006d4a:	4b7d      	ldr	r3, [pc, #500]	; (8006f40 <HAL_RCC_OscConfig+0x470>)
 8006d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4e:	4a7c      	ldr	r2, [pc, #496]	; (8006f40 <HAL_RCC_OscConfig+0x470>)
 8006d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d54:	6413      	str	r3, [r2, #64]	; 0x40
 8006d56:	4b7a      	ldr	r3, [pc, #488]	; (8006f40 <HAL_RCC_OscConfig+0x470>)
 8006d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d5e:	60bb      	str	r3, [r7, #8]
 8006d60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d62:	2301      	movs	r3, #1
 8006d64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d66:	4b77      	ldr	r3, [pc, #476]	; (8006f44 <HAL_RCC_OscConfig+0x474>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d118      	bne.n	8006da4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d72:	4b74      	ldr	r3, [pc, #464]	; (8006f44 <HAL_RCC_OscConfig+0x474>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a73      	ldr	r2, [pc, #460]	; (8006f44 <HAL_RCC_OscConfig+0x474>)
 8006d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d7e:	f7fd ff61 	bl	8004c44 <HAL_GetTick>
 8006d82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d84:	e008      	b.n	8006d98 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d86:	f7fd ff5d 	bl	8004c44 <HAL_GetTick>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	1ad3      	subs	r3, r2, r3
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	d901      	bls.n	8006d98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006d94:	2303      	movs	r3, #3
 8006d96:	e10c      	b.n	8006fb2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d98:	4b6a      	ldr	r3, [pc, #424]	; (8006f44 <HAL_RCC_OscConfig+0x474>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d0f0      	beq.n	8006d86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d106      	bne.n	8006dba <HAL_RCC_OscConfig+0x2ea>
 8006dac:	4b64      	ldr	r3, [pc, #400]	; (8006f40 <HAL_RCC_OscConfig+0x470>)
 8006dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db0:	4a63      	ldr	r2, [pc, #396]	; (8006f40 <HAL_RCC_OscConfig+0x470>)
 8006db2:	f043 0301 	orr.w	r3, r3, #1
 8006db6:	6713      	str	r3, [r2, #112]	; 0x70
 8006db8:	e01c      	b.n	8006df4 <HAL_RCC_OscConfig+0x324>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	2b05      	cmp	r3, #5
 8006dc0:	d10c      	bne.n	8006ddc <HAL_RCC_OscConfig+0x30c>
 8006dc2:	4b5f      	ldr	r3, [pc, #380]	; (8006f40 <HAL_RCC_OscConfig+0x470>)
 8006dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dc6:	4a5e      	ldr	r2, [pc, #376]	; (8006f40 <HAL_RCC_OscConfig+0x470>)
 8006dc8:	f043 0304 	orr.w	r3, r3, #4
 8006dcc:	6713      	str	r3, [r2, #112]	; 0x70
 8006dce:	4b5c      	ldr	r3, [pc, #368]	; (8006f40 <HAL_RCC_OscConfig+0x470>)
 8006dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd2:	4a5b      	ldr	r2, [pc, #364]	; (8006f40 <HAL_RCC_OscConfig+0x470>)
 8006dd4:	f043 0301 	orr.w	r3, r3, #1
 8006dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8006dda:	e00b      	b.n	8006df4 <HAL_RCC_OscConfig+0x324>
 8006ddc:	4b58      	ldr	r3, [pc, #352]	; (8006f40 <HAL_RCC_OscConfig+0x470>)
 8006dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006de0:	4a57      	ldr	r2, [pc, #348]	; (8006f40 <HAL_RCC_OscConfig+0x470>)
 8006de2:	f023 0301 	bic.w	r3, r3, #1
 8006de6:	6713      	str	r3, [r2, #112]	; 0x70
 8006de8:	4b55      	ldr	r3, [pc, #340]	; (8006f40 <HAL_RCC_OscConfig+0x470>)
 8006dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dec:	4a54      	ldr	r2, [pc, #336]	; (8006f40 <HAL_RCC_OscConfig+0x470>)
 8006dee:	f023 0304 	bic.w	r3, r3, #4
 8006df2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	689b      	ldr	r3, [r3, #8]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d015      	beq.n	8006e28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dfc:	f7fd ff22 	bl	8004c44 <HAL_GetTick>
 8006e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e02:	e00a      	b.n	8006e1a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e04:	f7fd ff1e 	bl	8004c44 <HAL_GetTick>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	1ad3      	subs	r3, r2, r3
 8006e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d901      	bls.n	8006e1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006e16:	2303      	movs	r3, #3
 8006e18:	e0cb      	b.n	8006fb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e1a:	4b49      	ldr	r3, [pc, #292]	; (8006f40 <HAL_RCC_OscConfig+0x470>)
 8006e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e1e:	f003 0302 	and.w	r3, r3, #2
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d0ee      	beq.n	8006e04 <HAL_RCC_OscConfig+0x334>
 8006e26:	e014      	b.n	8006e52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e28:	f7fd ff0c 	bl	8004c44 <HAL_GetTick>
 8006e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e2e:	e00a      	b.n	8006e46 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e30:	f7fd ff08 	bl	8004c44 <HAL_GetTick>
 8006e34:	4602      	mov	r2, r0
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d901      	bls.n	8006e46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006e42:	2303      	movs	r3, #3
 8006e44:	e0b5      	b.n	8006fb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e46:	4b3e      	ldr	r3, [pc, #248]	; (8006f40 <HAL_RCC_OscConfig+0x470>)
 8006e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e4a:	f003 0302 	and.w	r3, r3, #2
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1ee      	bne.n	8006e30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e52:	7dfb      	ldrb	r3, [r7, #23]
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d105      	bne.n	8006e64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e58:	4b39      	ldr	r3, [pc, #228]	; (8006f40 <HAL_RCC_OscConfig+0x470>)
 8006e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e5c:	4a38      	ldr	r2, [pc, #224]	; (8006f40 <HAL_RCC_OscConfig+0x470>)
 8006e5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e62:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	699b      	ldr	r3, [r3, #24]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	f000 80a1 	beq.w	8006fb0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e6e:	4b34      	ldr	r3, [pc, #208]	; (8006f40 <HAL_RCC_OscConfig+0x470>)
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	f003 030c 	and.w	r3, r3, #12
 8006e76:	2b08      	cmp	r3, #8
 8006e78:	d05c      	beq.n	8006f34 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	699b      	ldr	r3, [r3, #24]
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d141      	bne.n	8006f06 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e82:	4b31      	ldr	r3, [pc, #196]	; (8006f48 <HAL_RCC_OscConfig+0x478>)
 8006e84:	2200      	movs	r2, #0
 8006e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e88:	f7fd fedc 	bl	8004c44 <HAL_GetTick>
 8006e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e8e:	e008      	b.n	8006ea2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e90:	f7fd fed8 	bl	8004c44 <HAL_GetTick>
 8006e94:	4602      	mov	r2, r0
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	1ad3      	subs	r3, r2, r3
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	d901      	bls.n	8006ea2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	e087      	b.n	8006fb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ea2:	4b27      	ldr	r3, [pc, #156]	; (8006f40 <HAL_RCC_OscConfig+0x470>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1f0      	bne.n	8006e90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	69da      	ldr	r2, [r3, #28]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a1b      	ldr	r3, [r3, #32]
 8006eb6:	431a      	orrs	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ebc:	019b      	lsls	r3, r3, #6
 8006ebe:	431a      	orrs	r2, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec4:	085b      	lsrs	r3, r3, #1
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	041b      	lsls	r3, r3, #16
 8006eca:	431a      	orrs	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed0:	061b      	lsls	r3, r3, #24
 8006ed2:	491b      	ldr	r1, [pc, #108]	; (8006f40 <HAL_RCC_OscConfig+0x470>)
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ed8:	4b1b      	ldr	r3, [pc, #108]	; (8006f48 <HAL_RCC_OscConfig+0x478>)
 8006eda:	2201      	movs	r2, #1
 8006edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ede:	f7fd feb1 	bl	8004c44 <HAL_GetTick>
 8006ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ee4:	e008      	b.n	8006ef8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ee6:	f7fd fead 	bl	8004c44 <HAL_GetTick>
 8006eea:	4602      	mov	r2, r0
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d901      	bls.n	8006ef8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006ef4:	2303      	movs	r3, #3
 8006ef6:	e05c      	b.n	8006fb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ef8:	4b11      	ldr	r3, [pc, #68]	; (8006f40 <HAL_RCC_OscConfig+0x470>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d0f0      	beq.n	8006ee6 <HAL_RCC_OscConfig+0x416>
 8006f04:	e054      	b.n	8006fb0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f06:	4b10      	ldr	r3, [pc, #64]	; (8006f48 <HAL_RCC_OscConfig+0x478>)
 8006f08:	2200      	movs	r2, #0
 8006f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f0c:	f7fd fe9a 	bl	8004c44 <HAL_GetTick>
 8006f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f12:	e008      	b.n	8006f26 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f14:	f7fd fe96 	bl	8004c44 <HAL_GetTick>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	1ad3      	subs	r3, r2, r3
 8006f1e:	2b02      	cmp	r3, #2
 8006f20:	d901      	bls.n	8006f26 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006f22:	2303      	movs	r3, #3
 8006f24:	e045      	b.n	8006fb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f26:	4b06      	ldr	r3, [pc, #24]	; (8006f40 <HAL_RCC_OscConfig+0x470>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d1f0      	bne.n	8006f14 <HAL_RCC_OscConfig+0x444>
 8006f32:	e03d      	b.n	8006fb0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	699b      	ldr	r3, [r3, #24]
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d107      	bne.n	8006f4c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e038      	b.n	8006fb2 <HAL_RCC_OscConfig+0x4e2>
 8006f40:	40023800 	.word	0x40023800
 8006f44:	40007000 	.word	0x40007000
 8006f48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006f4c:	4b1b      	ldr	r3, [pc, #108]	; (8006fbc <HAL_RCC_OscConfig+0x4ec>)
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	699b      	ldr	r3, [r3, #24]
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d028      	beq.n	8006fac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d121      	bne.n	8006fac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d11a      	bne.n	8006fac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d111      	bne.n	8006fac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f92:	085b      	lsrs	r3, r3, #1
 8006f94:	3b01      	subs	r3, #1
 8006f96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d107      	bne.n	8006fac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d001      	beq.n	8006fb0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	e000      	b.n	8006fb2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3718      	adds	r7, #24
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	40023800 	.word	0x40023800

08006fc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d101      	bne.n	8006fd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e0cc      	b.n	800716e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006fd4:	4b68      	ldr	r3, [pc, #416]	; (8007178 <HAL_RCC_ClockConfig+0x1b8>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 0307 	and.w	r3, r3, #7
 8006fdc:	683a      	ldr	r2, [r7, #0]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d90c      	bls.n	8006ffc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fe2:	4b65      	ldr	r3, [pc, #404]	; (8007178 <HAL_RCC_ClockConfig+0x1b8>)
 8006fe4:	683a      	ldr	r2, [r7, #0]
 8006fe6:	b2d2      	uxtb	r2, r2
 8006fe8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fea:	4b63      	ldr	r3, [pc, #396]	; (8007178 <HAL_RCC_ClockConfig+0x1b8>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f003 0307 	and.w	r3, r3, #7
 8006ff2:	683a      	ldr	r2, [r7, #0]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d001      	beq.n	8006ffc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e0b8      	b.n	800716e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 0302 	and.w	r3, r3, #2
 8007004:	2b00      	cmp	r3, #0
 8007006:	d020      	beq.n	800704a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0304 	and.w	r3, r3, #4
 8007010:	2b00      	cmp	r3, #0
 8007012:	d005      	beq.n	8007020 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007014:	4b59      	ldr	r3, [pc, #356]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	4a58      	ldr	r2, [pc, #352]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 800701a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800701e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 0308 	and.w	r3, r3, #8
 8007028:	2b00      	cmp	r3, #0
 800702a:	d005      	beq.n	8007038 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800702c:	4b53      	ldr	r3, [pc, #332]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	4a52      	ldr	r2, [pc, #328]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 8007032:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007036:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007038:	4b50      	ldr	r3, [pc, #320]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	494d      	ldr	r1, [pc, #308]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 8007046:	4313      	orrs	r3, r2
 8007048:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 0301 	and.w	r3, r3, #1
 8007052:	2b00      	cmp	r3, #0
 8007054:	d044      	beq.n	80070e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	2b01      	cmp	r3, #1
 800705c:	d107      	bne.n	800706e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800705e:	4b47      	ldr	r3, [pc, #284]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007066:	2b00      	cmp	r3, #0
 8007068:	d119      	bne.n	800709e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e07f      	b.n	800716e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	2b02      	cmp	r3, #2
 8007074:	d003      	beq.n	800707e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800707a:	2b03      	cmp	r3, #3
 800707c:	d107      	bne.n	800708e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800707e:	4b3f      	ldr	r3, [pc, #252]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007086:	2b00      	cmp	r3, #0
 8007088:	d109      	bne.n	800709e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	e06f      	b.n	800716e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800708e:	4b3b      	ldr	r3, [pc, #236]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 0302 	and.w	r3, r3, #2
 8007096:	2b00      	cmp	r3, #0
 8007098:	d101      	bne.n	800709e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e067      	b.n	800716e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800709e:	4b37      	ldr	r3, [pc, #220]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	f023 0203 	bic.w	r2, r3, #3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	4934      	ldr	r1, [pc, #208]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 80070ac:	4313      	orrs	r3, r2
 80070ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80070b0:	f7fd fdc8 	bl	8004c44 <HAL_GetTick>
 80070b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070b6:	e00a      	b.n	80070ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070b8:	f7fd fdc4 	bl	8004c44 <HAL_GetTick>
 80070bc:	4602      	mov	r2, r0
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d901      	bls.n	80070ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80070ca:	2303      	movs	r3, #3
 80070cc:	e04f      	b.n	800716e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070ce:	4b2b      	ldr	r3, [pc, #172]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	f003 020c 	and.w	r2, r3, #12
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	429a      	cmp	r2, r3
 80070de:	d1eb      	bne.n	80070b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80070e0:	4b25      	ldr	r3, [pc, #148]	; (8007178 <HAL_RCC_ClockConfig+0x1b8>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 0307 	and.w	r3, r3, #7
 80070e8:	683a      	ldr	r2, [r7, #0]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d20c      	bcs.n	8007108 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070ee:	4b22      	ldr	r3, [pc, #136]	; (8007178 <HAL_RCC_ClockConfig+0x1b8>)
 80070f0:	683a      	ldr	r2, [r7, #0]
 80070f2:	b2d2      	uxtb	r2, r2
 80070f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070f6:	4b20      	ldr	r3, [pc, #128]	; (8007178 <HAL_RCC_ClockConfig+0x1b8>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 0307 	and.w	r3, r3, #7
 80070fe:	683a      	ldr	r2, [r7, #0]
 8007100:	429a      	cmp	r2, r3
 8007102:	d001      	beq.n	8007108 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	e032      	b.n	800716e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 0304 	and.w	r3, r3, #4
 8007110:	2b00      	cmp	r3, #0
 8007112:	d008      	beq.n	8007126 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007114:	4b19      	ldr	r3, [pc, #100]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	4916      	ldr	r1, [pc, #88]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 8007122:	4313      	orrs	r3, r2
 8007124:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 0308 	and.w	r3, r3, #8
 800712e:	2b00      	cmp	r3, #0
 8007130:	d009      	beq.n	8007146 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007132:	4b12      	ldr	r3, [pc, #72]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	00db      	lsls	r3, r3, #3
 8007140:	490e      	ldr	r1, [pc, #56]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 8007142:	4313      	orrs	r3, r2
 8007144:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007146:	f000 f821 	bl	800718c <HAL_RCC_GetSysClockFreq>
 800714a:	4602      	mov	r2, r0
 800714c:	4b0b      	ldr	r3, [pc, #44]	; (800717c <HAL_RCC_ClockConfig+0x1bc>)
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	091b      	lsrs	r3, r3, #4
 8007152:	f003 030f 	and.w	r3, r3, #15
 8007156:	490a      	ldr	r1, [pc, #40]	; (8007180 <HAL_RCC_ClockConfig+0x1c0>)
 8007158:	5ccb      	ldrb	r3, [r1, r3]
 800715a:	fa22 f303 	lsr.w	r3, r2, r3
 800715e:	4a09      	ldr	r2, [pc, #36]	; (8007184 <HAL_RCC_ClockConfig+0x1c4>)
 8007160:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007162:	4b09      	ldr	r3, [pc, #36]	; (8007188 <HAL_RCC_ClockConfig+0x1c8>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4618      	mov	r0, r3
 8007168:	f7fd fd28 	bl	8004bbc <HAL_InitTick>

  return HAL_OK;
 800716c:	2300      	movs	r3, #0
}
 800716e:	4618      	mov	r0, r3
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	40023c00 	.word	0x40023c00
 800717c:	40023800 	.word	0x40023800
 8007180:	0800ef74 	.word	0x0800ef74
 8007184:	2000000c 	.word	0x2000000c
 8007188:	20000010 	.word	0x20000010

0800718c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800718c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007190:	b090      	sub	sp, #64	; 0x40
 8007192:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007194:	2300      	movs	r3, #0
 8007196:	637b      	str	r3, [r7, #52]	; 0x34
 8007198:	2300      	movs	r3, #0
 800719a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800719c:	2300      	movs	r3, #0
 800719e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80071a0:	2300      	movs	r3, #0
 80071a2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80071a4:	4b59      	ldr	r3, [pc, #356]	; (800730c <HAL_RCC_GetSysClockFreq+0x180>)
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	f003 030c 	and.w	r3, r3, #12
 80071ac:	2b08      	cmp	r3, #8
 80071ae:	d00d      	beq.n	80071cc <HAL_RCC_GetSysClockFreq+0x40>
 80071b0:	2b08      	cmp	r3, #8
 80071b2:	f200 80a1 	bhi.w	80072f8 <HAL_RCC_GetSysClockFreq+0x16c>
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d002      	beq.n	80071c0 <HAL_RCC_GetSysClockFreq+0x34>
 80071ba:	2b04      	cmp	r3, #4
 80071bc:	d003      	beq.n	80071c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80071be:	e09b      	b.n	80072f8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80071c0:	4b53      	ldr	r3, [pc, #332]	; (8007310 <HAL_RCC_GetSysClockFreq+0x184>)
 80071c2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80071c4:	e09b      	b.n	80072fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80071c6:	4b53      	ldr	r3, [pc, #332]	; (8007314 <HAL_RCC_GetSysClockFreq+0x188>)
 80071c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80071ca:	e098      	b.n	80072fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80071cc:	4b4f      	ldr	r3, [pc, #316]	; (800730c <HAL_RCC_GetSysClockFreq+0x180>)
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071d4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80071d6:	4b4d      	ldr	r3, [pc, #308]	; (800730c <HAL_RCC_GetSysClockFreq+0x180>)
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d028      	beq.n	8007234 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071e2:	4b4a      	ldr	r3, [pc, #296]	; (800730c <HAL_RCC_GetSysClockFreq+0x180>)
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	099b      	lsrs	r3, r3, #6
 80071e8:	2200      	movs	r2, #0
 80071ea:	623b      	str	r3, [r7, #32]
 80071ec:	627a      	str	r2, [r7, #36]	; 0x24
 80071ee:	6a3b      	ldr	r3, [r7, #32]
 80071f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80071f4:	2100      	movs	r1, #0
 80071f6:	4b47      	ldr	r3, [pc, #284]	; (8007314 <HAL_RCC_GetSysClockFreq+0x188>)
 80071f8:	fb03 f201 	mul.w	r2, r3, r1
 80071fc:	2300      	movs	r3, #0
 80071fe:	fb00 f303 	mul.w	r3, r0, r3
 8007202:	4413      	add	r3, r2
 8007204:	4a43      	ldr	r2, [pc, #268]	; (8007314 <HAL_RCC_GetSysClockFreq+0x188>)
 8007206:	fba0 1202 	umull	r1, r2, r0, r2
 800720a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800720c:	460a      	mov	r2, r1
 800720e:	62ba      	str	r2, [r7, #40]	; 0x28
 8007210:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007212:	4413      	add	r3, r2
 8007214:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007218:	2200      	movs	r2, #0
 800721a:	61bb      	str	r3, [r7, #24]
 800721c:	61fa      	str	r2, [r7, #28]
 800721e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007222:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007226:	f7f9 fd3f 	bl	8000ca8 <__aeabi_uldivmod>
 800722a:	4602      	mov	r2, r0
 800722c:	460b      	mov	r3, r1
 800722e:	4613      	mov	r3, r2
 8007230:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007232:	e053      	b.n	80072dc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007234:	4b35      	ldr	r3, [pc, #212]	; (800730c <HAL_RCC_GetSysClockFreq+0x180>)
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	099b      	lsrs	r3, r3, #6
 800723a:	2200      	movs	r2, #0
 800723c:	613b      	str	r3, [r7, #16]
 800723e:	617a      	str	r2, [r7, #20]
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007246:	f04f 0b00 	mov.w	fp, #0
 800724a:	4652      	mov	r2, sl
 800724c:	465b      	mov	r3, fp
 800724e:	f04f 0000 	mov.w	r0, #0
 8007252:	f04f 0100 	mov.w	r1, #0
 8007256:	0159      	lsls	r1, r3, #5
 8007258:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800725c:	0150      	lsls	r0, r2, #5
 800725e:	4602      	mov	r2, r0
 8007260:	460b      	mov	r3, r1
 8007262:	ebb2 080a 	subs.w	r8, r2, sl
 8007266:	eb63 090b 	sbc.w	r9, r3, fp
 800726a:	f04f 0200 	mov.w	r2, #0
 800726e:	f04f 0300 	mov.w	r3, #0
 8007272:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007276:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800727a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800727e:	ebb2 0408 	subs.w	r4, r2, r8
 8007282:	eb63 0509 	sbc.w	r5, r3, r9
 8007286:	f04f 0200 	mov.w	r2, #0
 800728a:	f04f 0300 	mov.w	r3, #0
 800728e:	00eb      	lsls	r3, r5, #3
 8007290:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007294:	00e2      	lsls	r2, r4, #3
 8007296:	4614      	mov	r4, r2
 8007298:	461d      	mov	r5, r3
 800729a:	eb14 030a 	adds.w	r3, r4, sl
 800729e:	603b      	str	r3, [r7, #0]
 80072a0:	eb45 030b 	adc.w	r3, r5, fp
 80072a4:	607b      	str	r3, [r7, #4]
 80072a6:	f04f 0200 	mov.w	r2, #0
 80072aa:	f04f 0300 	mov.w	r3, #0
 80072ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80072b2:	4629      	mov	r1, r5
 80072b4:	028b      	lsls	r3, r1, #10
 80072b6:	4621      	mov	r1, r4
 80072b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80072bc:	4621      	mov	r1, r4
 80072be:	028a      	lsls	r2, r1, #10
 80072c0:	4610      	mov	r0, r2
 80072c2:	4619      	mov	r1, r3
 80072c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072c6:	2200      	movs	r2, #0
 80072c8:	60bb      	str	r3, [r7, #8]
 80072ca:	60fa      	str	r2, [r7, #12]
 80072cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072d0:	f7f9 fcea 	bl	8000ca8 <__aeabi_uldivmod>
 80072d4:	4602      	mov	r2, r0
 80072d6:	460b      	mov	r3, r1
 80072d8:	4613      	mov	r3, r2
 80072da:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80072dc:	4b0b      	ldr	r3, [pc, #44]	; (800730c <HAL_RCC_GetSysClockFreq+0x180>)
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	0c1b      	lsrs	r3, r3, #16
 80072e2:	f003 0303 	and.w	r3, r3, #3
 80072e6:	3301      	adds	r3, #1
 80072e8:	005b      	lsls	r3, r3, #1
 80072ea:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80072ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80072ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072f4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80072f6:	e002      	b.n	80072fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80072f8:	4b05      	ldr	r3, [pc, #20]	; (8007310 <HAL_RCC_GetSysClockFreq+0x184>)
 80072fa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80072fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80072fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007300:	4618      	mov	r0, r3
 8007302:	3740      	adds	r7, #64	; 0x40
 8007304:	46bd      	mov	sp, r7
 8007306:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800730a:	bf00      	nop
 800730c:	40023800 	.word	0x40023800
 8007310:	00f42400 	.word	0x00f42400
 8007314:	017d7840 	.word	0x017d7840

08007318 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007318:	b480      	push	{r7}
 800731a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800731c:	4b03      	ldr	r3, [pc, #12]	; (800732c <HAL_RCC_GetHCLKFreq+0x14>)
 800731e:	681b      	ldr	r3, [r3, #0]
}
 8007320:	4618      	mov	r0, r3
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	2000000c 	.word	0x2000000c

08007330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007334:	f7ff fff0 	bl	8007318 <HAL_RCC_GetHCLKFreq>
 8007338:	4602      	mov	r2, r0
 800733a:	4b05      	ldr	r3, [pc, #20]	; (8007350 <HAL_RCC_GetPCLK1Freq+0x20>)
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	0a9b      	lsrs	r3, r3, #10
 8007340:	f003 0307 	and.w	r3, r3, #7
 8007344:	4903      	ldr	r1, [pc, #12]	; (8007354 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007346:	5ccb      	ldrb	r3, [r1, r3]
 8007348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800734c:	4618      	mov	r0, r3
 800734e:	bd80      	pop	{r7, pc}
 8007350:	40023800 	.word	0x40023800
 8007354:	0800ef84 	.word	0x0800ef84

08007358 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800735c:	f7ff ffdc 	bl	8007318 <HAL_RCC_GetHCLKFreq>
 8007360:	4602      	mov	r2, r0
 8007362:	4b05      	ldr	r3, [pc, #20]	; (8007378 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	0b5b      	lsrs	r3, r3, #13
 8007368:	f003 0307 	and.w	r3, r3, #7
 800736c:	4903      	ldr	r1, [pc, #12]	; (800737c <HAL_RCC_GetPCLK2Freq+0x24>)
 800736e:	5ccb      	ldrb	r3, [r1, r3]
 8007370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007374:	4618      	mov	r0, r3
 8007376:	bd80      	pop	{r7, pc}
 8007378:	40023800 	.word	0x40023800
 800737c:	0800ef84 	.word	0x0800ef84

08007380 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b082      	sub	sp, #8
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d101      	bne.n	8007392 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	e041      	b.n	8007416 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007398:	b2db      	uxtb	r3, r3
 800739a:	2b00      	cmp	r3, #0
 800739c:	d106      	bne.n	80073ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2200      	movs	r2, #0
 80073a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f7fd fa16 	bl	80047d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2202      	movs	r2, #2
 80073b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	3304      	adds	r3, #4
 80073bc:	4619      	mov	r1, r3
 80073be:	4610      	mov	r0, r2
 80073c0:	f000 ff8a 	bl	80082d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3708      	adds	r7, #8
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}

0800741e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800741e:	b580      	push	{r7, lr}
 8007420:	b082      	sub	sp, #8
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d101      	bne.n	8007430 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	e041      	b.n	80074b4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007436:	b2db      	uxtb	r3, r3
 8007438:	2b00      	cmp	r3, #0
 800743a:	d106      	bne.n	800744a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f7fd f8bb 	bl	80045c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2202      	movs	r2, #2
 800744e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	3304      	adds	r3, #4
 800745a:	4619      	mov	r1, r3
 800745c:	4610      	mov	r0, r2
 800745e:	f000 ff3b 	bl	80082d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2201      	movs	r2, #1
 8007466:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2201      	movs	r2, #1
 800746e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2201      	movs	r2, #1
 8007476:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2201      	movs	r2, #1
 800747e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2201      	movs	r2, #1
 8007486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2201      	movs	r2, #1
 800748e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2201      	movs	r2, #1
 8007496:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2201      	movs	r2, #1
 800749e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2201      	movs	r2, #1
 80074a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2201      	movs	r2, #1
 80074ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074b2:	2300      	movs	r3, #0
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3708      	adds	r7, #8
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d109      	bne.n	80074e0 <HAL_TIM_PWM_Start+0x24>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	bf14      	ite	ne
 80074d8:	2301      	movne	r3, #1
 80074da:	2300      	moveq	r3, #0
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	e022      	b.n	8007526 <HAL_TIM_PWM_Start+0x6a>
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	2b04      	cmp	r3, #4
 80074e4:	d109      	bne.n	80074fa <HAL_TIM_PWM_Start+0x3e>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	bf14      	ite	ne
 80074f2:	2301      	movne	r3, #1
 80074f4:	2300      	moveq	r3, #0
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	e015      	b.n	8007526 <HAL_TIM_PWM_Start+0x6a>
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	2b08      	cmp	r3, #8
 80074fe:	d109      	bne.n	8007514 <HAL_TIM_PWM_Start+0x58>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007506:	b2db      	uxtb	r3, r3
 8007508:	2b01      	cmp	r3, #1
 800750a:	bf14      	ite	ne
 800750c:	2301      	movne	r3, #1
 800750e:	2300      	moveq	r3, #0
 8007510:	b2db      	uxtb	r3, r3
 8007512:	e008      	b.n	8007526 <HAL_TIM_PWM_Start+0x6a>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800751a:	b2db      	uxtb	r3, r3
 800751c:	2b01      	cmp	r3, #1
 800751e:	bf14      	ite	ne
 8007520:	2301      	movne	r3, #1
 8007522:	2300      	moveq	r3, #0
 8007524:	b2db      	uxtb	r3, r3
 8007526:	2b00      	cmp	r3, #0
 8007528:	d001      	beq.n	800752e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	e07c      	b.n	8007628 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d104      	bne.n	800753e <HAL_TIM_PWM_Start+0x82>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2202      	movs	r2, #2
 8007538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800753c:	e013      	b.n	8007566 <HAL_TIM_PWM_Start+0xaa>
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	2b04      	cmp	r3, #4
 8007542:	d104      	bne.n	800754e <HAL_TIM_PWM_Start+0x92>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2202      	movs	r2, #2
 8007548:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800754c:	e00b      	b.n	8007566 <HAL_TIM_PWM_Start+0xaa>
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	2b08      	cmp	r3, #8
 8007552:	d104      	bne.n	800755e <HAL_TIM_PWM_Start+0xa2>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2202      	movs	r2, #2
 8007558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800755c:	e003      	b.n	8007566 <HAL_TIM_PWM_Start+0xaa>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2202      	movs	r2, #2
 8007562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2201      	movs	r2, #1
 800756c:	6839      	ldr	r1, [r7, #0]
 800756e:	4618      	mov	r0, r3
 8007570:	f001 fac6 	bl	8008b00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a2d      	ldr	r2, [pc, #180]	; (8007630 <HAL_TIM_PWM_Start+0x174>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d004      	beq.n	8007588 <HAL_TIM_PWM_Start+0xcc>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a2c      	ldr	r2, [pc, #176]	; (8007634 <HAL_TIM_PWM_Start+0x178>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d101      	bne.n	800758c <HAL_TIM_PWM_Start+0xd0>
 8007588:	2301      	movs	r3, #1
 800758a:	e000      	b.n	800758e <HAL_TIM_PWM_Start+0xd2>
 800758c:	2300      	movs	r3, #0
 800758e:	2b00      	cmp	r3, #0
 8007590:	d007      	beq.n	80075a2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80075a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a22      	ldr	r2, [pc, #136]	; (8007630 <HAL_TIM_PWM_Start+0x174>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d022      	beq.n	80075f2 <HAL_TIM_PWM_Start+0x136>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075b4:	d01d      	beq.n	80075f2 <HAL_TIM_PWM_Start+0x136>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a1f      	ldr	r2, [pc, #124]	; (8007638 <HAL_TIM_PWM_Start+0x17c>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d018      	beq.n	80075f2 <HAL_TIM_PWM_Start+0x136>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a1d      	ldr	r2, [pc, #116]	; (800763c <HAL_TIM_PWM_Start+0x180>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d013      	beq.n	80075f2 <HAL_TIM_PWM_Start+0x136>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a1c      	ldr	r2, [pc, #112]	; (8007640 <HAL_TIM_PWM_Start+0x184>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d00e      	beq.n	80075f2 <HAL_TIM_PWM_Start+0x136>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a16      	ldr	r2, [pc, #88]	; (8007634 <HAL_TIM_PWM_Start+0x178>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d009      	beq.n	80075f2 <HAL_TIM_PWM_Start+0x136>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a18      	ldr	r2, [pc, #96]	; (8007644 <HAL_TIM_PWM_Start+0x188>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d004      	beq.n	80075f2 <HAL_TIM_PWM_Start+0x136>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a16      	ldr	r2, [pc, #88]	; (8007648 <HAL_TIM_PWM_Start+0x18c>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d111      	bne.n	8007616 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	f003 0307 	and.w	r3, r3, #7
 80075fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2b06      	cmp	r3, #6
 8007602:	d010      	beq.n	8007626 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f042 0201 	orr.w	r2, r2, #1
 8007612:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007614:	e007      	b.n	8007626 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f042 0201 	orr.w	r2, r2, #1
 8007624:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007626:	2300      	movs	r3, #0
}
 8007628:	4618      	mov	r0, r3
 800762a:	3710      	adds	r7, #16
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}
 8007630:	40010000 	.word	0x40010000
 8007634:	40010400 	.word	0x40010400
 8007638:	40000400 	.word	0x40000400
 800763c:	40000800 	.word	0x40000800
 8007640:	40000c00 	.word	0x40000c00
 8007644:	40014000 	.word	0x40014000
 8007648:	40001800 	.word	0x40001800

0800764c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d101      	bne.n	800765e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	e041      	b.n	80076e2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007664:	b2db      	uxtb	r3, r3
 8007666:	2b00      	cmp	r3, #0
 8007668:	d106      	bne.n	8007678 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f7fd f860 	bl	8004738 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2202      	movs	r2, #2
 800767c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	3304      	adds	r3, #4
 8007688:	4619      	mov	r1, r3
 800768a:	4610      	mov	r0, r2
 800768c:	f000 fe24 	bl	80082d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2201      	movs	r2, #1
 8007694:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3708      	adds	r7, #8
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
	...

080076ec <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80076f6:	2300      	movs	r3, #0
 80076f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d104      	bne.n	800770a <HAL_TIM_IC_Start_IT+0x1e>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007706:	b2db      	uxtb	r3, r3
 8007708:	e013      	b.n	8007732 <HAL_TIM_IC_Start_IT+0x46>
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	2b04      	cmp	r3, #4
 800770e:	d104      	bne.n	800771a <HAL_TIM_IC_Start_IT+0x2e>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007716:	b2db      	uxtb	r3, r3
 8007718:	e00b      	b.n	8007732 <HAL_TIM_IC_Start_IT+0x46>
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	2b08      	cmp	r3, #8
 800771e:	d104      	bne.n	800772a <HAL_TIM_IC_Start_IT+0x3e>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007726:	b2db      	uxtb	r3, r3
 8007728:	e003      	b.n	8007732 <HAL_TIM_IC_Start_IT+0x46>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007730:	b2db      	uxtb	r3, r3
 8007732:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d104      	bne.n	8007744 <HAL_TIM_IC_Start_IT+0x58>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007740:	b2db      	uxtb	r3, r3
 8007742:	e013      	b.n	800776c <HAL_TIM_IC_Start_IT+0x80>
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	2b04      	cmp	r3, #4
 8007748:	d104      	bne.n	8007754 <HAL_TIM_IC_Start_IT+0x68>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007750:	b2db      	uxtb	r3, r3
 8007752:	e00b      	b.n	800776c <HAL_TIM_IC_Start_IT+0x80>
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	2b08      	cmp	r3, #8
 8007758:	d104      	bne.n	8007764 <HAL_TIM_IC_Start_IT+0x78>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007760:	b2db      	uxtb	r3, r3
 8007762:	e003      	b.n	800776c <HAL_TIM_IC_Start_IT+0x80>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800776a:	b2db      	uxtb	r3, r3
 800776c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800776e:	7bbb      	ldrb	r3, [r7, #14]
 8007770:	2b01      	cmp	r3, #1
 8007772:	d102      	bne.n	800777a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007774:	7b7b      	ldrb	r3, [r7, #13]
 8007776:	2b01      	cmp	r3, #1
 8007778:	d001      	beq.n	800777e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	e0cc      	b.n	8007918 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d104      	bne.n	800778e <HAL_TIM_IC_Start_IT+0xa2>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2202      	movs	r2, #2
 8007788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800778c:	e013      	b.n	80077b6 <HAL_TIM_IC_Start_IT+0xca>
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	2b04      	cmp	r3, #4
 8007792:	d104      	bne.n	800779e <HAL_TIM_IC_Start_IT+0xb2>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2202      	movs	r2, #2
 8007798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800779c:	e00b      	b.n	80077b6 <HAL_TIM_IC_Start_IT+0xca>
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	2b08      	cmp	r3, #8
 80077a2:	d104      	bne.n	80077ae <HAL_TIM_IC_Start_IT+0xc2>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2202      	movs	r2, #2
 80077a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077ac:	e003      	b.n	80077b6 <HAL_TIM_IC_Start_IT+0xca>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2202      	movs	r2, #2
 80077b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d104      	bne.n	80077c6 <HAL_TIM_IC_Start_IT+0xda>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2202      	movs	r2, #2
 80077c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80077c4:	e013      	b.n	80077ee <HAL_TIM_IC_Start_IT+0x102>
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	2b04      	cmp	r3, #4
 80077ca:	d104      	bne.n	80077d6 <HAL_TIM_IC_Start_IT+0xea>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2202      	movs	r2, #2
 80077d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80077d4:	e00b      	b.n	80077ee <HAL_TIM_IC_Start_IT+0x102>
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	2b08      	cmp	r3, #8
 80077da:	d104      	bne.n	80077e6 <HAL_TIM_IC_Start_IT+0xfa>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2202      	movs	r2, #2
 80077e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077e4:	e003      	b.n	80077ee <HAL_TIM_IC_Start_IT+0x102>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2202      	movs	r2, #2
 80077ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	2b0c      	cmp	r3, #12
 80077f2:	d841      	bhi.n	8007878 <HAL_TIM_IC_Start_IT+0x18c>
 80077f4:	a201      	add	r2, pc, #4	; (adr r2, 80077fc <HAL_TIM_IC_Start_IT+0x110>)
 80077f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077fa:	bf00      	nop
 80077fc:	08007831 	.word	0x08007831
 8007800:	08007879 	.word	0x08007879
 8007804:	08007879 	.word	0x08007879
 8007808:	08007879 	.word	0x08007879
 800780c:	08007843 	.word	0x08007843
 8007810:	08007879 	.word	0x08007879
 8007814:	08007879 	.word	0x08007879
 8007818:	08007879 	.word	0x08007879
 800781c:	08007855 	.word	0x08007855
 8007820:	08007879 	.word	0x08007879
 8007824:	08007879 	.word	0x08007879
 8007828:	08007879 	.word	0x08007879
 800782c:	08007867 	.word	0x08007867
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	68da      	ldr	r2, [r3, #12]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f042 0202 	orr.w	r2, r2, #2
 800783e:	60da      	str	r2, [r3, #12]
      break;
 8007840:	e01d      	b.n	800787e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	68da      	ldr	r2, [r3, #12]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f042 0204 	orr.w	r2, r2, #4
 8007850:	60da      	str	r2, [r3, #12]
      break;
 8007852:	e014      	b.n	800787e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	68da      	ldr	r2, [r3, #12]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f042 0208 	orr.w	r2, r2, #8
 8007862:	60da      	str	r2, [r3, #12]
      break;
 8007864:	e00b      	b.n	800787e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	68da      	ldr	r2, [r3, #12]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f042 0210 	orr.w	r2, r2, #16
 8007874:	60da      	str	r2, [r3, #12]
      break;
 8007876:	e002      	b.n	800787e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	73fb      	strb	r3, [r7, #15]
      break;
 800787c:	bf00      	nop
  }

  if (status == HAL_OK)
 800787e:	7bfb      	ldrb	r3, [r7, #15]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d148      	bne.n	8007916 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	2201      	movs	r2, #1
 800788a:	6839      	ldr	r1, [r7, #0]
 800788c:	4618      	mov	r0, r3
 800788e:	f001 f937 	bl	8008b00 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a22      	ldr	r2, [pc, #136]	; (8007920 <HAL_TIM_IC_Start_IT+0x234>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d022      	beq.n	80078e2 <HAL_TIM_IC_Start_IT+0x1f6>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078a4:	d01d      	beq.n	80078e2 <HAL_TIM_IC_Start_IT+0x1f6>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a1e      	ldr	r2, [pc, #120]	; (8007924 <HAL_TIM_IC_Start_IT+0x238>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d018      	beq.n	80078e2 <HAL_TIM_IC_Start_IT+0x1f6>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a1c      	ldr	r2, [pc, #112]	; (8007928 <HAL_TIM_IC_Start_IT+0x23c>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d013      	beq.n	80078e2 <HAL_TIM_IC_Start_IT+0x1f6>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a1b      	ldr	r2, [pc, #108]	; (800792c <HAL_TIM_IC_Start_IT+0x240>)
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d00e      	beq.n	80078e2 <HAL_TIM_IC_Start_IT+0x1f6>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4a19      	ldr	r2, [pc, #100]	; (8007930 <HAL_TIM_IC_Start_IT+0x244>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	d009      	beq.n	80078e2 <HAL_TIM_IC_Start_IT+0x1f6>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a18      	ldr	r2, [pc, #96]	; (8007934 <HAL_TIM_IC_Start_IT+0x248>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d004      	beq.n	80078e2 <HAL_TIM_IC_Start_IT+0x1f6>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a16      	ldr	r2, [pc, #88]	; (8007938 <HAL_TIM_IC_Start_IT+0x24c>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d111      	bne.n	8007906 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	f003 0307 	and.w	r3, r3, #7
 80078ec:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	2b06      	cmp	r3, #6
 80078f2:	d010      	beq.n	8007916 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f042 0201 	orr.w	r2, r2, #1
 8007902:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007904:	e007      	b.n	8007916 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f042 0201 	orr.w	r2, r2, #1
 8007914:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007916:	7bfb      	ldrb	r3, [r7, #15]
}
 8007918:	4618      	mov	r0, r3
 800791a:	3710      	adds	r7, #16
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}
 8007920:	40010000 	.word	0x40010000
 8007924:	40000400 	.word	0x40000400
 8007928:	40000800 	.word	0x40000800
 800792c:	40000c00 	.word	0x40000c00
 8007930:	40010400 	.word	0x40010400
 8007934:	40014000 	.word	0x40014000
 8007938:	40001800 	.word	0x40001800

0800793c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b086      	sub	sp, #24
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d101      	bne.n	8007950 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	e097      	b.n	8007a80 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007956:	b2db      	uxtb	r3, r3
 8007958:	2b00      	cmp	r3, #0
 800795a:	d106      	bne.n	800796a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f7fc fe4d 	bl	8004604 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2202      	movs	r2, #2
 800796e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	6812      	ldr	r2, [r2, #0]
 800797c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007980:	f023 0307 	bic.w	r3, r3, #7
 8007984:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	3304      	adds	r3, #4
 800798e:	4619      	mov	r1, r3
 8007990:	4610      	mov	r0, r2
 8007992:	f000 fca1 	bl	80082d8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	699b      	ldr	r3, [r3, #24]
 80079a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	6a1b      	ldr	r3, [r3, #32]
 80079ac:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	697a      	ldr	r2, [r7, #20]
 80079b4:	4313      	orrs	r3, r2
 80079b6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079be:	f023 0303 	bic.w	r3, r3, #3
 80079c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	689a      	ldr	r2, [r3, #8]
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	699b      	ldr	r3, [r3, #24]
 80079cc:	021b      	lsls	r3, r3, #8
 80079ce:	4313      	orrs	r3, r2
 80079d0:	693a      	ldr	r2, [r7, #16]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80079dc:	f023 030c 	bic.w	r3, r3, #12
 80079e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80079e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	68da      	ldr	r2, [r3, #12]
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	69db      	ldr	r3, [r3, #28]
 80079f6:	021b      	lsls	r3, r3, #8
 80079f8:	4313      	orrs	r3, r2
 80079fa:	693a      	ldr	r2, [r7, #16]
 80079fc:	4313      	orrs	r3, r2
 80079fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	691b      	ldr	r3, [r3, #16]
 8007a04:	011a      	lsls	r2, r3, #4
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	6a1b      	ldr	r3, [r3, #32]
 8007a0a:	031b      	lsls	r3, r3, #12
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	693a      	ldr	r2, [r7, #16]
 8007a10:	4313      	orrs	r3, r2
 8007a12:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007a1a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007a22:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	685a      	ldr	r2, [r3, #4]
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	695b      	ldr	r3, [r3, #20]
 8007a2c:	011b      	lsls	r3, r3, #4
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	68fa      	ldr	r2, [r7, #12]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	697a      	ldr	r2, [r7, #20]
 8007a3c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	693a      	ldr	r2, [r7, #16]
 8007a44:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	68fa      	ldr	r2, [r7, #12]
 8007a4c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2201      	movs	r2, #1
 8007a52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2201      	movs	r2, #1
 8007a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2201      	movs	r2, #1
 8007a62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2201      	movs	r2, #1
 8007a72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3718      	adds	r7, #24
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a98:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007aa0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007aa8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007ab0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d110      	bne.n	8007ada <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ab8:	7bfb      	ldrb	r3, [r7, #15]
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d102      	bne.n	8007ac4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007abe:	7b7b      	ldrb	r3, [r7, #13]
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d001      	beq.n	8007ac8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e069      	b.n	8007b9c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2202      	movs	r2, #2
 8007acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2202      	movs	r2, #2
 8007ad4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ad8:	e031      	b.n	8007b3e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	2b04      	cmp	r3, #4
 8007ade:	d110      	bne.n	8007b02 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ae0:	7bbb      	ldrb	r3, [r7, #14]
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d102      	bne.n	8007aec <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007ae6:	7b3b      	ldrb	r3, [r7, #12]
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d001      	beq.n	8007af0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	e055      	b.n	8007b9c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2202      	movs	r2, #2
 8007af4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2202      	movs	r2, #2
 8007afc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007b00:	e01d      	b.n	8007b3e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b02:	7bfb      	ldrb	r3, [r7, #15]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d108      	bne.n	8007b1a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b08:	7bbb      	ldrb	r3, [r7, #14]
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d105      	bne.n	8007b1a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007b0e:	7b7b      	ldrb	r3, [r7, #13]
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d102      	bne.n	8007b1a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007b14:	7b3b      	ldrb	r3, [r7, #12]
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d001      	beq.n	8007b1e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e03e      	b.n	8007b9c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2202      	movs	r2, #2
 8007b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2202      	movs	r2, #2
 8007b2a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2202      	movs	r2, #2
 8007b32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2202      	movs	r2, #2
 8007b3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d003      	beq.n	8007b4c <HAL_TIM_Encoder_Start+0xc4>
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	2b04      	cmp	r3, #4
 8007b48:	d008      	beq.n	8007b5c <HAL_TIM_Encoder_Start+0xd4>
 8007b4a:	e00f      	b.n	8007b6c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2201      	movs	r2, #1
 8007b52:	2100      	movs	r1, #0
 8007b54:	4618      	mov	r0, r3
 8007b56:	f000 ffd3 	bl	8008b00 <TIM_CCxChannelCmd>
      break;
 8007b5a:	e016      	b.n	8007b8a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	2201      	movs	r2, #1
 8007b62:	2104      	movs	r1, #4
 8007b64:	4618      	mov	r0, r3
 8007b66:	f000 ffcb 	bl	8008b00 <TIM_CCxChannelCmd>
      break;
 8007b6a:	e00e      	b.n	8007b8a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	2201      	movs	r2, #1
 8007b72:	2100      	movs	r1, #0
 8007b74:	4618      	mov	r0, r3
 8007b76:	f000 ffc3 	bl	8008b00 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	2104      	movs	r1, #4
 8007b82:	4618      	mov	r0, r3
 8007b84:	f000 ffbc 	bl	8008b00 <TIM_CCxChannelCmd>
      break;
 8007b88:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f042 0201 	orr.w	r2, r2, #1
 8007b98:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007b9a:	2300      	movs	r3, #0
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	3710      	adds	r7, #16
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bd80      	pop	{r7, pc}

08007ba4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b082      	sub	sp, #8
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	691b      	ldr	r3, [r3, #16]
 8007bb2:	f003 0302 	and.w	r3, r3, #2
 8007bb6:	2b02      	cmp	r3, #2
 8007bb8:	d122      	bne.n	8007c00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	68db      	ldr	r3, [r3, #12]
 8007bc0:	f003 0302 	and.w	r3, r3, #2
 8007bc4:	2b02      	cmp	r3, #2
 8007bc6:	d11b      	bne.n	8007c00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f06f 0202 	mvn.w	r2, #2
 8007bd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	699b      	ldr	r3, [r3, #24]
 8007bde:	f003 0303 	and.w	r3, r3, #3
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d003      	beq.n	8007bee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f7f9 ff8e 	bl	8001b08 <HAL_TIM_IC_CaptureCallback>
 8007bec:	e005      	b.n	8007bfa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 fb54 	bl	800829c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 fb5b 	bl	80082b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	f003 0304 	and.w	r3, r3, #4
 8007c0a:	2b04      	cmp	r3, #4
 8007c0c:	d122      	bne.n	8007c54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	68db      	ldr	r3, [r3, #12]
 8007c14:	f003 0304 	and.w	r3, r3, #4
 8007c18:	2b04      	cmp	r3, #4
 8007c1a:	d11b      	bne.n	8007c54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f06f 0204 	mvn.w	r2, #4
 8007c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2202      	movs	r2, #2
 8007c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	699b      	ldr	r3, [r3, #24]
 8007c32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d003      	beq.n	8007c42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f7f9 ff64 	bl	8001b08 <HAL_TIM_IC_CaptureCallback>
 8007c40:	e005      	b.n	8007c4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 fb2a 	bl	800829c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 fb31 	bl	80082b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	691b      	ldr	r3, [r3, #16]
 8007c5a:	f003 0308 	and.w	r3, r3, #8
 8007c5e:	2b08      	cmp	r3, #8
 8007c60:	d122      	bne.n	8007ca8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	f003 0308 	and.w	r3, r3, #8
 8007c6c:	2b08      	cmp	r3, #8
 8007c6e:	d11b      	bne.n	8007ca8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f06f 0208 	mvn.w	r2, #8
 8007c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2204      	movs	r2, #4
 8007c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	69db      	ldr	r3, [r3, #28]
 8007c86:	f003 0303 	and.w	r3, r3, #3
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d003      	beq.n	8007c96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f7f9 ff3a 	bl	8001b08 <HAL_TIM_IC_CaptureCallback>
 8007c94:	e005      	b.n	8007ca2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 fb00 	bl	800829c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 fb07 	bl	80082b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	f003 0310 	and.w	r3, r3, #16
 8007cb2:	2b10      	cmp	r3, #16
 8007cb4:	d122      	bne.n	8007cfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	68db      	ldr	r3, [r3, #12]
 8007cbc:	f003 0310 	and.w	r3, r3, #16
 8007cc0:	2b10      	cmp	r3, #16
 8007cc2:	d11b      	bne.n	8007cfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f06f 0210 	mvn.w	r2, #16
 8007ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2208      	movs	r2, #8
 8007cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	69db      	ldr	r3, [r3, #28]
 8007cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d003      	beq.n	8007cea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f7f9 ff10 	bl	8001b08 <HAL_TIM_IC_CaptureCallback>
 8007ce8:	e005      	b.n	8007cf6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 fad6 	bl	800829c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 fadd 	bl	80082b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	f003 0301 	and.w	r3, r3, #1
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d10e      	bne.n	8007d28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	f003 0301 	and.w	r3, r3, #1
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d107      	bne.n	8007d28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f06f 0201 	mvn.w	r2, #1
 8007d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 fab0 	bl	8008288 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d32:	2b80      	cmp	r3, #128	; 0x80
 8007d34:	d10e      	bne.n	8007d54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d40:	2b80      	cmp	r3, #128	; 0x80
 8007d42:	d107      	bne.n	8007d54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 ffd4 	bl	8008cfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d5e:	2b40      	cmp	r3, #64	; 0x40
 8007d60:	d10e      	bne.n	8007d80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d6c:	2b40      	cmp	r3, #64	; 0x40
 8007d6e:	d107      	bne.n	8007d80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 faa2 	bl	80082c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	f003 0320 	and.w	r3, r3, #32
 8007d8a:	2b20      	cmp	r3, #32
 8007d8c:	d10e      	bne.n	8007dac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	68db      	ldr	r3, [r3, #12]
 8007d94:	f003 0320 	and.w	r3, r3, #32
 8007d98:	2b20      	cmp	r3, #32
 8007d9a:	d107      	bne.n	8007dac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f06f 0220 	mvn.w	r2, #32
 8007da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 ff9e 	bl	8008ce8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007dac:	bf00      	nop
 8007dae:	3708      	adds	r7, #8
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b086      	sub	sp, #24
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d101      	bne.n	8007dd2 <HAL_TIM_IC_ConfigChannel+0x1e>
 8007dce:	2302      	movs	r3, #2
 8007dd0:	e088      	b.n	8007ee4 <HAL_TIM_IC_ConfigChannel+0x130>
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d11b      	bne.n	8007e18 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6818      	ldr	r0, [r3, #0]
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	6819      	ldr	r1, [r3, #0]
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	685a      	ldr	r2, [r3, #4]
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	f000 fcc2 	bl	8008778 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	699a      	ldr	r2, [r3, #24]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f022 020c 	bic.w	r2, r2, #12
 8007e02:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	6999      	ldr	r1, [r3, #24]
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	689a      	ldr	r2, [r3, #8]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	430a      	orrs	r2, r1
 8007e14:	619a      	str	r2, [r3, #24]
 8007e16:	e060      	b.n	8007eda <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2b04      	cmp	r3, #4
 8007e1c:	d11c      	bne.n	8007e58 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6818      	ldr	r0, [r3, #0]
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	6819      	ldr	r1, [r3, #0]
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	685a      	ldr	r2, [r3, #4]
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	68db      	ldr	r3, [r3, #12]
 8007e2e:	f000 fd46 	bl	80088be <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	699a      	ldr	r2, [r3, #24]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007e40:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	6999      	ldr	r1, [r3, #24]
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	021a      	lsls	r2, r3, #8
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	430a      	orrs	r2, r1
 8007e54:	619a      	str	r2, [r3, #24]
 8007e56:	e040      	b.n	8007eda <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2b08      	cmp	r3, #8
 8007e5c:	d11b      	bne.n	8007e96 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6818      	ldr	r0, [r3, #0]
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	6819      	ldr	r1, [r3, #0]
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	685a      	ldr	r2, [r3, #4]
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	f000 fd93 	bl	8008998 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	69da      	ldr	r2, [r3, #28]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f022 020c 	bic.w	r2, r2, #12
 8007e80:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	69d9      	ldr	r1, [r3, #28]
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	689a      	ldr	r2, [r3, #8]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	430a      	orrs	r2, r1
 8007e92:	61da      	str	r2, [r3, #28]
 8007e94:	e021      	b.n	8007eda <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2b0c      	cmp	r3, #12
 8007e9a:	d11c      	bne.n	8007ed6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	6818      	ldr	r0, [r3, #0]
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	6819      	ldr	r1, [r3, #0]
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	685a      	ldr	r2, [r3, #4]
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	f000 fdb0 	bl	8008a10 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	69da      	ldr	r2, [r3, #28]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007ebe:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	69d9      	ldr	r1, [r3, #28]
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	021a      	lsls	r2, r3, #8
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	430a      	orrs	r2, r1
 8007ed2:	61da      	str	r2, [r3, #28]
 8007ed4:	e001      	b.n	8007eda <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2200      	movs	r2, #0
 8007ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007ee2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3718      	adds	r7, #24
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b086      	sub	sp, #24
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	60b9      	str	r1, [r7, #8]
 8007ef6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	d101      	bne.n	8007f0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007f06:	2302      	movs	r3, #2
 8007f08:	e0ae      	b.n	8008068 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2201      	movs	r2, #1
 8007f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2b0c      	cmp	r3, #12
 8007f16:	f200 809f 	bhi.w	8008058 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007f1a:	a201      	add	r2, pc, #4	; (adr r2, 8007f20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f20:	08007f55 	.word	0x08007f55
 8007f24:	08008059 	.word	0x08008059
 8007f28:	08008059 	.word	0x08008059
 8007f2c:	08008059 	.word	0x08008059
 8007f30:	08007f95 	.word	0x08007f95
 8007f34:	08008059 	.word	0x08008059
 8007f38:	08008059 	.word	0x08008059
 8007f3c:	08008059 	.word	0x08008059
 8007f40:	08007fd7 	.word	0x08007fd7
 8007f44:	08008059 	.word	0x08008059
 8007f48:	08008059 	.word	0x08008059
 8007f4c:	08008059 	.word	0x08008059
 8007f50:	08008017 	.word	0x08008017
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	68b9      	ldr	r1, [r7, #8]
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f000 fa5c 	bl	8008418 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	699a      	ldr	r2, [r3, #24]
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f042 0208 	orr.w	r2, r2, #8
 8007f6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	699a      	ldr	r2, [r3, #24]
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f022 0204 	bic.w	r2, r2, #4
 8007f7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	6999      	ldr	r1, [r3, #24]
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	691a      	ldr	r2, [r3, #16]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	430a      	orrs	r2, r1
 8007f90:	619a      	str	r2, [r3, #24]
      break;
 8007f92:	e064      	b.n	800805e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	68b9      	ldr	r1, [r7, #8]
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f000 faac 	bl	80084f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	699a      	ldr	r2, [r3, #24]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	699a      	ldr	r2, [r3, #24]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	6999      	ldr	r1, [r3, #24]
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	691b      	ldr	r3, [r3, #16]
 8007fca:	021a      	lsls	r2, r3, #8
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	430a      	orrs	r2, r1
 8007fd2:	619a      	str	r2, [r3, #24]
      break;
 8007fd4:	e043      	b.n	800805e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	68b9      	ldr	r1, [r7, #8]
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f000 fb01 	bl	80085e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	69da      	ldr	r2, [r3, #28]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f042 0208 	orr.w	r2, r2, #8
 8007ff0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	69da      	ldr	r2, [r3, #28]
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f022 0204 	bic.w	r2, r2, #4
 8008000:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	69d9      	ldr	r1, [r3, #28]
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	691a      	ldr	r2, [r3, #16]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	430a      	orrs	r2, r1
 8008012:	61da      	str	r2, [r3, #28]
      break;
 8008014:	e023      	b.n	800805e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	68b9      	ldr	r1, [r7, #8]
 800801c:	4618      	mov	r0, r3
 800801e:	f000 fb55 	bl	80086cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	69da      	ldr	r2, [r3, #28]
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008030:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	69da      	ldr	r2, [r3, #28]
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008040:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	69d9      	ldr	r1, [r3, #28]
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	691b      	ldr	r3, [r3, #16]
 800804c:	021a      	lsls	r2, r3, #8
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	430a      	orrs	r2, r1
 8008054:	61da      	str	r2, [r3, #28]
      break;
 8008056:	e002      	b.n	800805e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	75fb      	strb	r3, [r7, #23]
      break;
 800805c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2200      	movs	r2, #0
 8008062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008066:	7dfb      	ldrb	r3, [r7, #23]
}
 8008068:	4618      	mov	r0, r3
 800806a:	3718      	adds	r7, #24
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800807a:	2300      	movs	r3, #0
 800807c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008084:	2b01      	cmp	r3, #1
 8008086:	d101      	bne.n	800808c <HAL_TIM_ConfigClockSource+0x1c>
 8008088:	2302      	movs	r3, #2
 800808a:	e0b4      	b.n	80081f6 <HAL_TIM_ConfigClockSource+0x186>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2202      	movs	r2, #2
 8008098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80080aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	68ba      	ldr	r2, [r7, #8]
 80080ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080c4:	d03e      	beq.n	8008144 <HAL_TIM_ConfigClockSource+0xd4>
 80080c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080ca:	f200 8087 	bhi.w	80081dc <HAL_TIM_ConfigClockSource+0x16c>
 80080ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080d2:	f000 8086 	beq.w	80081e2 <HAL_TIM_ConfigClockSource+0x172>
 80080d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080da:	d87f      	bhi.n	80081dc <HAL_TIM_ConfigClockSource+0x16c>
 80080dc:	2b70      	cmp	r3, #112	; 0x70
 80080de:	d01a      	beq.n	8008116 <HAL_TIM_ConfigClockSource+0xa6>
 80080e0:	2b70      	cmp	r3, #112	; 0x70
 80080e2:	d87b      	bhi.n	80081dc <HAL_TIM_ConfigClockSource+0x16c>
 80080e4:	2b60      	cmp	r3, #96	; 0x60
 80080e6:	d050      	beq.n	800818a <HAL_TIM_ConfigClockSource+0x11a>
 80080e8:	2b60      	cmp	r3, #96	; 0x60
 80080ea:	d877      	bhi.n	80081dc <HAL_TIM_ConfigClockSource+0x16c>
 80080ec:	2b50      	cmp	r3, #80	; 0x50
 80080ee:	d03c      	beq.n	800816a <HAL_TIM_ConfigClockSource+0xfa>
 80080f0:	2b50      	cmp	r3, #80	; 0x50
 80080f2:	d873      	bhi.n	80081dc <HAL_TIM_ConfigClockSource+0x16c>
 80080f4:	2b40      	cmp	r3, #64	; 0x40
 80080f6:	d058      	beq.n	80081aa <HAL_TIM_ConfigClockSource+0x13a>
 80080f8:	2b40      	cmp	r3, #64	; 0x40
 80080fa:	d86f      	bhi.n	80081dc <HAL_TIM_ConfigClockSource+0x16c>
 80080fc:	2b30      	cmp	r3, #48	; 0x30
 80080fe:	d064      	beq.n	80081ca <HAL_TIM_ConfigClockSource+0x15a>
 8008100:	2b30      	cmp	r3, #48	; 0x30
 8008102:	d86b      	bhi.n	80081dc <HAL_TIM_ConfigClockSource+0x16c>
 8008104:	2b20      	cmp	r3, #32
 8008106:	d060      	beq.n	80081ca <HAL_TIM_ConfigClockSource+0x15a>
 8008108:	2b20      	cmp	r3, #32
 800810a:	d867      	bhi.n	80081dc <HAL_TIM_ConfigClockSource+0x16c>
 800810c:	2b00      	cmp	r3, #0
 800810e:	d05c      	beq.n	80081ca <HAL_TIM_ConfigClockSource+0x15a>
 8008110:	2b10      	cmp	r3, #16
 8008112:	d05a      	beq.n	80081ca <HAL_TIM_ConfigClockSource+0x15a>
 8008114:	e062      	b.n	80081dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6818      	ldr	r0, [r3, #0]
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	6899      	ldr	r1, [r3, #8]
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	685a      	ldr	r2, [r3, #4]
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	68db      	ldr	r3, [r3, #12]
 8008126:	f000 fccb 	bl	8008ac0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008138:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	68ba      	ldr	r2, [r7, #8]
 8008140:	609a      	str	r2, [r3, #8]
      break;
 8008142:	e04f      	b.n	80081e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6818      	ldr	r0, [r3, #0]
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	6899      	ldr	r1, [r3, #8]
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	685a      	ldr	r2, [r3, #4]
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	68db      	ldr	r3, [r3, #12]
 8008154:	f000 fcb4 	bl	8008ac0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	689a      	ldr	r2, [r3, #8]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008166:	609a      	str	r2, [r3, #8]
      break;
 8008168:	e03c      	b.n	80081e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6818      	ldr	r0, [r3, #0]
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	6859      	ldr	r1, [r3, #4]
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	461a      	mov	r2, r3
 8008178:	f000 fb72 	bl	8008860 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	2150      	movs	r1, #80	; 0x50
 8008182:	4618      	mov	r0, r3
 8008184:	f000 fc81 	bl	8008a8a <TIM_ITRx_SetConfig>
      break;
 8008188:	e02c      	b.n	80081e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6818      	ldr	r0, [r3, #0]
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	6859      	ldr	r1, [r3, #4]
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	68db      	ldr	r3, [r3, #12]
 8008196:	461a      	mov	r2, r3
 8008198:	f000 fbce 	bl	8008938 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2160      	movs	r1, #96	; 0x60
 80081a2:	4618      	mov	r0, r3
 80081a4:	f000 fc71 	bl	8008a8a <TIM_ITRx_SetConfig>
      break;
 80081a8:	e01c      	b.n	80081e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6818      	ldr	r0, [r3, #0]
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	6859      	ldr	r1, [r3, #4]
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	68db      	ldr	r3, [r3, #12]
 80081b6:	461a      	mov	r2, r3
 80081b8:	f000 fb52 	bl	8008860 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2140      	movs	r1, #64	; 0x40
 80081c2:	4618      	mov	r0, r3
 80081c4:	f000 fc61 	bl	8008a8a <TIM_ITRx_SetConfig>
      break;
 80081c8:	e00c      	b.n	80081e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681a      	ldr	r2, [r3, #0]
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4619      	mov	r1, r3
 80081d4:	4610      	mov	r0, r2
 80081d6:	f000 fc58 	bl	8008a8a <TIM_ITRx_SetConfig>
      break;
 80081da:	e003      	b.n	80081e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80081dc:	2301      	movs	r3, #1
 80081de:	73fb      	strb	r3, [r7, #15]
      break;
 80081e0:	e000      	b.n	80081e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80081e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2201      	movs	r2, #1
 80081e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80081f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3710      	adds	r7, #16
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
	...

08008200 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008200:	b480      	push	{r7}
 8008202:	b085      	sub	sp, #20
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800820a:	2300      	movs	r3, #0
 800820c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	2b0c      	cmp	r3, #12
 8008212:	d831      	bhi.n	8008278 <HAL_TIM_ReadCapturedValue+0x78>
 8008214:	a201      	add	r2, pc, #4	; (adr r2, 800821c <HAL_TIM_ReadCapturedValue+0x1c>)
 8008216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800821a:	bf00      	nop
 800821c:	08008251 	.word	0x08008251
 8008220:	08008279 	.word	0x08008279
 8008224:	08008279 	.word	0x08008279
 8008228:	08008279 	.word	0x08008279
 800822c:	0800825b 	.word	0x0800825b
 8008230:	08008279 	.word	0x08008279
 8008234:	08008279 	.word	0x08008279
 8008238:	08008279 	.word	0x08008279
 800823c:	08008265 	.word	0x08008265
 8008240:	08008279 	.word	0x08008279
 8008244:	08008279 	.word	0x08008279
 8008248:	08008279 	.word	0x08008279
 800824c:	0800826f 	.word	0x0800826f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008256:	60fb      	str	r3, [r7, #12]

      break;
 8008258:	e00f      	b.n	800827a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008260:	60fb      	str	r3, [r7, #12]

      break;
 8008262:	e00a      	b.n	800827a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800826a:	60fb      	str	r3, [r7, #12]

      break;
 800826c:	e005      	b.n	800827a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008274:	60fb      	str	r3, [r7, #12]

      break;
 8008276:	e000      	b.n	800827a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008278:	bf00      	nop
  }

  return tmpreg;
 800827a:	68fb      	ldr	r3, [r7, #12]
}
 800827c:	4618      	mov	r0, r3
 800827e:	3714      	adds	r7, #20
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr

08008288 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008288:	b480      	push	{r7}
 800828a:	b083      	sub	sp, #12
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008290:	bf00      	nop
 8008292:	370c      	adds	r7, #12
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr

0800829c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800829c:	b480      	push	{r7}
 800829e:	b083      	sub	sp, #12
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80082a4:	bf00      	nop
 80082a6:	370c      	adds	r7, #12
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80082b8:	bf00      	nop
 80082ba:	370c      	adds	r7, #12
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr

080082c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80082c4:	b480      	push	{r7}
 80082c6:	b083      	sub	sp, #12
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80082cc:	bf00      	nop
 80082ce:	370c      	adds	r7, #12
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr

080082d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80082d8:	b480      	push	{r7}
 80082da:	b085      	sub	sp, #20
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	4a40      	ldr	r2, [pc, #256]	; (80083ec <TIM_Base_SetConfig+0x114>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d013      	beq.n	8008318 <TIM_Base_SetConfig+0x40>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082f6:	d00f      	beq.n	8008318 <TIM_Base_SetConfig+0x40>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a3d      	ldr	r2, [pc, #244]	; (80083f0 <TIM_Base_SetConfig+0x118>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d00b      	beq.n	8008318 <TIM_Base_SetConfig+0x40>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	4a3c      	ldr	r2, [pc, #240]	; (80083f4 <TIM_Base_SetConfig+0x11c>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d007      	beq.n	8008318 <TIM_Base_SetConfig+0x40>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4a3b      	ldr	r2, [pc, #236]	; (80083f8 <TIM_Base_SetConfig+0x120>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d003      	beq.n	8008318 <TIM_Base_SetConfig+0x40>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	4a3a      	ldr	r2, [pc, #232]	; (80083fc <TIM_Base_SetConfig+0x124>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d108      	bne.n	800832a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800831e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	68fa      	ldr	r2, [r7, #12]
 8008326:	4313      	orrs	r3, r2
 8008328:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4a2f      	ldr	r2, [pc, #188]	; (80083ec <TIM_Base_SetConfig+0x114>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d02b      	beq.n	800838a <TIM_Base_SetConfig+0xb2>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008338:	d027      	beq.n	800838a <TIM_Base_SetConfig+0xb2>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4a2c      	ldr	r2, [pc, #176]	; (80083f0 <TIM_Base_SetConfig+0x118>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d023      	beq.n	800838a <TIM_Base_SetConfig+0xb2>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4a2b      	ldr	r2, [pc, #172]	; (80083f4 <TIM_Base_SetConfig+0x11c>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d01f      	beq.n	800838a <TIM_Base_SetConfig+0xb2>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4a2a      	ldr	r2, [pc, #168]	; (80083f8 <TIM_Base_SetConfig+0x120>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d01b      	beq.n	800838a <TIM_Base_SetConfig+0xb2>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4a29      	ldr	r2, [pc, #164]	; (80083fc <TIM_Base_SetConfig+0x124>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d017      	beq.n	800838a <TIM_Base_SetConfig+0xb2>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4a28      	ldr	r2, [pc, #160]	; (8008400 <TIM_Base_SetConfig+0x128>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d013      	beq.n	800838a <TIM_Base_SetConfig+0xb2>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	4a27      	ldr	r2, [pc, #156]	; (8008404 <TIM_Base_SetConfig+0x12c>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d00f      	beq.n	800838a <TIM_Base_SetConfig+0xb2>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	4a26      	ldr	r2, [pc, #152]	; (8008408 <TIM_Base_SetConfig+0x130>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d00b      	beq.n	800838a <TIM_Base_SetConfig+0xb2>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	4a25      	ldr	r2, [pc, #148]	; (800840c <TIM_Base_SetConfig+0x134>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d007      	beq.n	800838a <TIM_Base_SetConfig+0xb2>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4a24      	ldr	r2, [pc, #144]	; (8008410 <TIM_Base_SetConfig+0x138>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d003      	beq.n	800838a <TIM_Base_SetConfig+0xb2>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	4a23      	ldr	r2, [pc, #140]	; (8008414 <TIM_Base_SetConfig+0x13c>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d108      	bne.n	800839c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008390:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	68fa      	ldr	r2, [r7, #12]
 8008398:	4313      	orrs	r3, r2
 800839a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	695b      	ldr	r3, [r3, #20]
 80083a6:	4313      	orrs	r3, r2
 80083a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	68fa      	ldr	r2, [r7, #12]
 80083ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	689a      	ldr	r2, [r3, #8]
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	4a0a      	ldr	r2, [pc, #40]	; (80083ec <TIM_Base_SetConfig+0x114>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d003      	beq.n	80083d0 <TIM_Base_SetConfig+0xf8>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4a0c      	ldr	r2, [pc, #48]	; (80083fc <TIM_Base_SetConfig+0x124>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d103      	bne.n	80083d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	691a      	ldr	r2, [r3, #16]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2201      	movs	r2, #1
 80083dc:	615a      	str	r2, [r3, #20]
}
 80083de:	bf00      	nop
 80083e0:	3714      	adds	r7, #20
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr
 80083ea:	bf00      	nop
 80083ec:	40010000 	.word	0x40010000
 80083f0:	40000400 	.word	0x40000400
 80083f4:	40000800 	.word	0x40000800
 80083f8:	40000c00 	.word	0x40000c00
 80083fc:	40010400 	.word	0x40010400
 8008400:	40014000 	.word	0x40014000
 8008404:	40014400 	.word	0x40014400
 8008408:	40014800 	.word	0x40014800
 800840c:	40001800 	.word	0x40001800
 8008410:	40001c00 	.word	0x40001c00
 8008414:	40002000 	.word	0x40002000

08008418 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008418:	b480      	push	{r7}
 800841a:	b087      	sub	sp, #28
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6a1b      	ldr	r3, [r3, #32]
 8008426:	f023 0201 	bic.w	r2, r3, #1
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6a1b      	ldr	r3, [r3, #32]
 8008432:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	685b      	ldr	r3, [r3, #4]
 8008438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	699b      	ldr	r3, [r3, #24]
 800843e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f023 0303 	bic.w	r3, r3, #3
 800844e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	68fa      	ldr	r2, [r7, #12]
 8008456:	4313      	orrs	r3, r2
 8008458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	f023 0302 	bic.w	r3, r3, #2
 8008460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	689b      	ldr	r3, [r3, #8]
 8008466:	697a      	ldr	r2, [r7, #20]
 8008468:	4313      	orrs	r3, r2
 800846a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4a20      	ldr	r2, [pc, #128]	; (80084f0 <TIM_OC1_SetConfig+0xd8>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d003      	beq.n	800847c <TIM_OC1_SetConfig+0x64>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	4a1f      	ldr	r2, [pc, #124]	; (80084f4 <TIM_OC1_SetConfig+0xdc>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d10c      	bne.n	8008496 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	f023 0308 	bic.w	r3, r3, #8
 8008482:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	68db      	ldr	r3, [r3, #12]
 8008488:	697a      	ldr	r2, [r7, #20]
 800848a:	4313      	orrs	r3, r2
 800848c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	f023 0304 	bic.w	r3, r3, #4
 8008494:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	4a15      	ldr	r2, [pc, #84]	; (80084f0 <TIM_OC1_SetConfig+0xd8>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d003      	beq.n	80084a6 <TIM_OC1_SetConfig+0x8e>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4a14      	ldr	r2, [pc, #80]	; (80084f4 <TIM_OC1_SetConfig+0xdc>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d111      	bne.n	80084ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80084b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	695b      	ldr	r3, [r3, #20]
 80084ba:	693a      	ldr	r2, [r7, #16]
 80084bc:	4313      	orrs	r3, r2
 80084be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	699b      	ldr	r3, [r3, #24]
 80084c4:	693a      	ldr	r2, [r7, #16]
 80084c6:	4313      	orrs	r3, r2
 80084c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	693a      	ldr	r2, [r7, #16]
 80084ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	68fa      	ldr	r2, [r7, #12]
 80084d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	685a      	ldr	r2, [r3, #4]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	697a      	ldr	r2, [r7, #20]
 80084e2:	621a      	str	r2, [r3, #32]
}
 80084e4:	bf00      	nop
 80084e6:	371c      	adds	r7, #28
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr
 80084f0:	40010000 	.word	0x40010000
 80084f4:	40010400 	.word	0x40010400

080084f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b087      	sub	sp, #28
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6a1b      	ldr	r3, [r3, #32]
 8008506:	f023 0210 	bic.w	r2, r3, #16
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6a1b      	ldr	r3, [r3, #32]
 8008512:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	699b      	ldr	r3, [r3, #24]
 800851e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800852e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	021b      	lsls	r3, r3, #8
 8008536:	68fa      	ldr	r2, [r7, #12]
 8008538:	4313      	orrs	r3, r2
 800853a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	f023 0320 	bic.w	r3, r3, #32
 8008542:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	011b      	lsls	r3, r3, #4
 800854a:	697a      	ldr	r2, [r7, #20]
 800854c:	4313      	orrs	r3, r2
 800854e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4a22      	ldr	r2, [pc, #136]	; (80085dc <TIM_OC2_SetConfig+0xe4>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d003      	beq.n	8008560 <TIM_OC2_SetConfig+0x68>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	4a21      	ldr	r2, [pc, #132]	; (80085e0 <TIM_OC2_SetConfig+0xe8>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d10d      	bne.n	800857c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008566:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	68db      	ldr	r3, [r3, #12]
 800856c:	011b      	lsls	r3, r3, #4
 800856e:	697a      	ldr	r2, [r7, #20]
 8008570:	4313      	orrs	r3, r2
 8008572:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800857a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	4a17      	ldr	r2, [pc, #92]	; (80085dc <TIM_OC2_SetConfig+0xe4>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d003      	beq.n	800858c <TIM_OC2_SetConfig+0x94>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	4a16      	ldr	r2, [pc, #88]	; (80085e0 <TIM_OC2_SetConfig+0xe8>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d113      	bne.n	80085b4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008592:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800859a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	695b      	ldr	r3, [r3, #20]
 80085a0:	009b      	lsls	r3, r3, #2
 80085a2:	693a      	ldr	r2, [r7, #16]
 80085a4:	4313      	orrs	r3, r2
 80085a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	699b      	ldr	r3, [r3, #24]
 80085ac:	009b      	lsls	r3, r3, #2
 80085ae:	693a      	ldr	r2, [r7, #16]
 80085b0:	4313      	orrs	r3, r2
 80085b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	693a      	ldr	r2, [r7, #16]
 80085b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	685a      	ldr	r2, [r3, #4]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	697a      	ldr	r2, [r7, #20]
 80085cc:	621a      	str	r2, [r3, #32]
}
 80085ce:	bf00      	nop
 80085d0:	371c      	adds	r7, #28
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr
 80085da:	bf00      	nop
 80085dc:	40010000 	.word	0x40010000
 80085e0:	40010400 	.word	0x40010400

080085e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b087      	sub	sp, #28
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6a1b      	ldr	r3, [r3, #32]
 80085f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6a1b      	ldr	r3, [r3, #32]
 80085fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	69db      	ldr	r3, [r3, #28]
 800860a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008612:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f023 0303 	bic.w	r3, r3, #3
 800861a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	68fa      	ldr	r2, [r7, #12]
 8008622:	4313      	orrs	r3, r2
 8008624:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800862c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	021b      	lsls	r3, r3, #8
 8008634:	697a      	ldr	r2, [r7, #20]
 8008636:	4313      	orrs	r3, r2
 8008638:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	4a21      	ldr	r2, [pc, #132]	; (80086c4 <TIM_OC3_SetConfig+0xe0>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d003      	beq.n	800864a <TIM_OC3_SetConfig+0x66>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	4a20      	ldr	r2, [pc, #128]	; (80086c8 <TIM_OC3_SetConfig+0xe4>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d10d      	bne.n	8008666 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008650:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	68db      	ldr	r3, [r3, #12]
 8008656:	021b      	lsls	r3, r3, #8
 8008658:	697a      	ldr	r2, [r7, #20]
 800865a:	4313      	orrs	r3, r2
 800865c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008664:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	4a16      	ldr	r2, [pc, #88]	; (80086c4 <TIM_OC3_SetConfig+0xe0>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d003      	beq.n	8008676 <TIM_OC3_SetConfig+0x92>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4a15      	ldr	r2, [pc, #84]	; (80086c8 <TIM_OC3_SetConfig+0xe4>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d113      	bne.n	800869e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800867c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008684:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	695b      	ldr	r3, [r3, #20]
 800868a:	011b      	lsls	r3, r3, #4
 800868c:	693a      	ldr	r2, [r7, #16]
 800868e:	4313      	orrs	r3, r2
 8008690:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	699b      	ldr	r3, [r3, #24]
 8008696:	011b      	lsls	r3, r3, #4
 8008698:	693a      	ldr	r2, [r7, #16]
 800869a:	4313      	orrs	r3, r2
 800869c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	693a      	ldr	r2, [r7, #16]
 80086a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	68fa      	ldr	r2, [r7, #12]
 80086a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	685a      	ldr	r2, [r3, #4]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	697a      	ldr	r2, [r7, #20]
 80086b6:	621a      	str	r2, [r3, #32]
}
 80086b8:	bf00      	nop
 80086ba:	371c      	adds	r7, #28
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr
 80086c4:	40010000 	.word	0x40010000
 80086c8:	40010400 	.word	0x40010400

080086cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b087      	sub	sp, #28
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6a1b      	ldr	r3, [r3, #32]
 80086da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6a1b      	ldr	r3, [r3, #32]
 80086e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	69db      	ldr	r3, [r3, #28]
 80086f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008702:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	021b      	lsls	r3, r3, #8
 800870a:	68fa      	ldr	r2, [r7, #12]
 800870c:	4313      	orrs	r3, r2
 800870e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008716:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	031b      	lsls	r3, r3, #12
 800871e:	693a      	ldr	r2, [r7, #16]
 8008720:	4313      	orrs	r3, r2
 8008722:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	4a12      	ldr	r2, [pc, #72]	; (8008770 <TIM_OC4_SetConfig+0xa4>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d003      	beq.n	8008734 <TIM_OC4_SetConfig+0x68>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	4a11      	ldr	r2, [pc, #68]	; (8008774 <TIM_OC4_SetConfig+0xa8>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d109      	bne.n	8008748 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800873a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	695b      	ldr	r3, [r3, #20]
 8008740:	019b      	lsls	r3, r3, #6
 8008742:	697a      	ldr	r2, [r7, #20]
 8008744:	4313      	orrs	r3, r2
 8008746:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	697a      	ldr	r2, [r7, #20]
 800874c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	68fa      	ldr	r2, [r7, #12]
 8008752:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	685a      	ldr	r2, [r3, #4]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	693a      	ldr	r2, [r7, #16]
 8008760:	621a      	str	r2, [r3, #32]
}
 8008762:	bf00      	nop
 8008764:	371c      	adds	r7, #28
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr
 800876e:	bf00      	nop
 8008770:	40010000 	.word	0x40010000
 8008774:	40010400 	.word	0x40010400

08008778 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008778:	b480      	push	{r7}
 800877a:	b087      	sub	sp, #28
 800877c:	af00      	add	r7, sp, #0
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	60b9      	str	r1, [r7, #8]
 8008782:	607a      	str	r2, [r7, #4]
 8008784:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	6a1b      	ldr	r3, [r3, #32]
 800878a:	f023 0201 	bic.w	r2, r3, #1
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	699b      	ldr	r3, [r3, #24]
 8008796:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6a1b      	ldr	r3, [r3, #32]
 800879c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	4a28      	ldr	r2, [pc, #160]	; (8008844 <TIM_TI1_SetConfig+0xcc>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d01b      	beq.n	80087de <TIM_TI1_SetConfig+0x66>
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087ac:	d017      	beq.n	80087de <TIM_TI1_SetConfig+0x66>
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	4a25      	ldr	r2, [pc, #148]	; (8008848 <TIM_TI1_SetConfig+0xd0>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d013      	beq.n	80087de <TIM_TI1_SetConfig+0x66>
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	4a24      	ldr	r2, [pc, #144]	; (800884c <TIM_TI1_SetConfig+0xd4>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d00f      	beq.n	80087de <TIM_TI1_SetConfig+0x66>
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	4a23      	ldr	r2, [pc, #140]	; (8008850 <TIM_TI1_SetConfig+0xd8>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d00b      	beq.n	80087de <TIM_TI1_SetConfig+0x66>
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	4a22      	ldr	r2, [pc, #136]	; (8008854 <TIM_TI1_SetConfig+0xdc>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d007      	beq.n	80087de <TIM_TI1_SetConfig+0x66>
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	4a21      	ldr	r2, [pc, #132]	; (8008858 <TIM_TI1_SetConfig+0xe0>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d003      	beq.n	80087de <TIM_TI1_SetConfig+0x66>
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	4a20      	ldr	r2, [pc, #128]	; (800885c <TIM_TI1_SetConfig+0xe4>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d101      	bne.n	80087e2 <TIM_TI1_SetConfig+0x6a>
 80087de:	2301      	movs	r3, #1
 80087e0:	e000      	b.n	80087e4 <TIM_TI1_SetConfig+0x6c>
 80087e2:	2300      	movs	r3, #0
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d008      	beq.n	80087fa <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	f023 0303 	bic.w	r3, r3, #3
 80087ee:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80087f0:	697a      	ldr	r2, [r7, #20]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4313      	orrs	r3, r2
 80087f6:	617b      	str	r3, [r7, #20]
 80087f8:	e003      	b.n	8008802 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	f043 0301 	orr.w	r3, r3, #1
 8008800:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008808:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	011b      	lsls	r3, r3, #4
 800880e:	b2db      	uxtb	r3, r3
 8008810:	697a      	ldr	r2, [r7, #20]
 8008812:	4313      	orrs	r3, r2
 8008814:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	f023 030a 	bic.w	r3, r3, #10
 800881c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	f003 030a 	and.w	r3, r3, #10
 8008824:	693a      	ldr	r2, [r7, #16]
 8008826:	4313      	orrs	r3, r2
 8008828:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	697a      	ldr	r2, [r7, #20]
 800882e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	693a      	ldr	r2, [r7, #16]
 8008834:	621a      	str	r2, [r3, #32]
}
 8008836:	bf00      	nop
 8008838:	371c      	adds	r7, #28
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr
 8008842:	bf00      	nop
 8008844:	40010000 	.word	0x40010000
 8008848:	40000400 	.word	0x40000400
 800884c:	40000800 	.word	0x40000800
 8008850:	40000c00 	.word	0x40000c00
 8008854:	40010400 	.word	0x40010400
 8008858:	40014000 	.word	0x40014000
 800885c:	40001800 	.word	0x40001800

08008860 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008860:	b480      	push	{r7}
 8008862:	b087      	sub	sp, #28
 8008864:	af00      	add	r7, sp, #0
 8008866:	60f8      	str	r0, [r7, #12]
 8008868:	60b9      	str	r1, [r7, #8]
 800886a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	6a1b      	ldr	r3, [r3, #32]
 8008870:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	6a1b      	ldr	r3, [r3, #32]
 8008876:	f023 0201 	bic.w	r2, r3, #1
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	699b      	ldr	r3, [r3, #24]
 8008882:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800888a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	011b      	lsls	r3, r3, #4
 8008890:	693a      	ldr	r2, [r7, #16]
 8008892:	4313      	orrs	r3, r2
 8008894:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	f023 030a 	bic.w	r3, r3, #10
 800889c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800889e:	697a      	ldr	r2, [r7, #20]
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	4313      	orrs	r3, r2
 80088a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	693a      	ldr	r2, [r7, #16]
 80088aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	697a      	ldr	r2, [r7, #20]
 80088b0:	621a      	str	r2, [r3, #32]
}
 80088b2:	bf00      	nop
 80088b4:	371c      	adds	r7, #28
 80088b6:	46bd      	mov	sp, r7
 80088b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088bc:	4770      	bx	lr

080088be <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80088be:	b480      	push	{r7}
 80088c0:	b087      	sub	sp, #28
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	60f8      	str	r0, [r7, #12]
 80088c6:	60b9      	str	r1, [r7, #8]
 80088c8:	607a      	str	r2, [r7, #4]
 80088ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	6a1b      	ldr	r3, [r3, #32]
 80088d0:	f023 0210 	bic.w	r2, r3, #16
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	699b      	ldr	r3, [r3, #24]
 80088dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	6a1b      	ldr	r3, [r3, #32]
 80088e2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	021b      	lsls	r3, r3, #8
 80088f0:	697a      	ldr	r2, [r7, #20]
 80088f2:	4313      	orrs	r3, r2
 80088f4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80088fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	031b      	lsls	r3, r3, #12
 8008902:	b29b      	uxth	r3, r3
 8008904:	697a      	ldr	r2, [r7, #20]
 8008906:	4313      	orrs	r3, r2
 8008908:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008910:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	011b      	lsls	r3, r3, #4
 8008916:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800891a:	693a      	ldr	r2, [r7, #16]
 800891c:	4313      	orrs	r3, r2
 800891e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	697a      	ldr	r2, [r7, #20]
 8008924:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	693a      	ldr	r2, [r7, #16]
 800892a:	621a      	str	r2, [r3, #32]
}
 800892c:	bf00      	nop
 800892e:	371c      	adds	r7, #28
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008938:	b480      	push	{r7}
 800893a:	b087      	sub	sp, #28
 800893c:	af00      	add	r7, sp, #0
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	60b9      	str	r1, [r7, #8]
 8008942:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6a1b      	ldr	r3, [r3, #32]
 8008948:	f023 0210 	bic.w	r2, r3, #16
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	699b      	ldr	r3, [r3, #24]
 8008954:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	6a1b      	ldr	r3, [r3, #32]
 800895a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008962:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	031b      	lsls	r3, r3, #12
 8008968:	697a      	ldr	r2, [r7, #20]
 800896a:	4313      	orrs	r3, r2
 800896c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008974:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	011b      	lsls	r3, r3, #4
 800897a:	693a      	ldr	r2, [r7, #16]
 800897c:	4313      	orrs	r3, r2
 800897e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	697a      	ldr	r2, [r7, #20]
 8008984:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	693a      	ldr	r2, [r7, #16]
 800898a:	621a      	str	r2, [r3, #32]
}
 800898c:	bf00      	nop
 800898e:	371c      	adds	r7, #28
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008998:	b480      	push	{r7}
 800899a:	b087      	sub	sp, #28
 800899c:	af00      	add	r7, sp, #0
 800899e:	60f8      	str	r0, [r7, #12]
 80089a0:	60b9      	str	r1, [r7, #8]
 80089a2:	607a      	str	r2, [r7, #4]
 80089a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	6a1b      	ldr	r3, [r3, #32]
 80089aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	69db      	ldr	r3, [r3, #28]
 80089b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	6a1b      	ldr	r3, [r3, #32]
 80089bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	f023 0303 	bic.w	r3, r3, #3
 80089c4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80089c6:	697a      	ldr	r2, [r7, #20]
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	4313      	orrs	r3, r2
 80089cc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80089d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	011b      	lsls	r3, r3, #4
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	697a      	ldr	r2, [r7, #20]
 80089de:	4313      	orrs	r3, r2
 80089e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80089e8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	021b      	lsls	r3, r3, #8
 80089ee:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80089f2:	693a      	ldr	r2, [r7, #16]
 80089f4:	4313      	orrs	r3, r2
 80089f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	697a      	ldr	r2, [r7, #20]
 80089fc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	693a      	ldr	r2, [r7, #16]
 8008a02:	621a      	str	r2, [r3, #32]
}
 8008a04:	bf00      	nop
 8008a06:	371c      	adds	r7, #28
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b087      	sub	sp, #28
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	60f8      	str	r0, [r7, #12]
 8008a18:	60b9      	str	r1, [r7, #8]
 8008a1a:	607a      	str	r2, [r7, #4]
 8008a1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	6a1b      	ldr	r3, [r3, #32]
 8008a22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	69db      	ldr	r3, [r3, #28]
 8008a2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	6a1b      	ldr	r3, [r3, #32]
 8008a34:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a3c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	021b      	lsls	r3, r3, #8
 8008a42:	697a      	ldr	r2, [r7, #20]
 8008a44:	4313      	orrs	r3, r2
 8008a46:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008a4e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	031b      	lsls	r3, r3, #12
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	697a      	ldr	r2, [r7, #20]
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008a62:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	031b      	lsls	r3, r3, #12
 8008a68:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008a6c:	693a      	ldr	r2, [r7, #16]
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	697a      	ldr	r2, [r7, #20]
 8008a76:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	693a      	ldr	r2, [r7, #16]
 8008a7c:	621a      	str	r2, [r3, #32]
}
 8008a7e:	bf00      	nop
 8008a80:	371c      	adds	r7, #28
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr

08008a8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008a8a:	b480      	push	{r7}
 8008a8c:	b085      	sub	sp, #20
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	6078      	str	r0, [r7, #4]
 8008a92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	689b      	ldr	r3, [r3, #8]
 8008a98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aa0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008aa2:	683a      	ldr	r2, [r7, #0]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	f043 0307 	orr.w	r3, r3, #7
 8008aac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	68fa      	ldr	r2, [r7, #12]
 8008ab2:	609a      	str	r2, [r3, #8]
}
 8008ab4:	bf00      	nop
 8008ab6:	3714      	adds	r7, #20
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr

08008ac0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b087      	sub	sp, #28
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	60f8      	str	r0, [r7, #12]
 8008ac8:	60b9      	str	r1, [r7, #8]
 8008aca:	607a      	str	r2, [r7, #4]
 8008acc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ada:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	021a      	lsls	r2, r3, #8
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	431a      	orrs	r2, r3
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	697a      	ldr	r2, [r7, #20]
 8008aea:	4313      	orrs	r3, r2
 8008aec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	697a      	ldr	r2, [r7, #20]
 8008af2:	609a      	str	r2, [r3, #8]
}
 8008af4:	bf00      	nop
 8008af6:	371c      	adds	r7, #28
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr

08008b00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b087      	sub	sp, #28
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	60b9      	str	r1, [r7, #8]
 8008b0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	f003 031f 	and.w	r3, r3, #31
 8008b12:	2201      	movs	r2, #1
 8008b14:	fa02 f303 	lsl.w	r3, r2, r3
 8008b18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	6a1a      	ldr	r2, [r3, #32]
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	43db      	mvns	r3, r3
 8008b22:	401a      	ands	r2, r3
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	6a1a      	ldr	r2, [r3, #32]
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	f003 031f 	and.w	r3, r3, #31
 8008b32:	6879      	ldr	r1, [r7, #4]
 8008b34:	fa01 f303 	lsl.w	r3, r1, r3
 8008b38:	431a      	orrs	r2, r3
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	621a      	str	r2, [r3, #32]
}
 8008b3e:	bf00      	nop
 8008b40:	371c      	adds	r7, #28
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr
	...

08008b4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b085      	sub	sp, #20
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d101      	bne.n	8008b64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b60:	2302      	movs	r3, #2
 8008b62:	e05a      	b.n	8008c1a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2202      	movs	r2, #2
 8008b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	68fa      	ldr	r2, [r7, #12]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	68fa      	ldr	r2, [r7, #12]
 8008b9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a21      	ldr	r2, [pc, #132]	; (8008c28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d022      	beq.n	8008bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bb0:	d01d      	beq.n	8008bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	4a1d      	ldr	r2, [pc, #116]	; (8008c2c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d018      	beq.n	8008bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a1b      	ldr	r2, [pc, #108]	; (8008c30 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d013      	beq.n	8008bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a1a      	ldr	r2, [pc, #104]	; (8008c34 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d00e      	beq.n	8008bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a18      	ldr	r2, [pc, #96]	; (8008c38 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d009      	beq.n	8008bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a17      	ldr	r2, [pc, #92]	; (8008c3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d004      	beq.n	8008bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a15      	ldr	r2, [pc, #84]	; (8008c40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d10c      	bne.n	8008c08 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bf4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	68ba      	ldr	r2, [r7, #8]
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	68ba      	ldr	r2, [r7, #8]
 8008c06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2200      	movs	r2, #0
 8008c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c18:	2300      	movs	r3, #0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3714      	adds	r7, #20
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c24:	4770      	bx	lr
 8008c26:	bf00      	nop
 8008c28:	40010000 	.word	0x40010000
 8008c2c:	40000400 	.word	0x40000400
 8008c30:	40000800 	.word	0x40000800
 8008c34:	40000c00 	.word	0x40000c00
 8008c38:	40010400 	.word	0x40010400
 8008c3c:	40014000 	.word	0x40014000
 8008c40:	40001800 	.word	0x40001800

08008c44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b085      	sub	sp, #20
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d101      	bne.n	8008c60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008c5c:	2302      	movs	r3, #2
 8008c5e:	e03d      	b.n	8008cdc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2201      	movs	r2, #1
 8008c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	68db      	ldr	r3, [r3, #12]
 8008c72:	4313      	orrs	r3, r2
 8008c74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	4313      	orrs	r3, r2
 8008c82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	4313      	orrs	r3, r2
 8008c90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	691b      	ldr	r3, [r3, #16]
 8008caa:	4313      	orrs	r3, r2
 8008cac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	695b      	ldr	r3, [r3, #20]
 8008cb8:	4313      	orrs	r3, r2
 8008cba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	69db      	ldr	r3, [r3, #28]
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	68fa      	ldr	r2, [r7, #12]
 8008cd0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008cda:	2300      	movs	r3, #0
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3714      	adds	r7, #20
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008cf0:	bf00      	nop
 8008cf2:	370c      	adds	r7, #12
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d04:	bf00      	nop
 8008d06:	370c      	adds	r7, #12
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d101      	bne.n	8008d22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	e03f      	b.n	8008da2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d106      	bne.n	8008d3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2200      	movs	r2, #0
 8008d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f7fb fdd0 	bl	80048dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2224      	movs	r2, #36	; 0x24
 8008d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	68da      	ldr	r2, [r3, #12]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008d52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 fddf 	bl	8009918 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	691a      	ldr	r2, [r3, #16]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008d68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	695a      	ldr	r2, [r3, #20]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008d78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	68da      	ldr	r2, [r3, #12]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008d88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2220      	movs	r2, #32
 8008d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2220      	movs	r2, #32
 8008d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008da0:	2300      	movs	r3, #0
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3708      	adds	r7, #8
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}

08008daa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b08a      	sub	sp, #40	; 0x28
 8008dae:	af02      	add	r7, sp, #8
 8008db0:	60f8      	str	r0, [r7, #12]
 8008db2:	60b9      	str	r1, [r7, #8]
 8008db4:	603b      	str	r3, [r7, #0]
 8008db6:	4613      	mov	r3, r2
 8008db8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	2b20      	cmp	r3, #32
 8008dc8:	d17c      	bne.n	8008ec4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d002      	beq.n	8008dd6 <HAL_UART_Transmit+0x2c>
 8008dd0:	88fb      	ldrh	r3, [r7, #6]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d101      	bne.n	8008dda <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	e075      	b.n	8008ec6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d101      	bne.n	8008de8 <HAL_UART_Transmit+0x3e>
 8008de4:	2302      	movs	r3, #2
 8008de6:	e06e      	b.n	8008ec6 <HAL_UART_Transmit+0x11c>
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2201      	movs	r2, #1
 8008dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2200      	movs	r2, #0
 8008df4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2221      	movs	r2, #33	; 0x21
 8008dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008dfe:	f7fb ff21 	bl	8004c44 <HAL_GetTick>
 8008e02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	88fa      	ldrh	r2, [r7, #6]
 8008e08:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	88fa      	ldrh	r2, [r7, #6]
 8008e0e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e18:	d108      	bne.n	8008e2c <HAL_UART_Transmit+0x82>
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	691b      	ldr	r3, [r3, #16]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d104      	bne.n	8008e2c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008e22:	2300      	movs	r3, #0
 8008e24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	61bb      	str	r3, [r7, #24]
 8008e2a:	e003      	b.n	8008e34 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008e30:	2300      	movs	r3, #0
 8008e32:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008e3c:	e02a      	b.n	8008e94 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	9300      	str	r3, [sp, #0]
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	2200      	movs	r2, #0
 8008e46:	2180      	movs	r1, #128	; 0x80
 8008e48:	68f8      	ldr	r0, [r7, #12]
 8008e4a:	f000 fb1f 	bl	800948c <UART_WaitOnFlagUntilTimeout>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d001      	beq.n	8008e58 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008e54:	2303      	movs	r3, #3
 8008e56:	e036      	b.n	8008ec6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008e58:	69fb      	ldr	r3, [r7, #28]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d10b      	bne.n	8008e76 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008e5e:	69bb      	ldr	r3, [r7, #24]
 8008e60:	881b      	ldrh	r3, [r3, #0]
 8008e62:	461a      	mov	r2, r3
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e6c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008e6e:	69bb      	ldr	r3, [r7, #24]
 8008e70:	3302      	adds	r3, #2
 8008e72:	61bb      	str	r3, [r7, #24]
 8008e74:	e007      	b.n	8008e86 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008e76:	69fb      	ldr	r3, [r7, #28]
 8008e78:	781a      	ldrb	r2, [r3, #0]
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008e80:	69fb      	ldr	r3, [r7, #28]
 8008e82:	3301      	adds	r3, #1
 8008e84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	3b01      	subs	r3, #1
 8008e8e:	b29a      	uxth	r2, r3
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008e98:	b29b      	uxth	r3, r3
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d1cf      	bne.n	8008e3e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	9300      	str	r3, [sp, #0]
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	2140      	movs	r1, #64	; 0x40
 8008ea8:	68f8      	ldr	r0, [r7, #12]
 8008eaa:	f000 faef 	bl	800948c <UART_WaitOnFlagUntilTimeout>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d001      	beq.n	8008eb8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008eb4:	2303      	movs	r3, #3
 8008eb6:	e006      	b.n	8008ec6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	2220      	movs	r2, #32
 8008ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	e000      	b.n	8008ec6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008ec4:	2302      	movs	r3, #2
  }
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3720      	adds	r7, #32
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}

08008ece <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ece:	b580      	push	{r7, lr}
 8008ed0:	b084      	sub	sp, #16
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	60f8      	str	r0, [r7, #12]
 8008ed6:	60b9      	str	r1, [r7, #8]
 8008ed8:	4613      	mov	r3, r2
 8008eda:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	2b20      	cmp	r3, #32
 8008ee6:	d11d      	bne.n	8008f24 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d002      	beq.n	8008ef4 <HAL_UART_Receive_IT+0x26>
 8008eee:	88fb      	ldrh	r3, [r7, #6]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d101      	bne.n	8008ef8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	e016      	b.n	8008f26 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d101      	bne.n	8008f06 <HAL_UART_Receive_IT+0x38>
 8008f02:	2302      	movs	r3, #2
 8008f04:	e00f      	b.n	8008f26 <HAL_UART_Receive_IT+0x58>
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2201      	movs	r2, #1
 8008f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2200      	movs	r2, #0
 8008f12:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008f14:	88fb      	ldrh	r3, [r7, #6]
 8008f16:	461a      	mov	r2, r3
 8008f18:	68b9      	ldr	r1, [r7, #8]
 8008f1a:	68f8      	ldr	r0, [r7, #12]
 8008f1c:	f000 fb24 	bl	8009568 <UART_Start_Receive_IT>
 8008f20:	4603      	mov	r3, r0
 8008f22:	e000      	b.n	8008f26 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008f24:	2302      	movs	r3, #2
  }
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3710      	adds	r7, #16
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
	...

08008f30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b0ba      	sub	sp, #232	; 0xe8
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	68db      	ldr	r3, [r3, #12]
 8008f48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	695b      	ldr	r3, [r3, #20]
 8008f52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008f56:	2300      	movs	r3, #0
 8008f58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f66:	f003 030f 	and.w	r3, r3, #15
 8008f6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008f6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d10f      	bne.n	8008f96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f7a:	f003 0320 	and.w	r3, r3, #32
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d009      	beq.n	8008f96 <HAL_UART_IRQHandler+0x66>
 8008f82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f86:	f003 0320 	and.w	r3, r3, #32
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d003      	beq.n	8008f96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 fc07 	bl	80097a2 <UART_Receive_IT>
      return;
 8008f94:	e256      	b.n	8009444 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008f96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	f000 80de 	beq.w	800915c <HAL_UART_IRQHandler+0x22c>
 8008fa0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008fa4:	f003 0301 	and.w	r3, r3, #1
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d106      	bne.n	8008fba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008fac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fb0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	f000 80d1 	beq.w	800915c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fbe:	f003 0301 	and.w	r3, r3, #1
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d00b      	beq.n	8008fde <HAL_UART_IRQHandler+0xae>
 8008fc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d005      	beq.n	8008fde <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd6:	f043 0201 	orr.w	r2, r3, #1
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fe2:	f003 0304 	and.w	r3, r3, #4
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d00b      	beq.n	8009002 <HAL_UART_IRQHandler+0xd2>
 8008fea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008fee:	f003 0301 	and.w	r3, r3, #1
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d005      	beq.n	8009002 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ffa:	f043 0202 	orr.w	r2, r3, #2
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009006:	f003 0302 	and.w	r3, r3, #2
 800900a:	2b00      	cmp	r3, #0
 800900c:	d00b      	beq.n	8009026 <HAL_UART_IRQHandler+0xf6>
 800900e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009012:	f003 0301 	and.w	r3, r3, #1
 8009016:	2b00      	cmp	r3, #0
 8009018:	d005      	beq.n	8009026 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800901e:	f043 0204 	orr.w	r2, r3, #4
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800902a:	f003 0308 	and.w	r3, r3, #8
 800902e:	2b00      	cmp	r3, #0
 8009030:	d011      	beq.n	8009056 <HAL_UART_IRQHandler+0x126>
 8009032:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009036:	f003 0320 	and.w	r3, r3, #32
 800903a:	2b00      	cmp	r3, #0
 800903c:	d105      	bne.n	800904a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800903e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009042:	f003 0301 	and.w	r3, r3, #1
 8009046:	2b00      	cmp	r3, #0
 8009048:	d005      	beq.n	8009056 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800904e:	f043 0208 	orr.w	r2, r3, #8
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800905a:	2b00      	cmp	r3, #0
 800905c:	f000 81ed 	beq.w	800943a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009060:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009064:	f003 0320 	and.w	r3, r3, #32
 8009068:	2b00      	cmp	r3, #0
 800906a:	d008      	beq.n	800907e <HAL_UART_IRQHandler+0x14e>
 800906c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009070:	f003 0320 	and.w	r3, r3, #32
 8009074:	2b00      	cmp	r3, #0
 8009076:	d002      	beq.n	800907e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 fb92 	bl	80097a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	695b      	ldr	r3, [r3, #20]
 8009084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009088:	2b40      	cmp	r3, #64	; 0x40
 800908a:	bf0c      	ite	eq
 800908c:	2301      	moveq	r3, #1
 800908e:	2300      	movne	r3, #0
 8009090:	b2db      	uxtb	r3, r3
 8009092:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800909a:	f003 0308 	and.w	r3, r3, #8
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d103      	bne.n	80090aa <HAL_UART_IRQHandler+0x17a>
 80090a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d04f      	beq.n	800914a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 fa9a 	bl	80095e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	695b      	ldr	r3, [r3, #20]
 80090b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090ba:	2b40      	cmp	r3, #64	; 0x40
 80090bc:	d141      	bne.n	8009142 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	3314      	adds	r3, #20
 80090c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80090cc:	e853 3f00 	ldrex	r3, [r3]
 80090d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80090d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80090d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	3314      	adds	r3, #20
 80090e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80090ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80090ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80090f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80090fa:	e841 2300 	strex	r3, r2, [r1]
 80090fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009102:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009106:	2b00      	cmp	r3, #0
 8009108:	d1d9      	bne.n	80090be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800910e:	2b00      	cmp	r3, #0
 8009110:	d013      	beq.n	800913a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009116:	4a7d      	ldr	r2, [pc, #500]	; (800930c <HAL_UART_IRQHandler+0x3dc>)
 8009118:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800911e:	4618      	mov	r0, r3
 8009120:	f7fc fb0d 	bl	800573e <HAL_DMA_Abort_IT>
 8009124:	4603      	mov	r3, r0
 8009126:	2b00      	cmp	r3, #0
 8009128:	d016      	beq.n	8009158 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800912e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009134:	4610      	mov	r0, r2
 8009136:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009138:	e00e      	b.n	8009158 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 f990 	bl	8009460 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009140:	e00a      	b.n	8009158 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 f98c 	bl	8009460 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009148:	e006      	b.n	8009158 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 f988 	bl	8009460 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2200      	movs	r2, #0
 8009154:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009156:	e170      	b.n	800943a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009158:	bf00      	nop
    return;
 800915a:	e16e      	b.n	800943a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009160:	2b01      	cmp	r3, #1
 8009162:	f040 814a 	bne.w	80093fa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800916a:	f003 0310 	and.w	r3, r3, #16
 800916e:	2b00      	cmp	r3, #0
 8009170:	f000 8143 	beq.w	80093fa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009178:	f003 0310 	and.w	r3, r3, #16
 800917c:	2b00      	cmp	r3, #0
 800917e:	f000 813c 	beq.w	80093fa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009182:	2300      	movs	r3, #0
 8009184:	60bb      	str	r3, [r7, #8]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	60bb      	str	r3, [r7, #8]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	60bb      	str	r3, [r7, #8]
 8009196:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	695b      	ldr	r3, [r3, #20]
 800919e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091a2:	2b40      	cmp	r3, #64	; 0x40
 80091a4:	f040 80b4 	bne.w	8009310 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80091b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	f000 8140 	beq.w	800943e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80091c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80091c6:	429a      	cmp	r2, r3
 80091c8:	f080 8139 	bcs.w	800943e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80091d2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091d8:	69db      	ldr	r3, [r3, #28]
 80091da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091de:	f000 8088 	beq.w	80092f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	330c      	adds	r3, #12
 80091e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80091f0:	e853 3f00 	ldrex	r3, [r3]
 80091f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80091f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80091fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009200:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	330c      	adds	r3, #12
 800920a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800920e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009212:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009216:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800921a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800921e:	e841 2300 	strex	r3, r2, [r1]
 8009222:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009226:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800922a:	2b00      	cmp	r3, #0
 800922c:	d1d9      	bne.n	80091e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	3314      	adds	r3, #20
 8009234:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009236:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009238:	e853 3f00 	ldrex	r3, [r3]
 800923c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800923e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009240:	f023 0301 	bic.w	r3, r3, #1
 8009244:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	3314      	adds	r3, #20
 800924e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009252:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009256:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009258:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800925a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800925e:	e841 2300 	strex	r3, r2, [r1]
 8009262:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009264:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009266:	2b00      	cmp	r3, #0
 8009268:	d1e1      	bne.n	800922e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	3314      	adds	r3, #20
 8009270:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009272:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009274:	e853 3f00 	ldrex	r3, [r3]
 8009278:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800927a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800927c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009280:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	3314      	adds	r3, #20
 800928a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800928e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009290:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009292:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009294:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009296:	e841 2300 	strex	r3, r2, [r1]
 800929a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800929c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d1e3      	bne.n	800926a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2220      	movs	r2, #32
 80092a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2200      	movs	r2, #0
 80092ae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	330c      	adds	r3, #12
 80092b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092ba:	e853 3f00 	ldrex	r3, [r3]
 80092be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80092c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092c2:	f023 0310 	bic.w	r3, r3, #16
 80092c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	330c      	adds	r3, #12
 80092d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80092d4:	65ba      	str	r2, [r7, #88]	; 0x58
 80092d6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80092da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80092dc:	e841 2300 	strex	r3, r2, [r1]
 80092e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80092e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d1e3      	bne.n	80092b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ec:	4618      	mov	r0, r3
 80092ee:	f7fc f9b6 	bl	800565e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	1ad3      	subs	r3, r2, r3
 80092fe:	b29b      	uxth	r3, r3
 8009300:	4619      	mov	r1, r3
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 f8b6 	bl	8009474 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009308:	e099      	b.n	800943e <HAL_UART_IRQHandler+0x50e>
 800930a:	bf00      	nop
 800930c:	080096ab 	.word	0x080096ab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009318:	b29b      	uxth	r3, r3
 800931a:	1ad3      	subs	r3, r2, r3
 800931c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009324:	b29b      	uxth	r3, r3
 8009326:	2b00      	cmp	r3, #0
 8009328:	f000 808b 	beq.w	8009442 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800932c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009330:	2b00      	cmp	r3, #0
 8009332:	f000 8086 	beq.w	8009442 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	330c      	adds	r3, #12
 800933c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800933e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009340:	e853 3f00 	ldrex	r3, [r3]
 8009344:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009348:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800934c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	330c      	adds	r3, #12
 8009356:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800935a:	647a      	str	r2, [r7, #68]	; 0x44
 800935c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800935e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009360:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009362:	e841 2300 	strex	r3, r2, [r1]
 8009366:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800936a:	2b00      	cmp	r3, #0
 800936c:	d1e3      	bne.n	8009336 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	3314      	adds	r3, #20
 8009374:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009378:	e853 3f00 	ldrex	r3, [r3]
 800937c:	623b      	str	r3, [r7, #32]
   return(result);
 800937e:	6a3b      	ldr	r3, [r7, #32]
 8009380:	f023 0301 	bic.w	r3, r3, #1
 8009384:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	3314      	adds	r3, #20
 800938e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009392:	633a      	str	r2, [r7, #48]	; 0x30
 8009394:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009396:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800939a:	e841 2300 	strex	r3, r2, [r1]
 800939e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80093a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d1e3      	bne.n	800936e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2220      	movs	r2, #32
 80093aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2200      	movs	r2, #0
 80093b2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	330c      	adds	r3, #12
 80093ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	e853 3f00 	ldrex	r3, [r3]
 80093c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f023 0310 	bic.w	r3, r3, #16
 80093ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	330c      	adds	r3, #12
 80093d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80093d8:	61fa      	str	r2, [r7, #28]
 80093da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093dc:	69b9      	ldr	r1, [r7, #24]
 80093de:	69fa      	ldr	r2, [r7, #28]
 80093e0:	e841 2300 	strex	r3, r2, [r1]
 80093e4:	617b      	str	r3, [r7, #20]
   return(result);
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d1e3      	bne.n	80093b4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80093ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80093f0:	4619      	mov	r1, r3
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 f83e 	bl	8009474 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80093f8:	e023      	b.n	8009442 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80093fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009402:	2b00      	cmp	r3, #0
 8009404:	d009      	beq.n	800941a <HAL_UART_IRQHandler+0x4ea>
 8009406:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800940a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800940e:	2b00      	cmp	r3, #0
 8009410:	d003      	beq.n	800941a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f000 f95d 	bl	80096d2 <UART_Transmit_IT>
    return;
 8009418:	e014      	b.n	8009444 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800941a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800941e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009422:	2b00      	cmp	r3, #0
 8009424:	d00e      	beq.n	8009444 <HAL_UART_IRQHandler+0x514>
 8009426:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800942a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800942e:	2b00      	cmp	r3, #0
 8009430:	d008      	beq.n	8009444 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f000 f99d 	bl	8009772 <UART_EndTransmit_IT>
    return;
 8009438:	e004      	b.n	8009444 <HAL_UART_IRQHandler+0x514>
    return;
 800943a:	bf00      	nop
 800943c:	e002      	b.n	8009444 <HAL_UART_IRQHandler+0x514>
      return;
 800943e:	bf00      	nop
 8009440:	e000      	b.n	8009444 <HAL_UART_IRQHandler+0x514>
      return;
 8009442:	bf00      	nop
  }
}
 8009444:	37e8      	adds	r7, #232	; 0xe8
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}
 800944a:	bf00      	nop

0800944c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800944c:	b480      	push	{r7}
 800944e:	b083      	sub	sp, #12
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009454:	bf00      	nop
 8009456:	370c      	adds	r7, #12
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr

08009460 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009460:	b480      	push	{r7}
 8009462:	b083      	sub	sp, #12
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009468:	bf00      	nop
 800946a:	370c      	adds	r7, #12
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr

08009474 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009474:	b480      	push	{r7}
 8009476:	b083      	sub	sp, #12
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	460b      	mov	r3, r1
 800947e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009480:	bf00      	nop
 8009482:	370c      	adds	r7, #12
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr

0800948c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b090      	sub	sp, #64	; 0x40
 8009490:	af00      	add	r7, sp, #0
 8009492:	60f8      	str	r0, [r7, #12]
 8009494:	60b9      	str	r1, [r7, #8]
 8009496:	603b      	str	r3, [r7, #0]
 8009498:	4613      	mov	r3, r2
 800949a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800949c:	e050      	b.n	8009540 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800949e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094a4:	d04c      	beq.n	8009540 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80094a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d007      	beq.n	80094bc <UART_WaitOnFlagUntilTimeout+0x30>
 80094ac:	f7fb fbca 	bl	8004c44 <HAL_GetTick>
 80094b0:	4602      	mov	r2, r0
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	1ad3      	subs	r3, r2, r3
 80094b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d241      	bcs.n	8009540 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	330c      	adds	r3, #12
 80094c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094c6:	e853 3f00 	ldrex	r3, [r3]
 80094ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80094cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80094d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	330c      	adds	r3, #12
 80094da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80094dc:	637a      	str	r2, [r7, #52]	; 0x34
 80094de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80094e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094e4:	e841 2300 	strex	r3, r2, [r1]
 80094e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80094ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d1e5      	bne.n	80094bc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	3314      	adds	r3, #20
 80094f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	e853 3f00 	ldrex	r3, [r3]
 80094fe:	613b      	str	r3, [r7, #16]
   return(result);
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	f023 0301 	bic.w	r3, r3, #1
 8009506:	63bb      	str	r3, [r7, #56]	; 0x38
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	3314      	adds	r3, #20
 800950e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009510:	623a      	str	r2, [r7, #32]
 8009512:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009514:	69f9      	ldr	r1, [r7, #28]
 8009516:	6a3a      	ldr	r2, [r7, #32]
 8009518:	e841 2300 	strex	r3, r2, [r1]
 800951c:	61bb      	str	r3, [r7, #24]
   return(result);
 800951e:	69bb      	ldr	r3, [r7, #24]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d1e5      	bne.n	80094f0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2220      	movs	r2, #32
 8009528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2220      	movs	r2, #32
 8009530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2200      	movs	r2, #0
 8009538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800953c:	2303      	movs	r3, #3
 800953e:	e00f      	b.n	8009560 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	681a      	ldr	r2, [r3, #0]
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	4013      	ands	r3, r2
 800954a:	68ba      	ldr	r2, [r7, #8]
 800954c:	429a      	cmp	r2, r3
 800954e:	bf0c      	ite	eq
 8009550:	2301      	moveq	r3, #1
 8009552:	2300      	movne	r3, #0
 8009554:	b2db      	uxtb	r3, r3
 8009556:	461a      	mov	r2, r3
 8009558:	79fb      	ldrb	r3, [r7, #7]
 800955a:	429a      	cmp	r2, r3
 800955c:	d09f      	beq.n	800949e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800955e:	2300      	movs	r3, #0
}
 8009560:	4618      	mov	r0, r3
 8009562:	3740      	adds	r7, #64	; 0x40
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009568:	b480      	push	{r7}
 800956a:	b085      	sub	sp, #20
 800956c:	af00      	add	r7, sp, #0
 800956e:	60f8      	str	r0, [r7, #12]
 8009570:	60b9      	str	r1, [r7, #8]
 8009572:	4613      	mov	r3, r2
 8009574:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	68ba      	ldr	r2, [r7, #8]
 800957a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	88fa      	ldrh	r2, [r7, #6]
 8009580:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	88fa      	ldrh	r2, [r7, #6]
 8009586:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2200      	movs	r2, #0
 800958c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2222      	movs	r2, #34	; 0x22
 8009592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2200      	movs	r2, #0
 800959a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	691b      	ldr	r3, [r3, #16]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d007      	beq.n	80095b6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	68da      	ldr	r2, [r3, #12]
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80095b4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	695a      	ldr	r2, [r3, #20]
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f042 0201 	orr.w	r2, r2, #1
 80095c4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	68da      	ldr	r2, [r3, #12]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f042 0220 	orr.w	r2, r2, #32
 80095d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80095d6:	2300      	movs	r3, #0
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3714      	adds	r7, #20
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr

080095e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b095      	sub	sp, #84	; 0x54
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	330c      	adds	r3, #12
 80095f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095f6:	e853 3f00 	ldrex	r3, [r3]
 80095fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80095fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009602:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	330c      	adds	r3, #12
 800960a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800960c:	643a      	str	r2, [r7, #64]	; 0x40
 800960e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009610:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009612:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009614:	e841 2300 	strex	r3, r2, [r1]
 8009618:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800961a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800961c:	2b00      	cmp	r3, #0
 800961e:	d1e5      	bne.n	80095ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	3314      	adds	r3, #20
 8009626:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009628:	6a3b      	ldr	r3, [r7, #32]
 800962a:	e853 3f00 	ldrex	r3, [r3]
 800962e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009630:	69fb      	ldr	r3, [r7, #28]
 8009632:	f023 0301 	bic.w	r3, r3, #1
 8009636:	64bb      	str	r3, [r7, #72]	; 0x48
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	3314      	adds	r3, #20
 800963e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009640:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009642:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009644:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009646:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009648:	e841 2300 	strex	r3, r2, [r1]
 800964c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800964e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009650:	2b00      	cmp	r3, #0
 8009652:	d1e5      	bne.n	8009620 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009658:	2b01      	cmp	r3, #1
 800965a:	d119      	bne.n	8009690 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	330c      	adds	r3, #12
 8009662:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	e853 3f00 	ldrex	r3, [r3]
 800966a:	60bb      	str	r3, [r7, #8]
   return(result);
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	f023 0310 	bic.w	r3, r3, #16
 8009672:	647b      	str	r3, [r7, #68]	; 0x44
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	330c      	adds	r3, #12
 800967a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800967c:	61ba      	str	r2, [r7, #24]
 800967e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009680:	6979      	ldr	r1, [r7, #20]
 8009682:	69ba      	ldr	r2, [r7, #24]
 8009684:	e841 2300 	strex	r3, r2, [r1]
 8009688:	613b      	str	r3, [r7, #16]
   return(result);
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d1e5      	bne.n	800965c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2220      	movs	r2, #32
 8009694:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2200      	movs	r2, #0
 800969c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800969e:	bf00      	nop
 80096a0:	3754      	adds	r7, #84	; 0x54
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr

080096aa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b084      	sub	sp, #16
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	2200      	movs	r2, #0
 80096bc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2200      	movs	r2, #0
 80096c2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80096c4:	68f8      	ldr	r0, [r7, #12]
 80096c6:	f7ff fecb 	bl	8009460 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096ca:	bf00      	nop
 80096cc:	3710      	adds	r7, #16
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}

080096d2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80096d2:	b480      	push	{r7}
 80096d4:	b085      	sub	sp, #20
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	2b21      	cmp	r3, #33	; 0x21
 80096e4:	d13e      	bne.n	8009764 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096ee:	d114      	bne.n	800971a <UART_Transmit_IT+0x48>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	691b      	ldr	r3, [r3, #16]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d110      	bne.n	800971a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6a1b      	ldr	r3, [r3, #32]
 80096fc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	881b      	ldrh	r3, [r3, #0]
 8009702:	461a      	mov	r2, r3
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800970c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6a1b      	ldr	r3, [r3, #32]
 8009712:	1c9a      	adds	r2, r3, #2
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	621a      	str	r2, [r3, #32]
 8009718:	e008      	b.n	800972c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6a1b      	ldr	r3, [r3, #32]
 800971e:	1c59      	adds	r1, r3, #1
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	6211      	str	r1, [r2, #32]
 8009724:	781a      	ldrb	r2, [r3, #0]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009730:	b29b      	uxth	r3, r3
 8009732:	3b01      	subs	r3, #1
 8009734:	b29b      	uxth	r3, r3
 8009736:	687a      	ldr	r2, [r7, #4]
 8009738:	4619      	mov	r1, r3
 800973a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800973c:	2b00      	cmp	r3, #0
 800973e:	d10f      	bne.n	8009760 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	68da      	ldr	r2, [r3, #12]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800974e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	68da      	ldr	r2, [r3, #12]
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800975e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009760:	2300      	movs	r3, #0
 8009762:	e000      	b.n	8009766 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009764:	2302      	movs	r3, #2
  }
}
 8009766:	4618      	mov	r0, r3
 8009768:	3714      	adds	r7, #20
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr

08009772 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009772:	b580      	push	{r7, lr}
 8009774:	b082      	sub	sp, #8
 8009776:	af00      	add	r7, sp, #0
 8009778:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	68da      	ldr	r2, [r3, #12]
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009788:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2220      	movs	r2, #32
 800978e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f7ff fe5a 	bl	800944c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009798:	2300      	movs	r3, #0
}
 800979a:	4618      	mov	r0, r3
 800979c:	3708      	adds	r7, #8
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}

080097a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80097a2:	b580      	push	{r7, lr}
 80097a4:	b08c      	sub	sp, #48	; 0x30
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80097b0:	b2db      	uxtb	r3, r3
 80097b2:	2b22      	cmp	r3, #34	; 0x22
 80097b4:	f040 80ab 	bne.w	800990e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	689b      	ldr	r3, [r3, #8]
 80097bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097c0:	d117      	bne.n	80097f2 <UART_Receive_IT+0x50>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	691b      	ldr	r3, [r3, #16]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d113      	bne.n	80097f2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80097ca:	2300      	movs	r3, #0
 80097cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097d2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	b29b      	uxth	r3, r3
 80097dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097e0:	b29a      	uxth	r2, r3
 80097e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ea:	1c9a      	adds	r2, r3, #2
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	629a      	str	r2, [r3, #40]	; 0x28
 80097f0:	e026      	b.n	8009840 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80097f8:	2300      	movs	r3, #0
 80097fa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	689b      	ldr	r3, [r3, #8]
 8009800:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009804:	d007      	beq.n	8009816 <UART_Receive_IT+0x74>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	689b      	ldr	r3, [r3, #8]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d10a      	bne.n	8009824 <UART_Receive_IT+0x82>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	691b      	ldr	r3, [r3, #16]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d106      	bne.n	8009824 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	b2da      	uxtb	r2, r3
 800981e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009820:	701a      	strb	r2, [r3, #0]
 8009822:	e008      	b.n	8009836 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	685b      	ldr	r3, [r3, #4]
 800982a:	b2db      	uxtb	r3, r3
 800982c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009830:	b2da      	uxtb	r2, r3
 8009832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009834:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800983a:	1c5a      	adds	r2, r3, #1
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009844:	b29b      	uxth	r3, r3
 8009846:	3b01      	subs	r3, #1
 8009848:	b29b      	uxth	r3, r3
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	4619      	mov	r1, r3
 800984e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009850:	2b00      	cmp	r3, #0
 8009852:	d15a      	bne.n	800990a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	68da      	ldr	r2, [r3, #12]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f022 0220 	bic.w	r2, r2, #32
 8009862:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	68da      	ldr	r2, [r3, #12]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009872:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	695a      	ldr	r2, [r3, #20]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f022 0201 	bic.w	r2, r2, #1
 8009882:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2220      	movs	r2, #32
 8009888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009890:	2b01      	cmp	r3, #1
 8009892:	d135      	bne.n	8009900 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2200      	movs	r2, #0
 8009898:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	330c      	adds	r3, #12
 80098a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	e853 3f00 	ldrex	r3, [r3]
 80098a8:	613b      	str	r3, [r7, #16]
   return(result);
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	f023 0310 	bic.w	r3, r3, #16
 80098b0:	627b      	str	r3, [r7, #36]	; 0x24
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	330c      	adds	r3, #12
 80098b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098ba:	623a      	str	r2, [r7, #32]
 80098bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098be:	69f9      	ldr	r1, [r7, #28]
 80098c0:	6a3a      	ldr	r2, [r7, #32]
 80098c2:	e841 2300 	strex	r3, r2, [r1]
 80098c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80098c8:	69bb      	ldr	r3, [r7, #24]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d1e5      	bne.n	800989a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f003 0310 	and.w	r3, r3, #16
 80098d8:	2b10      	cmp	r3, #16
 80098da:	d10a      	bne.n	80098f2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80098dc:	2300      	movs	r3, #0
 80098de:	60fb      	str	r3, [r7, #12]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	60fb      	str	r3, [r7, #12]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	60fb      	str	r3, [r7, #12]
 80098f0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80098f6:	4619      	mov	r1, r3
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f7ff fdbb 	bl	8009474 <HAL_UARTEx_RxEventCallback>
 80098fe:	e002      	b.n	8009906 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f7f8 f841 	bl	8001988 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009906:	2300      	movs	r3, #0
 8009908:	e002      	b.n	8009910 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800990a:	2300      	movs	r3, #0
 800990c:	e000      	b.n	8009910 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800990e:	2302      	movs	r3, #2
  }
}
 8009910:	4618      	mov	r0, r3
 8009912:	3730      	adds	r7, #48	; 0x30
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800991c:	b0c0      	sub	sp, #256	; 0x100
 800991e:	af00      	add	r7, sp, #0
 8009920:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	691b      	ldr	r3, [r3, #16]
 800992c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009934:	68d9      	ldr	r1, [r3, #12]
 8009936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	ea40 0301 	orr.w	r3, r0, r1
 8009940:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009946:	689a      	ldr	r2, [r3, #8]
 8009948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800994c:	691b      	ldr	r3, [r3, #16]
 800994e:	431a      	orrs	r2, r3
 8009950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009954:	695b      	ldr	r3, [r3, #20]
 8009956:	431a      	orrs	r2, r3
 8009958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800995c:	69db      	ldr	r3, [r3, #28]
 800995e:	4313      	orrs	r3, r2
 8009960:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	68db      	ldr	r3, [r3, #12]
 800996c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009970:	f021 010c 	bic.w	r1, r1, #12
 8009974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009978:	681a      	ldr	r2, [r3, #0]
 800997a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800997e:	430b      	orrs	r3, r1
 8009980:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	695b      	ldr	r3, [r3, #20]
 800998a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800998e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009992:	6999      	ldr	r1, [r3, #24]
 8009994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009998:	681a      	ldr	r2, [r3, #0]
 800999a:	ea40 0301 	orr.w	r3, r0, r1
 800999e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80099a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099a4:	681a      	ldr	r2, [r3, #0]
 80099a6:	4b8f      	ldr	r3, [pc, #572]	; (8009be4 <UART_SetConfig+0x2cc>)
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d005      	beq.n	80099b8 <UART_SetConfig+0xa0>
 80099ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	4b8d      	ldr	r3, [pc, #564]	; (8009be8 <UART_SetConfig+0x2d0>)
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d104      	bne.n	80099c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80099b8:	f7fd fcce 	bl	8007358 <HAL_RCC_GetPCLK2Freq>
 80099bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80099c0:	e003      	b.n	80099ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80099c2:	f7fd fcb5 	bl	8007330 <HAL_RCC_GetPCLK1Freq>
 80099c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80099ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099ce:	69db      	ldr	r3, [r3, #28]
 80099d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099d4:	f040 810c 	bne.w	8009bf0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80099d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099dc:	2200      	movs	r2, #0
 80099de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80099e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80099e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80099ea:	4622      	mov	r2, r4
 80099ec:	462b      	mov	r3, r5
 80099ee:	1891      	adds	r1, r2, r2
 80099f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80099f2:	415b      	adcs	r3, r3
 80099f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80099f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80099fa:	4621      	mov	r1, r4
 80099fc:	eb12 0801 	adds.w	r8, r2, r1
 8009a00:	4629      	mov	r1, r5
 8009a02:	eb43 0901 	adc.w	r9, r3, r1
 8009a06:	f04f 0200 	mov.w	r2, #0
 8009a0a:	f04f 0300 	mov.w	r3, #0
 8009a0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009a12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009a16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009a1a:	4690      	mov	r8, r2
 8009a1c:	4699      	mov	r9, r3
 8009a1e:	4623      	mov	r3, r4
 8009a20:	eb18 0303 	adds.w	r3, r8, r3
 8009a24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009a28:	462b      	mov	r3, r5
 8009a2a:	eb49 0303 	adc.w	r3, r9, r3
 8009a2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009a3e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009a42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009a46:	460b      	mov	r3, r1
 8009a48:	18db      	adds	r3, r3, r3
 8009a4a:	653b      	str	r3, [r7, #80]	; 0x50
 8009a4c:	4613      	mov	r3, r2
 8009a4e:	eb42 0303 	adc.w	r3, r2, r3
 8009a52:	657b      	str	r3, [r7, #84]	; 0x54
 8009a54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009a58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009a5c:	f7f7 f924 	bl	8000ca8 <__aeabi_uldivmod>
 8009a60:	4602      	mov	r2, r0
 8009a62:	460b      	mov	r3, r1
 8009a64:	4b61      	ldr	r3, [pc, #388]	; (8009bec <UART_SetConfig+0x2d4>)
 8009a66:	fba3 2302 	umull	r2, r3, r3, r2
 8009a6a:	095b      	lsrs	r3, r3, #5
 8009a6c:	011c      	lsls	r4, r3, #4
 8009a6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a72:	2200      	movs	r2, #0
 8009a74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009a78:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009a7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009a80:	4642      	mov	r2, r8
 8009a82:	464b      	mov	r3, r9
 8009a84:	1891      	adds	r1, r2, r2
 8009a86:	64b9      	str	r1, [r7, #72]	; 0x48
 8009a88:	415b      	adcs	r3, r3
 8009a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009a90:	4641      	mov	r1, r8
 8009a92:	eb12 0a01 	adds.w	sl, r2, r1
 8009a96:	4649      	mov	r1, r9
 8009a98:	eb43 0b01 	adc.w	fp, r3, r1
 8009a9c:	f04f 0200 	mov.w	r2, #0
 8009aa0:	f04f 0300 	mov.w	r3, #0
 8009aa4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009aa8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009aac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009ab0:	4692      	mov	sl, r2
 8009ab2:	469b      	mov	fp, r3
 8009ab4:	4643      	mov	r3, r8
 8009ab6:	eb1a 0303 	adds.w	r3, sl, r3
 8009aba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009abe:	464b      	mov	r3, r9
 8009ac0:	eb4b 0303 	adc.w	r3, fp, r3
 8009ac4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	2200      	movs	r2, #0
 8009ad0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009ad4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009ad8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009adc:	460b      	mov	r3, r1
 8009ade:	18db      	adds	r3, r3, r3
 8009ae0:	643b      	str	r3, [r7, #64]	; 0x40
 8009ae2:	4613      	mov	r3, r2
 8009ae4:	eb42 0303 	adc.w	r3, r2, r3
 8009ae8:	647b      	str	r3, [r7, #68]	; 0x44
 8009aea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009aee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009af2:	f7f7 f8d9 	bl	8000ca8 <__aeabi_uldivmod>
 8009af6:	4602      	mov	r2, r0
 8009af8:	460b      	mov	r3, r1
 8009afa:	4611      	mov	r1, r2
 8009afc:	4b3b      	ldr	r3, [pc, #236]	; (8009bec <UART_SetConfig+0x2d4>)
 8009afe:	fba3 2301 	umull	r2, r3, r3, r1
 8009b02:	095b      	lsrs	r3, r3, #5
 8009b04:	2264      	movs	r2, #100	; 0x64
 8009b06:	fb02 f303 	mul.w	r3, r2, r3
 8009b0a:	1acb      	subs	r3, r1, r3
 8009b0c:	00db      	lsls	r3, r3, #3
 8009b0e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009b12:	4b36      	ldr	r3, [pc, #216]	; (8009bec <UART_SetConfig+0x2d4>)
 8009b14:	fba3 2302 	umull	r2, r3, r3, r2
 8009b18:	095b      	lsrs	r3, r3, #5
 8009b1a:	005b      	lsls	r3, r3, #1
 8009b1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009b20:	441c      	add	r4, r3
 8009b22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b26:	2200      	movs	r2, #0
 8009b28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009b2c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009b30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009b34:	4642      	mov	r2, r8
 8009b36:	464b      	mov	r3, r9
 8009b38:	1891      	adds	r1, r2, r2
 8009b3a:	63b9      	str	r1, [r7, #56]	; 0x38
 8009b3c:	415b      	adcs	r3, r3
 8009b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009b44:	4641      	mov	r1, r8
 8009b46:	1851      	adds	r1, r2, r1
 8009b48:	6339      	str	r1, [r7, #48]	; 0x30
 8009b4a:	4649      	mov	r1, r9
 8009b4c:	414b      	adcs	r3, r1
 8009b4e:	637b      	str	r3, [r7, #52]	; 0x34
 8009b50:	f04f 0200 	mov.w	r2, #0
 8009b54:	f04f 0300 	mov.w	r3, #0
 8009b58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009b5c:	4659      	mov	r1, fp
 8009b5e:	00cb      	lsls	r3, r1, #3
 8009b60:	4651      	mov	r1, sl
 8009b62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009b66:	4651      	mov	r1, sl
 8009b68:	00ca      	lsls	r2, r1, #3
 8009b6a:	4610      	mov	r0, r2
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	4603      	mov	r3, r0
 8009b70:	4642      	mov	r2, r8
 8009b72:	189b      	adds	r3, r3, r2
 8009b74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009b78:	464b      	mov	r3, r9
 8009b7a:	460a      	mov	r2, r1
 8009b7c:	eb42 0303 	adc.w	r3, r2, r3
 8009b80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b88:	685b      	ldr	r3, [r3, #4]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009b90:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009b94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009b98:	460b      	mov	r3, r1
 8009b9a:	18db      	adds	r3, r3, r3
 8009b9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b9e:	4613      	mov	r3, r2
 8009ba0:	eb42 0303 	adc.w	r3, r2, r3
 8009ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ba6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009baa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009bae:	f7f7 f87b 	bl	8000ca8 <__aeabi_uldivmod>
 8009bb2:	4602      	mov	r2, r0
 8009bb4:	460b      	mov	r3, r1
 8009bb6:	4b0d      	ldr	r3, [pc, #52]	; (8009bec <UART_SetConfig+0x2d4>)
 8009bb8:	fba3 1302 	umull	r1, r3, r3, r2
 8009bbc:	095b      	lsrs	r3, r3, #5
 8009bbe:	2164      	movs	r1, #100	; 0x64
 8009bc0:	fb01 f303 	mul.w	r3, r1, r3
 8009bc4:	1ad3      	subs	r3, r2, r3
 8009bc6:	00db      	lsls	r3, r3, #3
 8009bc8:	3332      	adds	r3, #50	; 0x32
 8009bca:	4a08      	ldr	r2, [pc, #32]	; (8009bec <UART_SetConfig+0x2d4>)
 8009bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8009bd0:	095b      	lsrs	r3, r3, #5
 8009bd2:	f003 0207 	and.w	r2, r3, #7
 8009bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4422      	add	r2, r4
 8009bde:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009be0:	e106      	b.n	8009df0 <UART_SetConfig+0x4d8>
 8009be2:	bf00      	nop
 8009be4:	40011000 	.word	0x40011000
 8009be8:	40011400 	.word	0x40011400
 8009bec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009bf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009bfa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009bfe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009c02:	4642      	mov	r2, r8
 8009c04:	464b      	mov	r3, r9
 8009c06:	1891      	adds	r1, r2, r2
 8009c08:	6239      	str	r1, [r7, #32]
 8009c0a:	415b      	adcs	r3, r3
 8009c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8009c0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009c12:	4641      	mov	r1, r8
 8009c14:	1854      	adds	r4, r2, r1
 8009c16:	4649      	mov	r1, r9
 8009c18:	eb43 0501 	adc.w	r5, r3, r1
 8009c1c:	f04f 0200 	mov.w	r2, #0
 8009c20:	f04f 0300 	mov.w	r3, #0
 8009c24:	00eb      	lsls	r3, r5, #3
 8009c26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009c2a:	00e2      	lsls	r2, r4, #3
 8009c2c:	4614      	mov	r4, r2
 8009c2e:	461d      	mov	r5, r3
 8009c30:	4643      	mov	r3, r8
 8009c32:	18e3      	adds	r3, r4, r3
 8009c34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009c38:	464b      	mov	r3, r9
 8009c3a:	eb45 0303 	adc.w	r3, r5, r3
 8009c3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009c4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009c52:	f04f 0200 	mov.w	r2, #0
 8009c56:	f04f 0300 	mov.w	r3, #0
 8009c5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009c5e:	4629      	mov	r1, r5
 8009c60:	008b      	lsls	r3, r1, #2
 8009c62:	4621      	mov	r1, r4
 8009c64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009c68:	4621      	mov	r1, r4
 8009c6a:	008a      	lsls	r2, r1, #2
 8009c6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009c70:	f7f7 f81a 	bl	8000ca8 <__aeabi_uldivmod>
 8009c74:	4602      	mov	r2, r0
 8009c76:	460b      	mov	r3, r1
 8009c78:	4b60      	ldr	r3, [pc, #384]	; (8009dfc <UART_SetConfig+0x4e4>)
 8009c7a:	fba3 2302 	umull	r2, r3, r3, r2
 8009c7e:	095b      	lsrs	r3, r3, #5
 8009c80:	011c      	lsls	r4, r3, #4
 8009c82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c86:	2200      	movs	r2, #0
 8009c88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009c8c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009c90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009c94:	4642      	mov	r2, r8
 8009c96:	464b      	mov	r3, r9
 8009c98:	1891      	adds	r1, r2, r2
 8009c9a:	61b9      	str	r1, [r7, #24]
 8009c9c:	415b      	adcs	r3, r3
 8009c9e:	61fb      	str	r3, [r7, #28]
 8009ca0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009ca4:	4641      	mov	r1, r8
 8009ca6:	1851      	adds	r1, r2, r1
 8009ca8:	6139      	str	r1, [r7, #16]
 8009caa:	4649      	mov	r1, r9
 8009cac:	414b      	adcs	r3, r1
 8009cae:	617b      	str	r3, [r7, #20]
 8009cb0:	f04f 0200 	mov.w	r2, #0
 8009cb4:	f04f 0300 	mov.w	r3, #0
 8009cb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009cbc:	4659      	mov	r1, fp
 8009cbe:	00cb      	lsls	r3, r1, #3
 8009cc0:	4651      	mov	r1, sl
 8009cc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009cc6:	4651      	mov	r1, sl
 8009cc8:	00ca      	lsls	r2, r1, #3
 8009cca:	4610      	mov	r0, r2
 8009ccc:	4619      	mov	r1, r3
 8009cce:	4603      	mov	r3, r0
 8009cd0:	4642      	mov	r2, r8
 8009cd2:	189b      	adds	r3, r3, r2
 8009cd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009cd8:	464b      	mov	r3, r9
 8009cda:	460a      	mov	r2, r1
 8009cdc:	eb42 0303 	adc.w	r3, r2, r3
 8009ce0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	2200      	movs	r2, #0
 8009cec:	67bb      	str	r3, [r7, #120]	; 0x78
 8009cee:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009cf0:	f04f 0200 	mov.w	r2, #0
 8009cf4:	f04f 0300 	mov.w	r3, #0
 8009cf8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009cfc:	4649      	mov	r1, r9
 8009cfe:	008b      	lsls	r3, r1, #2
 8009d00:	4641      	mov	r1, r8
 8009d02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009d06:	4641      	mov	r1, r8
 8009d08:	008a      	lsls	r2, r1, #2
 8009d0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009d0e:	f7f6 ffcb 	bl	8000ca8 <__aeabi_uldivmod>
 8009d12:	4602      	mov	r2, r0
 8009d14:	460b      	mov	r3, r1
 8009d16:	4611      	mov	r1, r2
 8009d18:	4b38      	ldr	r3, [pc, #224]	; (8009dfc <UART_SetConfig+0x4e4>)
 8009d1a:	fba3 2301 	umull	r2, r3, r3, r1
 8009d1e:	095b      	lsrs	r3, r3, #5
 8009d20:	2264      	movs	r2, #100	; 0x64
 8009d22:	fb02 f303 	mul.w	r3, r2, r3
 8009d26:	1acb      	subs	r3, r1, r3
 8009d28:	011b      	lsls	r3, r3, #4
 8009d2a:	3332      	adds	r3, #50	; 0x32
 8009d2c:	4a33      	ldr	r2, [pc, #204]	; (8009dfc <UART_SetConfig+0x4e4>)
 8009d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8009d32:	095b      	lsrs	r3, r3, #5
 8009d34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d38:	441c      	add	r4, r3
 8009d3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009d3e:	2200      	movs	r2, #0
 8009d40:	673b      	str	r3, [r7, #112]	; 0x70
 8009d42:	677a      	str	r2, [r7, #116]	; 0x74
 8009d44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009d48:	4642      	mov	r2, r8
 8009d4a:	464b      	mov	r3, r9
 8009d4c:	1891      	adds	r1, r2, r2
 8009d4e:	60b9      	str	r1, [r7, #8]
 8009d50:	415b      	adcs	r3, r3
 8009d52:	60fb      	str	r3, [r7, #12]
 8009d54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009d58:	4641      	mov	r1, r8
 8009d5a:	1851      	adds	r1, r2, r1
 8009d5c:	6039      	str	r1, [r7, #0]
 8009d5e:	4649      	mov	r1, r9
 8009d60:	414b      	adcs	r3, r1
 8009d62:	607b      	str	r3, [r7, #4]
 8009d64:	f04f 0200 	mov.w	r2, #0
 8009d68:	f04f 0300 	mov.w	r3, #0
 8009d6c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009d70:	4659      	mov	r1, fp
 8009d72:	00cb      	lsls	r3, r1, #3
 8009d74:	4651      	mov	r1, sl
 8009d76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d7a:	4651      	mov	r1, sl
 8009d7c:	00ca      	lsls	r2, r1, #3
 8009d7e:	4610      	mov	r0, r2
 8009d80:	4619      	mov	r1, r3
 8009d82:	4603      	mov	r3, r0
 8009d84:	4642      	mov	r2, r8
 8009d86:	189b      	adds	r3, r3, r2
 8009d88:	66bb      	str	r3, [r7, #104]	; 0x68
 8009d8a:	464b      	mov	r3, r9
 8009d8c:	460a      	mov	r2, r1
 8009d8e:	eb42 0303 	adc.w	r3, r2, r3
 8009d92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	663b      	str	r3, [r7, #96]	; 0x60
 8009d9e:	667a      	str	r2, [r7, #100]	; 0x64
 8009da0:	f04f 0200 	mov.w	r2, #0
 8009da4:	f04f 0300 	mov.w	r3, #0
 8009da8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009dac:	4649      	mov	r1, r9
 8009dae:	008b      	lsls	r3, r1, #2
 8009db0:	4641      	mov	r1, r8
 8009db2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009db6:	4641      	mov	r1, r8
 8009db8:	008a      	lsls	r2, r1, #2
 8009dba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009dbe:	f7f6 ff73 	bl	8000ca8 <__aeabi_uldivmod>
 8009dc2:	4602      	mov	r2, r0
 8009dc4:	460b      	mov	r3, r1
 8009dc6:	4b0d      	ldr	r3, [pc, #52]	; (8009dfc <UART_SetConfig+0x4e4>)
 8009dc8:	fba3 1302 	umull	r1, r3, r3, r2
 8009dcc:	095b      	lsrs	r3, r3, #5
 8009dce:	2164      	movs	r1, #100	; 0x64
 8009dd0:	fb01 f303 	mul.w	r3, r1, r3
 8009dd4:	1ad3      	subs	r3, r2, r3
 8009dd6:	011b      	lsls	r3, r3, #4
 8009dd8:	3332      	adds	r3, #50	; 0x32
 8009dda:	4a08      	ldr	r2, [pc, #32]	; (8009dfc <UART_SetConfig+0x4e4>)
 8009ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8009de0:	095b      	lsrs	r3, r3, #5
 8009de2:	f003 020f 	and.w	r2, r3, #15
 8009de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4422      	add	r2, r4
 8009dee:	609a      	str	r2, [r3, #8]
}
 8009df0:	bf00      	nop
 8009df2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009df6:	46bd      	mov	sp, r7
 8009df8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009dfc:	51eb851f 	.word	0x51eb851f

08009e00 <__NVIC_SetPriority>:
{
 8009e00:	b480      	push	{r7}
 8009e02:	b083      	sub	sp, #12
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	4603      	mov	r3, r0
 8009e08:	6039      	str	r1, [r7, #0]
 8009e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	db0a      	blt.n	8009e2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	b2da      	uxtb	r2, r3
 8009e18:	490c      	ldr	r1, [pc, #48]	; (8009e4c <__NVIC_SetPriority+0x4c>)
 8009e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e1e:	0112      	lsls	r2, r2, #4
 8009e20:	b2d2      	uxtb	r2, r2
 8009e22:	440b      	add	r3, r1
 8009e24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009e28:	e00a      	b.n	8009e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	b2da      	uxtb	r2, r3
 8009e2e:	4908      	ldr	r1, [pc, #32]	; (8009e50 <__NVIC_SetPriority+0x50>)
 8009e30:	79fb      	ldrb	r3, [r7, #7]
 8009e32:	f003 030f 	and.w	r3, r3, #15
 8009e36:	3b04      	subs	r3, #4
 8009e38:	0112      	lsls	r2, r2, #4
 8009e3a:	b2d2      	uxtb	r2, r2
 8009e3c:	440b      	add	r3, r1
 8009e3e:	761a      	strb	r2, [r3, #24]
}
 8009e40:	bf00      	nop
 8009e42:	370c      	adds	r7, #12
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr
 8009e4c:	e000e100 	.word	0xe000e100
 8009e50:	e000ed00 	.word	0xe000ed00

08009e54 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009e54:	b580      	push	{r7, lr}
 8009e56:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009e58:	2100      	movs	r1, #0
 8009e5a:	f06f 0004 	mvn.w	r0, #4
 8009e5e:	f7ff ffcf 	bl	8009e00 <__NVIC_SetPriority>
#endif
}
 8009e62:	bf00      	nop
 8009e64:	bd80      	pop	{r7, pc}
	...

08009e68 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009e68:	b480      	push	{r7}
 8009e6a:	b083      	sub	sp, #12
 8009e6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e6e:	f3ef 8305 	mrs	r3, IPSR
 8009e72:	603b      	str	r3, [r7, #0]
  return(result);
 8009e74:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d003      	beq.n	8009e82 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009e7a:	f06f 0305 	mvn.w	r3, #5
 8009e7e:	607b      	str	r3, [r7, #4]
 8009e80:	e00c      	b.n	8009e9c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009e82:	4b0a      	ldr	r3, [pc, #40]	; (8009eac <osKernelInitialize+0x44>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d105      	bne.n	8009e96 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009e8a:	4b08      	ldr	r3, [pc, #32]	; (8009eac <osKernelInitialize+0x44>)
 8009e8c:	2201      	movs	r2, #1
 8009e8e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009e90:	2300      	movs	r3, #0
 8009e92:	607b      	str	r3, [r7, #4]
 8009e94:	e002      	b.n	8009e9c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009e96:	f04f 33ff 	mov.w	r3, #4294967295
 8009e9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009e9c:	687b      	ldr	r3, [r7, #4]
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	370c      	adds	r7, #12
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea8:	4770      	bx	lr
 8009eaa:	bf00      	nop
 8009eac:	20000868 	.word	0x20000868

08009eb0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b082      	sub	sp, #8
 8009eb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009eb6:	f3ef 8305 	mrs	r3, IPSR
 8009eba:	603b      	str	r3, [r7, #0]
  return(result);
 8009ebc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d003      	beq.n	8009eca <osKernelStart+0x1a>
    stat = osErrorISR;
 8009ec2:	f06f 0305 	mvn.w	r3, #5
 8009ec6:	607b      	str	r3, [r7, #4]
 8009ec8:	e010      	b.n	8009eec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009eca:	4b0b      	ldr	r3, [pc, #44]	; (8009ef8 <osKernelStart+0x48>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	2b01      	cmp	r3, #1
 8009ed0:	d109      	bne.n	8009ee6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009ed2:	f7ff ffbf 	bl	8009e54 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009ed6:	4b08      	ldr	r3, [pc, #32]	; (8009ef8 <osKernelStart+0x48>)
 8009ed8:	2202      	movs	r2, #2
 8009eda:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009edc:	f001 f866 	bl	800afac <vTaskStartScheduler>
      stat = osOK;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	607b      	str	r3, [r7, #4]
 8009ee4:	e002      	b.n	8009eec <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8009eea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009eec:	687b      	ldr	r3, [r7, #4]
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3708      	adds	r7, #8
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
 8009ef6:	bf00      	nop
 8009ef8:	20000868 	.word	0x20000868

08009efc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b08e      	sub	sp, #56	; 0x38
 8009f00:	af04      	add	r7, sp, #16
 8009f02:	60f8      	str	r0, [r7, #12]
 8009f04:	60b9      	str	r1, [r7, #8]
 8009f06:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f0c:	f3ef 8305 	mrs	r3, IPSR
 8009f10:	617b      	str	r3, [r7, #20]
  return(result);
 8009f12:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d17e      	bne.n	800a016 <osThreadNew+0x11a>
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d07b      	beq.n	800a016 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009f1e:	2380      	movs	r3, #128	; 0x80
 8009f20:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009f22:	2318      	movs	r3, #24
 8009f24:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009f26:	2300      	movs	r3, #0
 8009f28:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8009f2e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d045      	beq.n	8009fc2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d002      	beq.n	8009f44 <osThreadNew+0x48>
        name = attr->name;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	699b      	ldr	r3, [r3, #24]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d002      	beq.n	8009f52 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	699b      	ldr	r3, [r3, #24]
 8009f50:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009f52:	69fb      	ldr	r3, [r7, #28]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d008      	beq.n	8009f6a <osThreadNew+0x6e>
 8009f58:	69fb      	ldr	r3, [r7, #28]
 8009f5a:	2b38      	cmp	r3, #56	; 0x38
 8009f5c:	d805      	bhi.n	8009f6a <osThreadNew+0x6e>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	f003 0301 	and.w	r3, r3, #1
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d001      	beq.n	8009f6e <osThreadNew+0x72>
        return (NULL);
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	e054      	b.n	800a018 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	695b      	ldr	r3, [r3, #20]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d003      	beq.n	8009f7e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	695b      	ldr	r3, [r3, #20]
 8009f7a:	089b      	lsrs	r3, r3, #2
 8009f7c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	689b      	ldr	r3, [r3, #8]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d00e      	beq.n	8009fa4 <osThreadNew+0xa8>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	68db      	ldr	r3, [r3, #12]
 8009f8a:	2b5b      	cmp	r3, #91	; 0x5b
 8009f8c:	d90a      	bls.n	8009fa4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d006      	beq.n	8009fa4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	695b      	ldr	r3, [r3, #20]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d002      	beq.n	8009fa4 <osThreadNew+0xa8>
        mem = 1;
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	61bb      	str	r3, [r7, #24]
 8009fa2:	e010      	b.n	8009fc6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	689b      	ldr	r3, [r3, #8]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d10c      	bne.n	8009fc6 <osThreadNew+0xca>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	68db      	ldr	r3, [r3, #12]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d108      	bne.n	8009fc6 <osThreadNew+0xca>
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	691b      	ldr	r3, [r3, #16]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d104      	bne.n	8009fc6 <osThreadNew+0xca>
          mem = 0;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	61bb      	str	r3, [r7, #24]
 8009fc0:	e001      	b.n	8009fc6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009fc6:	69bb      	ldr	r3, [r7, #24]
 8009fc8:	2b01      	cmp	r3, #1
 8009fca:	d110      	bne.n	8009fee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009fd0:	687a      	ldr	r2, [r7, #4]
 8009fd2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009fd4:	9202      	str	r2, [sp, #8]
 8009fd6:	9301      	str	r3, [sp, #4]
 8009fd8:	69fb      	ldr	r3, [r7, #28]
 8009fda:	9300      	str	r3, [sp, #0]
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	6a3a      	ldr	r2, [r7, #32]
 8009fe0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009fe2:	68f8      	ldr	r0, [r7, #12]
 8009fe4:	f000 fe0c 	bl	800ac00 <xTaskCreateStatic>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	613b      	str	r3, [r7, #16]
 8009fec:	e013      	b.n	800a016 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009fee:	69bb      	ldr	r3, [r7, #24]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d110      	bne.n	800a016 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009ff4:	6a3b      	ldr	r3, [r7, #32]
 8009ff6:	b29a      	uxth	r2, r3
 8009ff8:	f107 0310 	add.w	r3, r7, #16
 8009ffc:	9301      	str	r3, [sp, #4]
 8009ffe:	69fb      	ldr	r3, [r7, #28]
 800a000:	9300      	str	r3, [sp, #0]
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a006:	68f8      	ldr	r0, [r7, #12]
 800a008:	f000 fe57 	bl	800acba <xTaskCreate>
 800a00c:	4603      	mov	r3, r0
 800a00e:	2b01      	cmp	r3, #1
 800a010:	d001      	beq.n	800a016 <osThreadNew+0x11a>
            hTask = NULL;
 800a012:	2300      	movs	r3, #0
 800a014:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a016:	693b      	ldr	r3, [r7, #16]
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3728      	adds	r7, #40	; 0x28
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a020:	b580      	push	{r7, lr}
 800a022:	b084      	sub	sp, #16
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a028:	f3ef 8305 	mrs	r3, IPSR
 800a02c:	60bb      	str	r3, [r7, #8]
  return(result);
 800a02e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a030:	2b00      	cmp	r3, #0
 800a032:	d003      	beq.n	800a03c <osDelay+0x1c>
    stat = osErrorISR;
 800a034:	f06f 0305 	mvn.w	r3, #5
 800a038:	60fb      	str	r3, [r7, #12]
 800a03a:	e007      	b.n	800a04c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a03c:	2300      	movs	r3, #0
 800a03e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d002      	beq.n	800a04c <osDelay+0x2c>
      vTaskDelay(ticks);
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f000 ff7c 	bl	800af44 <vTaskDelay>
    }
  }

  return (stat);
 800a04c:	68fb      	ldr	r3, [r7, #12]
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3710      	adds	r7, #16
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
	...

0800a058 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a058:	b480      	push	{r7}
 800a05a:	b085      	sub	sp, #20
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	4a07      	ldr	r2, [pc, #28]	; (800a084 <vApplicationGetIdleTaskMemory+0x2c>)
 800a068:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	4a06      	ldr	r2, [pc, #24]	; (800a088 <vApplicationGetIdleTaskMemory+0x30>)
 800a06e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2280      	movs	r2, #128	; 0x80
 800a074:	601a      	str	r2, [r3, #0]
}
 800a076:	bf00      	nop
 800a078:	3714      	adds	r7, #20
 800a07a:	46bd      	mov	sp, r7
 800a07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a080:	4770      	bx	lr
 800a082:	bf00      	nop
 800a084:	2000086c 	.word	0x2000086c
 800a088:	200008c8 	.word	0x200008c8

0800a08c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a08c:	b480      	push	{r7}
 800a08e:	b085      	sub	sp, #20
 800a090:	af00      	add	r7, sp, #0
 800a092:	60f8      	str	r0, [r7, #12]
 800a094:	60b9      	str	r1, [r7, #8]
 800a096:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	4a07      	ldr	r2, [pc, #28]	; (800a0b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800a09c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	4a06      	ldr	r2, [pc, #24]	; (800a0bc <vApplicationGetTimerTaskMemory+0x30>)
 800a0a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a0aa:	601a      	str	r2, [r3, #0]
}
 800a0ac:	bf00      	nop
 800a0ae:	3714      	adds	r7, #20
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b6:	4770      	bx	lr
 800a0b8:	20000ac8 	.word	0x20000ac8
 800a0bc:	20000b24 	.word	0x20000b24

0800a0c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b083      	sub	sp, #12
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f103 0208 	add.w	r2, r3, #8
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f04f 32ff 	mov.w	r2, #4294967295
 800a0d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	f103 0208 	add.w	r2, r3, #8
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f103 0208 	add.w	r2, r3, #8
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a0f4:	bf00      	nop
 800a0f6:	370c      	adds	r7, #12
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr

0800a100 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a100:	b480      	push	{r7}
 800a102:	b083      	sub	sp, #12
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2200      	movs	r2, #0
 800a10c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a10e:	bf00      	nop
 800a110:	370c      	adds	r7, #12
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr

0800a11a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a11a:	b480      	push	{r7}
 800a11c:	b085      	sub	sp, #20
 800a11e:	af00      	add	r7, sp, #0
 800a120:	6078      	str	r0, [r7, #4]
 800a122:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	685b      	ldr	r3, [r3, #4]
 800a128:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	68fa      	ldr	r2, [r7, #12]
 800a12e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	689a      	ldr	r2, [r3, #8]
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	689b      	ldr	r3, [r3, #8]
 800a13c:	683a      	ldr	r2, [r7, #0]
 800a13e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	683a      	ldr	r2, [r7, #0]
 800a144:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	687a      	ldr	r2, [r7, #4]
 800a14a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	1c5a      	adds	r2, r3, #1
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	601a      	str	r2, [r3, #0]
}
 800a156:	bf00      	nop
 800a158:	3714      	adds	r7, #20
 800a15a:	46bd      	mov	sp, r7
 800a15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a160:	4770      	bx	lr

0800a162 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a162:	b480      	push	{r7}
 800a164:	b085      	sub	sp, #20
 800a166:	af00      	add	r7, sp, #0
 800a168:	6078      	str	r0, [r7, #4]
 800a16a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a178:	d103      	bne.n	800a182 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	691b      	ldr	r3, [r3, #16]
 800a17e:	60fb      	str	r3, [r7, #12]
 800a180:	e00c      	b.n	800a19c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	3308      	adds	r3, #8
 800a186:	60fb      	str	r3, [r7, #12]
 800a188:	e002      	b.n	800a190 <vListInsert+0x2e>
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	60fb      	str	r3, [r7, #12]
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	68ba      	ldr	r2, [r7, #8]
 800a198:	429a      	cmp	r2, r3
 800a19a:	d2f6      	bcs.n	800a18a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	685a      	ldr	r2, [r3, #4]
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	685b      	ldr	r3, [r3, #4]
 800a1a8:	683a      	ldr	r2, [r7, #0]
 800a1aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	68fa      	ldr	r2, [r7, #12]
 800a1b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	683a      	ldr	r2, [r7, #0]
 800a1b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	687a      	ldr	r2, [r7, #4]
 800a1bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	1c5a      	adds	r2, r3, #1
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	601a      	str	r2, [r3, #0]
}
 800a1c8:	bf00      	nop
 800a1ca:	3714      	adds	r7, #20
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr

0800a1d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b085      	sub	sp, #20
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	691b      	ldr	r3, [r3, #16]
 800a1e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	685b      	ldr	r3, [r3, #4]
 800a1e6:	687a      	ldr	r2, [r7, #4]
 800a1e8:	6892      	ldr	r2, [r2, #8]
 800a1ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	689b      	ldr	r3, [r3, #8]
 800a1f0:	687a      	ldr	r2, [r7, #4]
 800a1f2:	6852      	ldr	r2, [r2, #4]
 800a1f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d103      	bne.n	800a208 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	689a      	ldr	r2, [r3, #8]
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2200      	movs	r2, #0
 800a20c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	1e5a      	subs	r2, r3, #1
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3714      	adds	r7, #20
 800a220:	46bd      	mov	sp, r7
 800a222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a226:	4770      	bx	lr

0800a228 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b084      	sub	sp, #16
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d10a      	bne.n	800a252 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a240:	f383 8811 	msr	BASEPRI, r3
 800a244:	f3bf 8f6f 	isb	sy
 800a248:	f3bf 8f4f 	dsb	sy
 800a24c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a24e:	bf00      	nop
 800a250:	e7fe      	b.n	800a250 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a252:	f002 f84f 	bl	800c2f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681a      	ldr	r2, [r3, #0]
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a25e:	68f9      	ldr	r1, [r7, #12]
 800a260:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a262:	fb01 f303 	mul.w	r3, r1, r3
 800a266:	441a      	add	r2, r3
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2200      	movs	r2, #0
 800a270:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681a      	ldr	r2, [r3, #0]
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681a      	ldr	r2, [r3, #0]
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a282:	3b01      	subs	r3, #1
 800a284:	68f9      	ldr	r1, [r7, #12]
 800a286:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a288:	fb01 f303 	mul.w	r3, r1, r3
 800a28c:	441a      	add	r2, r3
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	22ff      	movs	r2, #255	; 0xff
 800a296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	22ff      	movs	r2, #255	; 0xff
 800a29e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d114      	bne.n	800a2d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	691b      	ldr	r3, [r3, #16]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d01a      	beq.n	800a2e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	3310      	adds	r3, #16
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f001 f903 	bl	800b4c0 <xTaskRemoveFromEventList>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d012      	beq.n	800a2e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a2c0:	4b0c      	ldr	r3, [pc, #48]	; (800a2f4 <xQueueGenericReset+0xcc>)
 800a2c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2c6:	601a      	str	r2, [r3, #0]
 800a2c8:	f3bf 8f4f 	dsb	sy
 800a2cc:	f3bf 8f6f 	isb	sy
 800a2d0:	e009      	b.n	800a2e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	3310      	adds	r3, #16
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f7ff fef2 	bl	800a0c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	3324      	adds	r3, #36	; 0x24
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f7ff feed 	bl	800a0c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a2e6:	f002 f835 	bl	800c354 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a2ea:	2301      	movs	r3, #1
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3710      	adds	r7, #16
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}
 800a2f4:	e000ed04 	.word	0xe000ed04

0800a2f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b08e      	sub	sp, #56	; 0x38
 800a2fc:	af02      	add	r7, sp, #8
 800a2fe:	60f8      	str	r0, [r7, #12]
 800a300:	60b9      	str	r1, [r7, #8]
 800a302:	607a      	str	r2, [r7, #4]
 800a304:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d10a      	bne.n	800a322 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a310:	f383 8811 	msr	BASEPRI, r3
 800a314:	f3bf 8f6f 	isb	sy
 800a318:	f3bf 8f4f 	dsb	sy
 800a31c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a31e:	bf00      	nop
 800a320:	e7fe      	b.n	800a320 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d10a      	bne.n	800a33e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a32c:	f383 8811 	msr	BASEPRI, r3
 800a330:	f3bf 8f6f 	isb	sy
 800a334:	f3bf 8f4f 	dsb	sy
 800a338:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a33a:	bf00      	nop
 800a33c:	e7fe      	b.n	800a33c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d002      	beq.n	800a34a <xQueueGenericCreateStatic+0x52>
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d001      	beq.n	800a34e <xQueueGenericCreateStatic+0x56>
 800a34a:	2301      	movs	r3, #1
 800a34c:	e000      	b.n	800a350 <xQueueGenericCreateStatic+0x58>
 800a34e:	2300      	movs	r3, #0
 800a350:	2b00      	cmp	r3, #0
 800a352:	d10a      	bne.n	800a36a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a354:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a358:	f383 8811 	msr	BASEPRI, r3
 800a35c:	f3bf 8f6f 	isb	sy
 800a360:	f3bf 8f4f 	dsb	sy
 800a364:	623b      	str	r3, [r7, #32]
}
 800a366:	bf00      	nop
 800a368:	e7fe      	b.n	800a368 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d102      	bne.n	800a376 <xQueueGenericCreateStatic+0x7e>
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d101      	bne.n	800a37a <xQueueGenericCreateStatic+0x82>
 800a376:	2301      	movs	r3, #1
 800a378:	e000      	b.n	800a37c <xQueueGenericCreateStatic+0x84>
 800a37a:	2300      	movs	r3, #0
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d10a      	bne.n	800a396 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a384:	f383 8811 	msr	BASEPRI, r3
 800a388:	f3bf 8f6f 	isb	sy
 800a38c:	f3bf 8f4f 	dsb	sy
 800a390:	61fb      	str	r3, [r7, #28]
}
 800a392:	bf00      	nop
 800a394:	e7fe      	b.n	800a394 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a396:	2350      	movs	r3, #80	; 0x50
 800a398:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	2b50      	cmp	r3, #80	; 0x50
 800a39e:	d00a      	beq.n	800a3b6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a4:	f383 8811 	msr	BASEPRI, r3
 800a3a8:	f3bf 8f6f 	isb	sy
 800a3ac:	f3bf 8f4f 	dsb	sy
 800a3b0:	61bb      	str	r3, [r7, #24]
}
 800a3b2:	bf00      	nop
 800a3b4:	e7fe      	b.n	800a3b4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a3b6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d00d      	beq.n	800a3de <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c4:	2201      	movs	r2, #1
 800a3c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a3ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d0:	9300      	str	r3, [sp, #0]
 800a3d2:	4613      	mov	r3, r2
 800a3d4:	687a      	ldr	r2, [r7, #4]
 800a3d6:	68b9      	ldr	r1, [r7, #8]
 800a3d8:	68f8      	ldr	r0, [r7, #12]
 800a3da:	f000 f805 	bl	800a3e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3730      	adds	r7, #48	; 0x30
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b084      	sub	sp, #16
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	60f8      	str	r0, [r7, #12]
 800a3f0:	60b9      	str	r1, [r7, #8]
 800a3f2:	607a      	str	r2, [r7, #4]
 800a3f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d103      	bne.n	800a404 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a3fc:	69bb      	ldr	r3, [r7, #24]
 800a3fe:	69ba      	ldr	r2, [r7, #24]
 800a400:	601a      	str	r2, [r3, #0]
 800a402:	e002      	b.n	800a40a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a404:	69bb      	ldr	r3, [r7, #24]
 800a406:	687a      	ldr	r2, [r7, #4]
 800a408:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a40a:	69bb      	ldr	r3, [r7, #24]
 800a40c:	68fa      	ldr	r2, [r7, #12]
 800a40e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a410:	69bb      	ldr	r3, [r7, #24]
 800a412:	68ba      	ldr	r2, [r7, #8]
 800a414:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a416:	2101      	movs	r1, #1
 800a418:	69b8      	ldr	r0, [r7, #24]
 800a41a:	f7ff ff05 	bl	800a228 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a41e:	69bb      	ldr	r3, [r7, #24]
 800a420:	78fa      	ldrb	r2, [r7, #3]
 800a422:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a426:	bf00      	nop
 800a428:	3710      	adds	r7, #16
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
	...

0800a430 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b08e      	sub	sp, #56	; 0x38
 800a434:	af00      	add	r7, sp, #0
 800a436:	60f8      	str	r0, [r7, #12]
 800a438:	60b9      	str	r1, [r7, #8]
 800a43a:	607a      	str	r2, [r7, #4]
 800a43c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a43e:	2300      	movs	r3, #0
 800a440:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d10a      	bne.n	800a462 <xQueueGenericSend+0x32>
	__asm volatile
 800a44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a450:	f383 8811 	msr	BASEPRI, r3
 800a454:	f3bf 8f6f 	isb	sy
 800a458:	f3bf 8f4f 	dsb	sy
 800a45c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a45e:	bf00      	nop
 800a460:	e7fe      	b.n	800a460 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d103      	bne.n	800a470 <xQueueGenericSend+0x40>
 800a468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a46a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d101      	bne.n	800a474 <xQueueGenericSend+0x44>
 800a470:	2301      	movs	r3, #1
 800a472:	e000      	b.n	800a476 <xQueueGenericSend+0x46>
 800a474:	2300      	movs	r3, #0
 800a476:	2b00      	cmp	r3, #0
 800a478:	d10a      	bne.n	800a490 <xQueueGenericSend+0x60>
	__asm volatile
 800a47a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a47e:	f383 8811 	msr	BASEPRI, r3
 800a482:	f3bf 8f6f 	isb	sy
 800a486:	f3bf 8f4f 	dsb	sy
 800a48a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a48c:	bf00      	nop
 800a48e:	e7fe      	b.n	800a48e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	2b02      	cmp	r3, #2
 800a494:	d103      	bne.n	800a49e <xQueueGenericSend+0x6e>
 800a496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a49a:	2b01      	cmp	r3, #1
 800a49c:	d101      	bne.n	800a4a2 <xQueueGenericSend+0x72>
 800a49e:	2301      	movs	r3, #1
 800a4a0:	e000      	b.n	800a4a4 <xQueueGenericSend+0x74>
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d10a      	bne.n	800a4be <xQueueGenericSend+0x8e>
	__asm volatile
 800a4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ac:	f383 8811 	msr	BASEPRI, r3
 800a4b0:	f3bf 8f6f 	isb	sy
 800a4b4:	f3bf 8f4f 	dsb	sy
 800a4b8:	623b      	str	r3, [r7, #32]
}
 800a4ba:	bf00      	nop
 800a4bc:	e7fe      	b.n	800a4bc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a4be:	f001 f9bd 	bl	800b83c <xTaskGetSchedulerState>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d102      	bne.n	800a4ce <xQueueGenericSend+0x9e>
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d101      	bne.n	800a4d2 <xQueueGenericSend+0xa2>
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	e000      	b.n	800a4d4 <xQueueGenericSend+0xa4>
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d10a      	bne.n	800a4ee <xQueueGenericSend+0xbe>
	__asm volatile
 800a4d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4dc:	f383 8811 	msr	BASEPRI, r3
 800a4e0:	f3bf 8f6f 	isb	sy
 800a4e4:	f3bf 8f4f 	dsb	sy
 800a4e8:	61fb      	str	r3, [r7, #28]
}
 800a4ea:	bf00      	nop
 800a4ec:	e7fe      	b.n	800a4ec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a4ee:	f001 ff01 	bl	800c2f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d302      	bcc.n	800a504 <xQueueGenericSend+0xd4>
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	2b02      	cmp	r3, #2
 800a502:	d129      	bne.n	800a558 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a504:	683a      	ldr	r2, [r7, #0]
 800a506:	68b9      	ldr	r1, [r7, #8]
 800a508:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a50a:	f000 fa0b 	bl	800a924 <prvCopyDataToQueue>
 800a50e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a514:	2b00      	cmp	r3, #0
 800a516:	d010      	beq.n	800a53a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a51a:	3324      	adds	r3, #36	; 0x24
 800a51c:	4618      	mov	r0, r3
 800a51e:	f000 ffcf 	bl	800b4c0 <xTaskRemoveFromEventList>
 800a522:	4603      	mov	r3, r0
 800a524:	2b00      	cmp	r3, #0
 800a526:	d013      	beq.n	800a550 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a528:	4b3f      	ldr	r3, [pc, #252]	; (800a628 <xQueueGenericSend+0x1f8>)
 800a52a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a52e:	601a      	str	r2, [r3, #0]
 800a530:	f3bf 8f4f 	dsb	sy
 800a534:	f3bf 8f6f 	isb	sy
 800a538:	e00a      	b.n	800a550 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d007      	beq.n	800a550 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a540:	4b39      	ldr	r3, [pc, #228]	; (800a628 <xQueueGenericSend+0x1f8>)
 800a542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a546:	601a      	str	r2, [r3, #0]
 800a548:	f3bf 8f4f 	dsb	sy
 800a54c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a550:	f001 ff00 	bl	800c354 <vPortExitCritical>
				return pdPASS;
 800a554:	2301      	movs	r3, #1
 800a556:	e063      	b.n	800a620 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d103      	bne.n	800a566 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a55e:	f001 fef9 	bl	800c354 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a562:	2300      	movs	r3, #0
 800a564:	e05c      	b.n	800a620 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d106      	bne.n	800a57a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a56c:	f107 0314 	add.w	r3, r7, #20
 800a570:	4618      	mov	r0, r3
 800a572:	f001 f809 	bl	800b588 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a576:	2301      	movs	r3, #1
 800a578:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a57a:	f001 feeb 	bl	800c354 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a57e:	f000 fd7b 	bl	800b078 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a582:	f001 feb7 	bl	800c2f4 <vPortEnterCritical>
 800a586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a588:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a58c:	b25b      	sxtb	r3, r3
 800a58e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a592:	d103      	bne.n	800a59c <xQueueGenericSend+0x16c>
 800a594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a596:	2200      	movs	r2, #0
 800a598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a59e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a5a2:	b25b      	sxtb	r3, r3
 800a5a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5a8:	d103      	bne.n	800a5b2 <xQueueGenericSend+0x182>
 800a5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a5b2:	f001 fecf 	bl	800c354 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a5b6:	1d3a      	adds	r2, r7, #4
 800a5b8:	f107 0314 	add.w	r3, r7, #20
 800a5bc:	4611      	mov	r1, r2
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f000 fff8 	bl	800b5b4 <xTaskCheckForTimeOut>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d124      	bne.n	800a614 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a5ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5cc:	f000 faa2 	bl	800ab14 <prvIsQueueFull>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d018      	beq.n	800a608 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5d8:	3310      	adds	r3, #16
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	4611      	mov	r1, r2
 800a5de:	4618      	mov	r0, r3
 800a5e0:	f000 ff1e 	bl	800b420 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a5e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5e6:	f000 fa2d 	bl	800aa44 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a5ea:	f000 fd53 	bl	800b094 <xTaskResumeAll>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	f47f af7c 	bne.w	800a4ee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a5f6:	4b0c      	ldr	r3, [pc, #48]	; (800a628 <xQueueGenericSend+0x1f8>)
 800a5f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5fc:	601a      	str	r2, [r3, #0]
 800a5fe:	f3bf 8f4f 	dsb	sy
 800a602:	f3bf 8f6f 	isb	sy
 800a606:	e772      	b.n	800a4ee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a608:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a60a:	f000 fa1b 	bl	800aa44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a60e:	f000 fd41 	bl	800b094 <xTaskResumeAll>
 800a612:	e76c      	b.n	800a4ee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a614:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a616:	f000 fa15 	bl	800aa44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a61a:	f000 fd3b 	bl	800b094 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a61e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a620:	4618      	mov	r0, r3
 800a622:	3738      	adds	r7, #56	; 0x38
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}
 800a628:	e000ed04 	.word	0xe000ed04

0800a62c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b090      	sub	sp, #64	; 0x40
 800a630:	af00      	add	r7, sp, #0
 800a632:	60f8      	str	r0, [r7, #12]
 800a634:	60b9      	str	r1, [r7, #8]
 800a636:	607a      	str	r2, [r7, #4]
 800a638:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a63e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a640:	2b00      	cmp	r3, #0
 800a642:	d10a      	bne.n	800a65a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a648:	f383 8811 	msr	BASEPRI, r3
 800a64c:	f3bf 8f6f 	isb	sy
 800a650:	f3bf 8f4f 	dsb	sy
 800a654:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a656:	bf00      	nop
 800a658:	e7fe      	b.n	800a658 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d103      	bne.n	800a668 <xQueueGenericSendFromISR+0x3c>
 800a660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a664:	2b00      	cmp	r3, #0
 800a666:	d101      	bne.n	800a66c <xQueueGenericSendFromISR+0x40>
 800a668:	2301      	movs	r3, #1
 800a66a:	e000      	b.n	800a66e <xQueueGenericSendFromISR+0x42>
 800a66c:	2300      	movs	r3, #0
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d10a      	bne.n	800a688 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a672:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a676:	f383 8811 	msr	BASEPRI, r3
 800a67a:	f3bf 8f6f 	isb	sy
 800a67e:	f3bf 8f4f 	dsb	sy
 800a682:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a684:	bf00      	nop
 800a686:	e7fe      	b.n	800a686 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	2b02      	cmp	r3, #2
 800a68c:	d103      	bne.n	800a696 <xQueueGenericSendFromISR+0x6a>
 800a68e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a692:	2b01      	cmp	r3, #1
 800a694:	d101      	bne.n	800a69a <xQueueGenericSendFromISR+0x6e>
 800a696:	2301      	movs	r3, #1
 800a698:	e000      	b.n	800a69c <xQueueGenericSendFromISR+0x70>
 800a69a:	2300      	movs	r3, #0
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d10a      	bne.n	800a6b6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a4:	f383 8811 	msr	BASEPRI, r3
 800a6a8:	f3bf 8f6f 	isb	sy
 800a6ac:	f3bf 8f4f 	dsb	sy
 800a6b0:	623b      	str	r3, [r7, #32]
}
 800a6b2:	bf00      	nop
 800a6b4:	e7fe      	b.n	800a6b4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a6b6:	f001 feff 	bl	800c4b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a6ba:	f3ef 8211 	mrs	r2, BASEPRI
 800a6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c2:	f383 8811 	msr	BASEPRI, r3
 800a6c6:	f3bf 8f6f 	isb	sy
 800a6ca:	f3bf 8f4f 	dsb	sy
 800a6ce:	61fa      	str	r2, [r7, #28]
 800a6d0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a6d2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a6d4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a6d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6de:	429a      	cmp	r2, r3
 800a6e0:	d302      	bcc.n	800a6e8 <xQueueGenericSendFromISR+0xbc>
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	2b02      	cmp	r3, #2
 800a6e6:	d12f      	bne.n	800a748 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a6e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6f6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a6f8:	683a      	ldr	r2, [r7, #0]
 800a6fa:	68b9      	ldr	r1, [r7, #8]
 800a6fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a6fe:	f000 f911 	bl	800a924 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a702:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a70a:	d112      	bne.n	800a732 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a70c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a70e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a710:	2b00      	cmp	r3, #0
 800a712:	d016      	beq.n	800a742 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a716:	3324      	adds	r3, #36	; 0x24
 800a718:	4618      	mov	r0, r3
 800a71a:	f000 fed1 	bl	800b4c0 <xTaskRemoveFromEventList>
 800a71e:	4603      	mov	r3, r0
 800a720:	2b00      	cmp	r3, #0
 800a722:	d00e      	beq.n	800a742 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d00b      	beq.n	800a742 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	2201      	movs	r2, #1
 800a72e:	601a      	str	r2, [r3, #0]
 800a730:	e007      	b.n	800a742 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a732:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a736:	3301      	adds	r3, #1
 800a738:	b2db      	uxtb	r3, r3
 800a73a:	b25a      	sxtb	r2, r3
 800a73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a73e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a742:	2301      	movs	r3, #1
 800a744:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a746:	e001      	b.n	800a74c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a748:	2300      	movs	r3, #0
 800a74a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a74c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a74e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a756:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3740      	adds	r7, #64	; 0x40
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}
	...

0800a764 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b08c      	sub	sp, #48	; 0x30
 800a768:	af00      	add	r7, sp, #0
 800a76a:	60f8      	str	r0, [r7, #12]
 800a76c:	60b9      	str	r1, [r7, #8]
 800a76e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a770:	2300      	movs	r3, #0
 800a772:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d10a      	bne.n	800a794 <xQueueReceive+0x30>
	__asm volatile
 800a77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a782:	f383 8811 	msr	BASEPRI, r3
 800a786:	f3bf 8f6f 	isb	sy
 800a78a:	f3bf 8f4f 	dsb	sy
 800a78e:	623b      	str	r3, [r7, #32]
}
 800a790:	bf00      	nop
 800a792:	e7fe      	b.n	800a792 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d103      	bne.n	800a7a2 <xQueueReceive+0x3e>
 800a79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a79c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d101      	bne.n	800a7a6 <xQueueReceive+0x42>
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	e000      	b.n	800a7a8 <xQueueReceive+0x44>
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d10a      	bne.n	800a7c2 <xQueueReceive+0x5e>
	__asm volatile
 800a7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b0:	f383 8811 	msr	BASEPRI, r3
 800a7b4:	f3bf 8f6f 	isb	sy
 800a7b8:	f3bf 8f4f 	dsb	sy
 800a7bc:	61fb      	str	r3, [r7, #28]
}
 800a7be:	bf00      	nop
 800a7c0:	e7fe      	b.n	800a7c0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a7c2:	f001 f83b 	bl	800b83c <xTaskGetSchedulerState>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d102      	bne.n	800a7d2 <xQueueReceive+0x6e>
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d101      	bne.n	800a7d6 <xQueueReceive+0x72>
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	e000      	b.n	800a7d8 <xQueueReceive+0x74>
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d10a      	bne.n	800a7f2 <xQueueReceive+0x8e>
	__asm volatile
 800a7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e0:	f383 8811 	msr	BASEPRI, r3
 800a7e4:	f3bf 8f6f 	isb	sy
 800a7e8:	f3bf 8f4f 	dsb	sy
 800a7ec:	61bb      	str	r3, [r7, #24]
}
 800a7ee:	bf00      	nop
 800a7f0:	e7fe      	b.n	800a7f0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a7f2:	f001 fd7f 	bl	800c2f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a7f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7fa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d01f      	beq.n	800a842 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a802:	68b9      	ldr	r1, [r7, #8]
 800a804:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a806:	f000 f8f7 	bl	800a9f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a80c:	1e5a      	subs	r2, r3, #1
 800a80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a810:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a814:	691b      	ldr	r3, [r3, #16]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d00f      	beq.n	800a83a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a81c:	3310      	adds	r3, #16
 800a81e:	4618      	mov	r0, r3
 800a820:	f000 fe4e 	bl	800b4c0 <xTaskRemoveFromEventList>
 800a824:	4603      	mov	r3, r0
 800a826:	2b00      	cmp	r3, #0
 800a828:	d007      	beq.n	800a83a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a82a:	4b3d      	ldr	r3, [pc, #244]	; (800a920 <xQueueReceive+0x1bc>)
 800a82c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a830:	601a      	str	r2, [r3, #0]
 800a832:	f3bf 8f4f 	dsb	sy
 800a836:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a83a:	f001 fd8b 	bl	800c354 <vPortExitCritical>
				return pdPASS;
 800a83e:	2301      	movs	r3, #1
 800a840:	e069      	b.n	800a916 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d103      	bne.n	800a850 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a848:	f001 fd84 	bl	800c354 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a84c:	2300      	movs	r3, #0
 800a84e:	e062      	b.n	800a916 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a852:	2b00      	cmp	r3, #0
 800a854:	d106      	bne.n	800a864 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a856:	f107 0310 	add.w	r3, r7, #16
 800a85a:	4618      	mov	r0, r3
 800a85c:	f000 fe94 	bl	800b588 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a860:	2301      	movs	r3, #1
 800a862:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a864:	f001 fd76 	bl	800c354 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a868:	f000 fc06 	bl	800b078 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a86c:	f001 fd42 	bl	800c2f4 <vPortEnterCritical>
 800a870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a872:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a876:	b25b      	sxtb	r3, r3
 800a878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a87c:	d103      	bne.n	800a886 <xQueueReceive+0x122>
 800a87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a880:	2200      	movs	r2, #0
 800a882:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a888:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a88c:	b25b      	sxtb	r3, r3
 800a88e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a892:	d103      	bne.n	800a89c <xQueueReceive+0x138>
 800a894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a896:	2200      	movs	r2, #0
 800a898:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a89c:	f001 fd5a 	bl	800c354 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a8a0:	1d3a      	adds	r2, r7, #4
 800a8a2:	f107 0310 	add.w	r3, r7, #16
 800a8a6:	4611      	mov	r1, r2
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f000 fe83 	bl	800b5b4 <xTaskCheckForTimeOut>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d123      	bne.n	800a8fc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a8b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8b6:	f000 f917 	bl	800aae8 <prvIsQueueEmpty>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d017      	beq.n	800a8f0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8c2:	3324      	adds	r3, #36	; 0x24
 800a8c4:	687a      	ldr	r2, [r7, #4]
 800a8c6:	4611      	mov	r1, r2
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f000 fda9 	bl	800b420 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a8ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8d0:	f000 f8b8 	bl	800aa44 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a8d4:	f000 fbde 	bl	800b094 <xTaskResumeAll>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d189      	bne.n	800a7f2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a8de:	4b10      	ldr	r3, [pc, #64]	; (800a920 <xQueueReceive+0x1bc>)
 800a8e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8e4:	601a      	str	r2, [r3, #0]
 800a8e6:	f3bf 8f4f 	dsb	sy
 800a8ea:	f3bf 8f6f 	isb	sy
 800a8ee:	e780      	b.n	800a7f2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a8f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8f2:	f000 f8a7 	bl	800aa44 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a8f6:	f000 fbcd 	bl	800b094 <xTaskResumeAll>
 800a8fa:	e77a      	b.n	800a7f2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a8fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8fe:	f000 f8a1 	bl	800aa44 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a902:	f000 fbc7 	bl	800b094 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a906:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a908:	f000 f8ee 	bl	800aae8 <prvIsQueueEmpty>
 800a90c:	4603      	mov	r3, r0
 800a90e:	2b00      	cmp	r3, #0
 800a910:	f43f af6f 	beq.w	800a7f2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a914:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a916:	4618      	mov	r0, r3
 800a918:	3730      	adds	r7, #48	; 0x30
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	bf00      	nop
 800a920:	e000ed04 	.word	0xe000ed04

0800a924 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b086      	sub	sp, #24
 800a928:	af00      	add	r7, sp, #0
 800a92a:	60f8      	str	r0, [r7, #12]
 800a92c:	60b9      	str	r1, [r7, #8]
 800a92e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a930:	2300      	movs	r3, #0
 800a932:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a938:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d10d      	bne.n	800a95e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d14d      	bne.n	800a9e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	689b      	ldr	r3, [r3, #8]
 800a94e:	4618      	mov	r0, r3
 800a950:	f000 ff92 	bl	800b878 <xTaskPriorityDisinherit>
 800a954:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	2200      	movs	r2, #0
 800a95a:	609a      	str	r2, [r3, #8]
 800a95c:	e043      	b.n	800a9e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d119      	bne.n	800a998 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	6858      	ldr	r0, [r3, #4]
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a96c:	461a      	mov	r2, r3
 800a96e:	68b9      	ldr	r1, [r7, #8]
 800a970:	f002 f8f0 	bl	800cb54 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	685a      	ldr	r2, [r3, #4]
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a97c:	441a      	add	r2, r3
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	685a      	ldr	r2, [r3, #4]
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	689b      	ldr	r3, [r3, #8]
 800a98a:	429a      	cmp	r2, r3
 800a98c:	d32b      	bcc.n	800a9e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	681a      	ldr	r2, [r3, #0]
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	605a      	str	r2, [r3, #4]
 800a996:	e026      	b.n	800a9e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	68d8      	ldr	r0, [r3, #12]
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9a0:	461a      	mov	r2, r3
 800a9a2:	68b9      	ldr	r1, [r7, #8]
 800a9a4:	f002 f8d6 	bl	800cb54 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	68da      	ldr	r2, [r3, #12]
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9b0:	425b      	negs	r3, r3
 800a9b2:	441a      	add	r2, r3
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	68da      	ldr	r2, [r3, #12]
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d207      	bcs.n	800a9d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	689a      	ldr	r2, [r3, #8]
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9cc:	425b      	negs	r3, r3
 800a9ce:	441a      	add	r2, r3
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2b02      	cmp	r3, #2
 800a9d8:	d105      	bne.n	800a9e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d002      	beq.n	800a9e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	3b01      	subs	r3, #1
 800a9e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	1c5a      	adds	r2, r3, #1
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a9ee:	697b      	ldr	r3, [r7, #20]
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3718      	adds	r7, #24
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}

0800a9f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b082      	sub	sp, #8
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d018      	beq.n	800aa3c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	68da      	ldr	r2, [r3, #12]
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa12:	441a      	add	r2, r3
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	68da      	ldr	r2, [r3, #12]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	689b      	ldr	r3, [r3, #8]
 800aa20:	429a      	cmp	r2, r3
 800aa22:	d303      	bcc.n	800aa2c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681a      	ldr	r2, [r3, #0]
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	68d9      	ldr	r1, [r3, #12]
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa34:	461a      	mov	r2, r3
 800aa36:	6838      	ldr	r0, [r7, #0]
 800aa38:	f002 f88c 	bl	800cb54 <memcpy>
	}
}
 800aa3c:	bf00      	nop
 800aa3e:	3708      	adds	r7, #8
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}

0800aa44 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b084      	sub	sp, #16
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aa4c:	f001 fc52 	bl	800c2f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aa56:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aa58:	e011      	b.n	800aa7e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d012      	beq.n	800aa88 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	3324      	adds	r3, #36	; 0x24
 800aa66:	4618      	mov	r0, r3
 800aa68:	f000 fd2a 	bl	800b4c0 <xTaskRemoveFromEventList>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d001      	beq.n	800aa76 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800aa72:	f000 fe01 	bl	800b678 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aa76:	7bfb      	ldrb	r3, [r7, #15]
 800aa78:	3b01      	subs	r3, #1
 800aa7a:	b2db      	uxtb	r3, r3
 800aa7c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aa7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	dce9      	bgt.n	800aa5a <prvUnlockQueue+0x16>
 800aa86:	e000      	b.n	800aa8a <prvUnlockQueue+0x46>
					break;
 800aa88:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	22ff      	movs	r2, #255	; 0xff
 800aa8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800aa92:	f001 fc5f 	bl	800c354 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800aa96:	f001 fc2d 	bl	800c2f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aaa0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aaa2:	e011      	b.n	800aac8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	691b      	ldr	r3, [r3, #16]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d012      	beq.n	800aad2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	3310      	adds	r3, #16
 800aab0:	4618      	mov	r0, r3
 800aab2:	f000 fd05 	bl	800b4c0 <xTaskRemoveFromEventList>
 800aab6:	4603      	mov	r3, r0
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d001      	beq.n	800aac0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800aabc:	f000 fddc 	bl	800b678 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800aac0:	7bbb      	ldrb	r3, [r7, #14]
 800aac2:	3b01      	subs	r3, #1
 800aac4:	b2db      	uxtb	r3, r3
 800aac6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aac8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	dce9      	bgt.n	800aaa4 <prvUnlockQueue+0x60>
 800aad0:	e000      	b.n	800aad4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aad2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	22ff      	movs	r2, #255	; 0xff
 800aad8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800aadc:	f001 fc3a 	bl	800c354 <vPortExitCritical>
}
 800aae0:	bf00      	nop
 800aae2:	3710      	adds	r7, #16
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}

0800aae8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b084      	sub	sp, #16
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aaf0:	f001 fc00 	bl	800c2f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d102      	bne.n	800ab02 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aafc:	2301      	movs	r3, #1
 800aafe:	60fb      	str	r3, [r7, #12]
 800ab00:	e001      	b.n	800ab06 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ab02:	2300      	movs	r3, #0
 800ab04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ab06:	f001 fc25 	bl	800c354 <vPortExitCritical>

	return xReturn;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3710      	adds	r7, #16
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b084      	sub	sp, #16
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ab1c:	f001 fbea 	bl	800c2f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab28:	429a      	cmp	r2, r3
 800ab2a:	d102      	bne.n	800ab32 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	60fb      	str	r3, [r7, #12]
 800ab30:	e001      	b.n	800ab36 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ab32:	2300      	movs	r3, #0
 800ab34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ab36:	f001 fc0d 	bl	800c354 <vPortExitCritical>

	return xReturn;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3710      	adds	r7, #16
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}

0800ab44 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ab44:	b480      	push	{r7}
 800ab46:	b085      	sub	sp, #20
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab4e:	2300      	movs	r3, #0
 800ab50:	60fb      	str	r3, [r7, #12]
 800ab52:	e014      	b.n	800ab7e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ab54:	4a0f      	ldr	r2, [pc, #60]	; (800ab94 <vQueueAddToRegistry+0x50>)
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d10b      	bne.n	800ab78 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ab60:	490c      	ldr	r1, [pc, #48]	; (800ab94 <vQueueAddToRegistry+0x50>)
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	683a      	ldr	r2, [r7, #0]
 800ab66:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ab6a:	4a0a      	ldr	r2, [pc, #40]	; (800ab94 <vQueueAddToRegistry+0x50>)
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	00db      	lsls	r3, r3, #3
 800ab70:	4413      	add	r3, r2
 800ab72:	687a      	ldr	r2, [r7, #4]
 800ab74:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ab76:	e006      	b.n	800ab86 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	3301      	adds	r3, #1
 800ab7c:	60fb      	str	r3, [r7, #12]
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	2b07      	cmp	r3, #7
 800ab82:	d9e7      	bls.n	800ab54 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ab84:	bf00      	nop
 800ab86:	bf00      	nop
 800ab88:	3714      	adds	r7, #20
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab90:	4770      	bx	lr
 800ab92:	bf00      	nop
 800ab94:	20000f24 	.word	0x20000f24

0800ab98 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b086      	sub	sp, #24
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	60f8      	str	r0, [r7, #12]
 800aba0:	60b9      	str	r1, [r7, #8]
 800aba2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800aba8:	f001 fba4 	bl	800c2f4 <vPortEnterCritical>
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800abb2:	b25b      	sxtb	r3, r3
 800abb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abb8:	d103      	bne.n	800abc2 <vQueueWaitForMessageRestricted+0x2a>
 800abba:	697b      	ldr	r3, [r7, #20]
 800abbc:	2200      	movs	r2, #0
 800abbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800abc8:	b25b      	sxtb	r3, r3
 800abca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abce:	d103      	bne.n	800abd8 <vQueueWaitForMessageRestricted+0x40>
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	2200      	movs	r2, #0
 800abd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800abd8:	f001 fbbc 	bl	800c354 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d106      	bne.n	800abf2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	3324      	adds	r3, #36	; 0x24
 800abe8:	687a      	ldr	r2, [r7, #4]
 800abea:	68b9      	ldr	r1, [r7, #8]
 800abec:	4618      	mov	r0, r3
 800abee:	f000 fc3b 	bl	800b468 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800abf2:	6978      	ldr	r0, [r7, #20]
 800abf4:	f7ff ff26 	bl	800aa44 <prvUnlockQueue>
	}
 800abf8:	bf00      	nop
 800abfa:	3718      	adds	r7, #24
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}

0800ac00 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b08e      	sub	sp, #56	; 0x38
 800ac04:	af04      	add	r7, sp, #16
 800ac06:	60f8      	str	r0, [r7, #12]
 800ac08:	60b9      	str	r1, [r7, #8]
 800ac0a:	607a      	str	r2, [r7, #4]
 800ac0c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ac0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d10a      	bne.n	800ac2a <xTaskCreateStatic+0x2a>
	__asm volatile
 800ac14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac18:	f383 8811 	msr	BASEPRI, r3
 800ac1c:	f3bf 8f6f 	isb	sy
 800ac20:	f3bf 8f4f 	dsb	sy
 800ac24:	623b      	str	r3, [r7, #32]
}
 800ac26:	bf00      	nop
 800ac28:	e7fe      	b.n	800ac28 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ac2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d10a      	bne.n	800ac46 <xTaskCreateStatic+0x46>
	__asm volatile
 800ac30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac34:	f383 8811 	msr	BASEPRI, r3
 800ac38:	f3bf 8f6f 	isb	sy
 800ac3c:	f3bf 8f4f 	dsb	sy
 800ac40:	61fb      	str	r3, [r7, #28]
}
 800ac42:	bf00      	nop
 800ac44:	e7fe      	b.n	800ac44 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ac46:	235c      	movs	r3, #92	; 0x5c
 800ac48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	2b5c      	cmp	r3, #92	; 0x5c
 800ac4e:	d00a      	beq.n	800ac66 <xTaskCreateStatic+0x66>
	__asm volatile
 800ac50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac54:	f383 8811 	msr	BASEPRI, r3
 800ac58:	f3bf 8f6f 	isb	sy
 800ac5c:	f3bf 8f4f 	dsb	sy
 800ac60:	61bb      	str	r3, [r7, #24]
}
 800ac62:	bf00      	nop
 800ac64:	e7fe      	b.n	800ac64 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ac66:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ac68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d01e      	beq.n	800acac <xTaskCreateStatic+0xac>
 800ac6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d01b      	beq.n	800acac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ac74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac76:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ac78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac7c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ac7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac80:	2202      	movs	r2, #2
 800ac82:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ac86:	2300      	movs	r3, #0
 800ac88:	9303      	str	r3, [sp, #12]
 800ac8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8c:	9302      	str	r3, [sp, #8]
 800ac8e:	f107 0314 	add.w	r3, r7, #20
 800ac92:	9301      	str	r3, [sp, #4]
 800ac94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac96:	9300      	str	r3, [sp, #0]
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	687a      	ldr	r2, [r7, #4]
 800ac9c:	68b9      	ldr	r1, [r7, #8]
 800ac9e:	68f8      	ldr	r0, [r7, #12]
 800aca0:	f000 f850 	bl	800ad44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aca4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aca6:	f000 f8dd 	bl	800ae64 <prvAddNewTaskToReadyList>
 800acaa:	e001      	b.n	800acb0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800acac:	2300      	movs	r3, #0
 800acae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800acb0:	697b      	ldr	r3, [r7, #20]
	}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3728      	adds	r7, #40	; 0x28
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}

0800acba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800acba:	b580      	push	{r7, lr}
 800acbc:	b08c      	sub	sp, #48	; 0x30
 800acbe:	af04      	add	r7, sp, #16
 800acc0:	60f8      	str	r0, [r7, #12]
 800acc2:	60b9      	str	r1, [r7, #8]
 800acc4:	603b      	str	r3, [r7, #0]
 800acc6:	4613      	mov	r3, r2
 800acc8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800acca:	88fb      	ldrh	r3, [r7, #6]
 800accc:	009b      	lsls	r3, r3, #2
 800acce:	4618      	mov	r0, r3
 800acd0:	f001 fc32 	bl	800c538 <pvPortMalloc>
 800acd4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d00e      	beq.n	800acfa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800acdc:	205c      	movs	r0, #92	; 0x5c
 800acde:	f001 fc2b 	bl	800c538 <pvPortMalloc>
 800ace2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ace4:	69fb      	ldr	r3, [r7, #28]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d003      	beq.n	800acf2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800acea:	69fb      	ldr	r3, [r7, #28]
 800acec:	697a      	ldr	r2, [r7, #20]
 800acee:	631a      	str	r2, [r3, #48]	; 0x30
 800acf0:	e005      	b.n	800acfe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800acf2:	6978      	ldr	r0, [r7, #20]
 800acf4:	f001 fcec 	bl	800c6d0 <vPortFree>
 800acf8:	e001      	b.n	800acfe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800acfa:	2300      	movs	r3, #0
 800acfc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800acfe:	69fb      	ldr	r3, [r7, #28]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d017      	beq.n	800ad34 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ad04:	69fb      	ldr	r3, [r7, #28]
 800ad06:	2200      	movs	r2, #0
 800ad08:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ad0c:	88fa      	ldrh	r2, [r7, #6]
 800ad0e:	2300      	movs	r3, #0
 800ad10:	9303      	str	r3, [sp, #12]
 800ad12:	69fb      	ldr	r3, [r7, #28]
 800ad14:	9302      	str	r3, [sp, #8]
 800ad16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad18:	9301      	str	r3, [sp, #4]
 800ad1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad1c:	9300      	str	r3, [sp, #0]
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	68b9      	ldr	r1, [r7, #8]
 800ad22:	68f8      	ldr	r0, [r7, #12]
 800ad24:	f000 f80e 	bl	800ad44 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ad28:	69f8      	ldr	r0, [r7, #28]
 800ad2a:	f000 f89b 	bl	800ae64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ad2e:	2301      	movs	r3, #1
 800ad30:	61bb      	str	r3, [r7, #24]
 800ad32:	e002      	b.n	800ad3a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ad34:	f04f 33ff 	mov.w	r3, #4294967295
 800ad38:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ad3a:	69bb      	ldr	r3, [r7, #24]
	}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3720      	adds	r7, #32
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}

0800ad44 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b088      	sub	sp, #32
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	60f8      	str	r0, [r7, #12]
 800ad4c:	60b9      	str	r1, [r7, #8]
 800ad4e:	607a      	str	r2, [r7, #4]
 800ad50:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ad52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad54:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	009b      	lsls	r3, r3, #2
 800ad5a:	461a      	mov	r2, r3
 800ad5c:	21a5      	movs	r1, #165	; 0xa5
 800ad5e:	f001 fea1 	bl	800caa4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ad62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ad6c:	3b01      	subs	r3, #1
 800ad6e:	009b      	lsls	r3, r3, #2
 800ad70:	4413      	add	r3, r2
 800ad72:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ad74:	69bb      	ldr	r3, [r7, #24]
 800ad76:	f023 0307 	bic.w	r3, r3, #7
 800ad7a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ad7c:	69bb      	ldr	r3, [r7, #24]
 800ad7e:	f003 0307 	and.w	r3, r3, #7
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d00a      	beq.n	800ad9c <prvInitialiseNewTask+0x58>
	__asm volatile
 800ad86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad8a:	f383 8811 	msr	BASEPRI, r3
 800ad8e:	f3bf 8f6f 	isb	sy
 800ad92:	f3bf 8f4f 	dsb	sy
 800ad96:	617b      	str	r3, [r7, #20]
}
 800ad98:	bf00      	nop
 800ad9a:	e7fe      	b.n	800ad9a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d01f      	beq.n	800ade2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ada2:	2300      	movs	r3, #0
 800ada4:	61fb      	str	r3, [r7, #28]
 800ada6:	e012      	b.n	800adce <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ada8:	68ba      	ldr	r2, [r7, #8]
 800adaa:	69fb      	ldr	r3, [r7, #28]
 800adac:	4413      	add	r3, r2
 800adae:	7819      	ldrb	r1, [r3, #0]
 800adb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adb2:	69fb      	ldr	r3, [r7, #28]
 800adb4:	4413      	add	r3, r2
 800adb6:	3334      	adds	r3, #52	; 0x34
 800adb8:	460a      	mov	r2, r1
 800adba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800adbc:	68ba      	ldr	r2, [r7, #8]
 800adbe:	69fb      	ldr	r3, [r7, #28]
 800adc0:	4413      	add	r3, r2
 800adc2:	781b      	ldrb	r3, [r3, #0]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d006      	beq.n	800add6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800adc8:	69fb      	ldr	r3, [r7, #28]
 800adca:	3301      	adds	r3, #1
 800adcc:	61fb      	str	r3, [r7, #28]
 800adce:	69fb      	ldr	r3, [r7, #28]
 800add0:	2b0f      	cmp	r3, #15
 800add2:	d9e9      	bls.n	800ada8 <prvInitialiseNewTask+0x64>
 800add4:	e000      	b.n	800add8 <prvInitialiseNewTask+0x94>
			{
				break;
 800add6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800add8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adda:	2200      	movs	r2, #0
 800addc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ade0:	e003      	b.n	800adea <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ade2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade4:	2200      	movs	r2, #0
 800ade6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800adea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adec:	2b37      	cmp	r3, #55	; 0x37
 800adee:	d901      	bls.n	800adf4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800adf0:	2337      	movs	r3, #55	; 0x37
 800adf2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800adf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800adf8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800adfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800adfe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ae00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae02:	2200      	movs	r2, #0
 800ae04:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ae06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae08:	3304      	adds	r3, #4
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f7ff f978 	bl	800a100 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ae10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae12:	3318      	adds	r3, #24
 800ae14:	4618      	mov	r0, r3
 800ae16:	f7ff f973 	bl	800a100 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ae1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae1e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae22:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ae26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae28:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ae2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae2e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ae30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae32:	2200      	movs	r2, #0
 800ae34:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ae36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae38:	2200      	movs	r2, #0
 800ae3a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ae3e:	683a      	ldr	r2, [r7, #0]
 800ae40:	68f9      	ldr	r1, [r7, #12]
 800ae42:	69b8      	ldr	r0, [r7, #24]
 800ae44:	f001 f928 	bl	800c098 <pxPortInitialiseStack>
 800ae48:	4602      	mov	r2, r0
 800ae4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ae4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d002      	beq.n	800ae5a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ae54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae5a:	bf00      	nop
 800ae5c:	3720      	adds	r7, #32
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	bd80      	pop	{r7, pc}
	...

0800ae64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b082      	sub	sp, #8
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ae6c:	f001 fa42 	bl	800c2f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ae70:	4b2d      	ldr	r3, [pc, #180]	; (800af28 <prvAddNewTaskToReadyList+0xc4>)
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	3301      	adds	r3, #1
 800ae76:	4a2c      	ldr	r2, [pc, #176]	; (800af28 <prvAddNewTaskToReadyList+0xc4>)
 800ae78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ae7a:	4b2c      	ldr	r3, [pc, #176]	; (800af2c <prvAddNewTaskToReadyList+0xc8>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d109      	bne.n	800ae96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ae82:	4a2a      	ldr	r2, [pc, #168]	; (800af2c <prvAddNewTaskToReadyList+0xc8>)
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ae88:	4b27      	ldr	r3, [pc, #156]	; (800af28 <prvAddNewTaskToReadyList+0xc4>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	2b01      	cmp	r3, #1
 800ae8e:	d110      	bne.n	800aeb2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ae90:	f000 fc16 	bl	800b6c0 <prvInitialiseTaskLists>
 800ae94:	e00d      	b.n	800aeb2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ae96:	4b26      	ldr	r3, [pc, #152]	; (800af30 <prvAddNewTaskToReadyList+0xcc>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d109      	bne.n	800aeb2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ae9e:	4b23      	ldr	r3, [pc, #140]	; (800af2c <prvAddNewTaskToReadyList+0xc8>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aea8:	429a      	cmp	r2, r3
 800aeaa:	d802      	bhi.n	800aeb2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800aeac:	4a1f      	ldr	r2, [pc, #124]	; (800af2c <prvAddNewTaskToReadyList+0xc8>)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800aeb2:	4b20      	ldr	r3, [pc, #128]	; (800af34 <prvAddNewTaskToReadyList+0xd0>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	3301      	adds	r3, #1
 800aeb8:	4a1e      	ldr	r2, [pc, #120]	; (800af34 <prvAddNewTaskToReadyList+0xd0>)
 800aeba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800aebc:	4b1d      	ldr	r3, [pc, #116]	; (800af34 <prvAddNewTaskToReadyList+0xd0>)
 800aebe:	681a      	ldr	r2, [r3, #0]
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aec8:	4b1b      	ldr	r3, [pc, #108]	; (800af38 <prvAddNewTaskToReadyList+0xd4>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	429a      	cmp	r2, r3
 800aece:	d903      	bls.n	800aed8 <prvAddNewTaskToReadyList+0x74>
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aed4:	4a18      	ldr	r2, [pc, #96]	; (800af38 <prvAddNewTaskToReadyList+0xd4>)
 800aed6:	6013      	str	r3, [r2, #0]
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aedc:	4613      	mov	r3, r2
 800aede:	009b      	lsls	r3, r3, #2
 800aee0:	4413      	add	r3, r2
 800aee2:	009b      	lsls	r3, r3, #2
 800aee4:	4a15      	ldr	r2, [pc, #84]	; (800af3c <prvAddNewTaskToReadyList+0xd8>)
 800aee6:	441a      	add	r2, r3
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	3304      	adds	r3, #4
 800aeec:	4619      	mov	r1, r3
 800aeee:	4610      	mov	r0, r2
 800aef0:	f7ff f913 	bl	800a11a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800aef4:	f001 fa2e 	bl	800c354 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800aef8:	4b0d      	ldr	r3, [pc, #52]	; (800af30 <prvAddNewTaskToReadyList+0xcc>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d00e      	beq.n	800af1e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800af00:	4b0a      	ldr	r3, [pc, #40]	; (800af2c <prvAddNewTaskToReadyList+0xc8>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d207      	bcs.n	800af1e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800af0e:	4b0c      	ldr	r3, [pc, #48]	; (800af40 <prvAddNewTaskToReadyList+0xdc>)
 800af10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af14:	601a      	str	r2, [r3, #0]
 800af16:	f3bf 8f4f 	dsb	sy
 800af1a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af1e:	bf00      	nop
 800af20:	3708      	adds	r7, #8
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}
 800af26:	bf00      	nop
 800af28:	20001438 	.word	0x20001438
 800af2c:	20000f64 	.word	0x20000f64
 800af30:	20001444 	.word	0x20001444
 800af34:	20001454 	.word	0x20001454
 800af38:	20001440 	.word	0x20001440
 800af3c:	20000f68 	.word	0x20000f68
 800af40:	e000ed04 	.word	0xe000ed04

0800af44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800af44:	b580      	push	{r7, lr}
 800af46:	b084      	sub	sp, #16
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800af4c:	2300      	movs	r3, #0
 800af4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d017      	beq.n	800af86 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800af56:	4b13      	ldr	r3, [pc, #76]	; (800afa4 <vTaskDelay+0x60>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d00a      	beq.n	800af74 <vTaskDelay+0x30>
	__asm volatile
 800af5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af62:	f383 8811 	msr	BASEPRI, r3
 800af66:	f3bf 8f6f 	isb	sy
 800af6a:	f3bf 8f4f 	dsb	sy
 800af6e:	60bb      	str	r3, [r7, #8]
}
 800af70:	bf00      	nop
 800af72:	e7fe      	b.n	800af72 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800af74:	f000 f880 	bl	800b078 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800af78:	2100      	movs	r1, #0
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f000 fcea 	bl	800b954 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800af80:	f000 f888 	bl	800b094 <xTaskResumeAll>
 800af84:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d107      	bne.n	800af9c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800af8c:	4b06      	ldr	r3, [pc, #24]	; (800afa8 <vTaskDelay+0x64>)
 800af8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af92:	601a      	str	r2, [r3, #0]
 800af94:	f3bf 8f4f 	dsb	sy
 800af98:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800af9c:	bf00      	nop
 800af9e:	3710      	adds	r7, #16
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}
 800afa4:	20001460 	.word	0x20001460
 800afa8:	e000ed04 	.word	0xe000ed04

0800afac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b08a      	sub	sp, #40	; 0x28
 800afb0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800afb2:	2300      	movs	r3, #0
 800afb4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800afb6:	2300      	movs	r3, #0
 800afb8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800afba:	463a      	mov	r2, r7
 800afbc:	1d39      	adds	r1, r7, #4
 800afbe:	f107 0308 	add.w	r3, r7, #8
 800afc2:	4618      	mov	r0, r3
 800afc4:	f7ff f848 	bl	800a058 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800afc8:	6839      	ldr	r1, [r7, #0]
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	68ba      	ldr	r2, [r7, #8]
 800afce:	9202      	str	r2, [sp, #8]
 800afd0:	9301      	str	r3, [sp, #4]
 800afd2:	2300      	movs	r3, #0
 800afd4:	9300      	str	r3, [sp, #0]
 800afd6:	2300      	movs	r3, #0
 800afd8:	460a      	mov	r2, r1
 800afda:	4921      	ldr	r1, [pc, #132]	; (800b060 <vTaskStartScheduler+0xb4>)
 800afdc:	4821      	ldr	r0, [pc, #132]	; (800b064 <vTaskStartScheduler+0xb8>)
 800afde:	f7ff fe0f 	bl	800ac00 <xTaskCreateStatic>
 800afe2:	4603      	mov	r3, r0
 800afe4:	4a20      	ldr	r2, [pc, #128]	; (800b068 <vTaskStartScheduler+0xbc>)
 800afe6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800afe8:	4b1f      	ldr	r3, [pc, #124]	; (800b068 <vTaskStartScheduler+0xbc>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d002      	beq.n	800aff6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aff0:	2301      	movs	r3, #1
 800aff2:	617b      	str	r3, [r7, #20]
 800aff4:	e001      	b.n	800affa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800aff6:	2300      	movs	r3, #0
 800aff8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	2b01      	cmp	r3, #1
 800affe:	d102      	bne.n	800b006 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b000:	f000 fcfc 	bl	800b9fc <xTimerCreateTimerTask>
 800b004:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	2b01      	cmp	r3, #1
 800b00a:	d116      	bne.n	800b03a <vTaskStartScheduler+0x8e>
	__asm volatile
 800b00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b010:	f383 8811 	msr	BASEPRI, r3
 800b014:	f3bf 8f6f 	isb	sy
 800b018:	f3bf 8f4f 	dsb	sy
 800b01c:	613b      	str	r3, [r7, #16]
}
 800b01e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b020:	4b12      	ldr	r3, [pc, #72]	; (800b06c <vTaskStartScheduler+0xc0>)
 800b022:	f04f 32ff 	mov.w	r2, #4294967295
 800b026:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b028:	4b11      	ldr	r3, [pc, #68]	; (800b070 <vTaskStartScheduler+0xc4>)
 800b02a:	2201      	movs	r2, #1
 800b02c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b02e:	4b11      	ldr	r3, [pc, #68]	; (800b074 <vTaskStartScheduler+0xc8>)
 800b030:	2200      	movs	r2, #0
 800b032:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b034:	f001 f8bc 	bl	800c1b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b038:	e00e      	b.n	800b058 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b040:	d10a      	bne.n	800b058 <vTaskStartScheduler+0xac>
	__asm volatile
 800b042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b046:	f383 8811 	msr	BASEPRI, r3
 800b04a:	f3bf 8f6f 	isb	sy
 800b04e:	f3bf 8f4f 	dsb	sy
 800b052:	60fb      	str	r3, [r7, #12]
}
 800b054:	bf00      	nop
 800b056:	e7fe      	b.n	800b056 <vTaskStartScheduler+0xaa>
}
 800b058:	bf00      	nop
 800b05a:	3718      	adds	r7, #24
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}
 800b060:	0800e3d8 	.word	0x0800e3d8
 800b064:	0800b691 	.word	0x0800b691
 800b068:	2000145c 	.word	0x2000145c
 800b06c:	20001458 	.word	0x20001458
 800b070:	20001444 	.word	0x20001444
 800b074:	2000143c 	.word	0x2000143c

0800b078 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b078:	b480      	push	{r7}
 800b07a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b07c:	4b04      	ldr	r3, [pc, #16]	; (800b090 <vTaskSuspendAll+0x18>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	3301      	adds	r3, #1
 800b082:	4a03      	ldr	r2, [pc, #12]	; (800b090 <vTaskSuspendAll+0x18>)
 800b084:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b086:	bf00      	nop
 800b088:	46bd      	mov	sp, r7
 800b08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08e:	4770      	bx	lr
 800b090:	20001460 	.word	0x20001460

0800b094 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b084      	sub	sp, #16
 800b098:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b09a:	2300      	movs	r3, #0
 800b09c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b09e:	2300      	movs	r3, #0
 800b0a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b0a2:	4b42      	ldr	r3, [pc, #264]	; (800b1ac <xTaskResumeAll+0x118>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d10a      	bne.n	800b0c0 <xTaskResumeAll+0x2c>
	__asm volatile
 800b0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ae:	f383 8811 	msr	BASEPRI, r3
 800b0b2:	f3bf 8f6f 	isb	sy
 800b0b6:	f3bf 8f4f 	dsb	sy
 800b0ba:	603b      	str	r3, [r7, #0]
}
 800b0bc:	bf00      	nop
 800b0be:	e7fe      	b.n	800b0be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b0c0:	f001 f918 	bl	800c2f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b0c4:	4b39      	ldr	r3, [pc, #228]	; (800b1ac <xTaskResumeAll+0x118>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	3b01      	subs	r3, #1
 800b0ca:	4a38      	ldr	r2, [pc, #224]	; (800b1ac <xTaskResumeAll+0x118>)
 800b0cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0ce:	4b37      	ldr	r3, [pc, #220]	; (800b1ac <xTaskResumeAll+0x118>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d162      	bne.n	800b19c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b0d6:	4b36      	ldr	r3, [pc, #216]	; (800b1b0 <xTaskResumeAll+0x11c>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d05e      	beq.n	800b19c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b0de:	e02f      	b.n	800b140 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0e0:	4b34      	ldr	r3, [pc, #208]	; (800b1b4 <xTaskResumeAll+0x120>)
 800b0e2:	68db      	ldr	r3, [r3, #12]
 800b0e4:	68db      	ldr	r3, [r3, #12]
 800b0e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	3318      	adds	r3, #24
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f7ff f871 	bl	800a1d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	3304      	adds	r3, #4
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f7ff f86c 	bl	800a1d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b100:	4b2d      	ldr	r3, [pc, #180]	; (800b1b8 <xTaskResumeAll+0x124>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	429a      	cmp	r2, r3
 800b106:	d903      	bls.n	800b110 <xTaskResumeAll+0x7c>
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b10c:	4a2a      	ldr	r2, [pc, #168]	; (800b1b8 <xTaskResumeAll+0x124>)
 800b10e:	6013      	str	r3, [r2, #0]
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b114:	4613      	mov	r3, r2
 800b116:	009b      	lsls	r3, r3, #2
 800b118:	4413      	add	r3, r2
 800b11a:	009b      	lsls	r3, r3, #2
 800b11c:	4a27      	ldr	r2, [pc, #156]	; (800b1bc <xTaskResumeAll+0x128>)
 800b11e:	441a      	add	r2, r3
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	3304      	adds	r3, #4
 800b124:	4619      	mov	r1, r3
 800b126:	4610      	mov	r0, r2
 800b128:	f7fe fff7 	bl	800a11a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b130:	4b23      	ldr	r3, [pc, #140]	; (800b1c0 <xTaskResumeAll+0x12c>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b136:	429a      	cmp	r2, r3
 800b138:	d302      	bcc.n	800b140 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b13a:	4b22      	ldr	r3, [pc, #136]	; (800b1c4 <xTaskResumeAll+0x130>)
 800b13c:	2201      	movs	r2, #1
 800b13e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b140:	4b1c      	ldr	r3, [pc, #112]	; (800b1b4 <xTaskResumeAll+0x120>)
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d1cb      	bne.n	800b0e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d001      	beq.n	800b152 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b14e:	f000 fb55 	bl	800b7fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b152:	4b1d      	ldr	r3, [pc, #116]	; (800b1c8 <xTaskResumeAll+0x134>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d010      	beq.n	800b180 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b15e:	f000 f847 	bl	800b1f0 <xTaskIncrementTick>
 800b162:	4603      	mov	r3, r0
 800b164:	2b00      	cmp	r3, #0
 800b166:	d002      	beq.n	800b16e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b168:	4b16      	ldr	r3, [pc, #88]	; (800b1c4 <xTaskResumeAll+0x130>)
 800b16a:	2201      	movs	r2, #1
 800b16c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	3b01      	subs	r3, #1
 800b172:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d1f1      	bne.n	800b15e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b17a:	4b13      	ldr	r3, [pc, #76]	; (800b1c8 <xTaskResumeAll+0x134>)
 800b17c:	2200      	movs	r2, #0
 800b17e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b180:	4b10      	ldr	r3, [pc, #64]	; (800b1c4 <xTaskResumeAll+0x130>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d009      	beq.n	800b19c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b188:	2301      	movs	r3, #1
 800b18a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b18c:	4b0f      	ldr	r3, [pc, #60]	; (800b1cc <xTaskResumeAll+0x138>)
 800b18e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b192:	601a      	str	r2, [r3, #0]
 800b194:	f3bf 8f4f 	dsb	sy
 800b198:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b19c:	f001 f8da 	bl	800c354 <vPortExitCritical>

	return xAlreadyYielded;
 800b1a0:	68bb      	ldr	r3, [r7, #8]
}
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	3710      	adds	r7, #16
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	bd80      	pop	{r7, pc}
 800b1aa:	bf00      	nop
 800b1ac:	20001460 	.word	0x20001460
 800b1b0:	20001438 	.word	0x20001438
 800b1b4:	200013f8 	.word	0x200013f8
 800b1b8:	20001440 	.word	0x20001440
 800b1bc:	20000f68 	.word	0x20000f68
 800b1c0:	20000f64 	.word	0x20000f64
 800b1c4:	2000144c 	.word	0x2000144c
 800b1c8:	20001448 	.word	0x20001448
 800b1cc:	e000ed04 	.word	0xe000ed04

0800b1d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b1d0:	b480      	push	{r7}
 800b1d2:	b083      	sub	sp, #12
 800b1d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b1d6:	4b05      	ldr	r3, [pc, #20]	; (800b1ec <xTaskGetTickCount+0x1c>)
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b1dc:	687b      	ldr	r3, [r7, #4]
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	370c      	adds	r7, #12
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e8:	4770      	bx	lr
 800b1ea:	bf00      	nop
 800b1ec:	2000143c 	.word	0x2000143c

0800b1f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b086      	sub	sp, #24
 800b1f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b1fa:	4b4f      	ldr	r3, [pc, #316]	; (800b338 <xTaskIncrementTick+0x148>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	f040 808f 	bne.w	800b322 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b204:	4b4d      	ldr	r3, [pc, #308]	; (800b33c <xTaskIncrementTick+0x14c>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	3301      	adds	r3, #1
 800b20a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b20c:	4a4b      	ldr	r2, [pc, #300]	; (800b33c <xTaskIncrementTick+0x14c>)
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d120      	bne.n	800b25a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b218:	4b49      	ldr	r3, [pc, #292]	; (800b340 <xTaskIncrementTick+0x150>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d00a      	beq.n	800b238 <xTaskIncrementTick+0x48>
	__asm volatile
 800b222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b226:	f383 8811 	msr	BASEPRI, r3
 800b22a:	f3bf 8f6f 	isb	sy
 800b22e:	f3bf 8f4f 	dsb	sy
 800b232:	603b      	str	r3, [r7, #0]
}
 800b234:	bf00      	nop
 800b236:	e7fe      	b.n	800b236 <xTaskIncrementTick+0x46>
 800b238:	4b41      	ldr	r3, [pc, #260]	; (800b340 <xTaskIncrementTick+0x150>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	60fb      	str	r3, [r7, #12]
 800b23e:	4b41      	ldr	r3, [pc, #260]	; (800b344 <xTaskIncrementTick+0x154>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	4a3f      	ldr	r2, [pc, #252]	; (800b340 <xTaskIncrementTick+0x150>)
 800b244:	6013      	str	r3, [r2, #0]
 800b246:	4a3f      	ldr	r2, [pc, #252]	; (800b344 <xTaskIncrementTick+0x154>)
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	6013      	str	r3, [r2, #0]
 800b24c:	4b3e      	ldr	r3, [pc, #248]	; (800b348 <xTaskIncrementTick+0x158>)
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	3301      	adds	r3, #1
 800b252:	4a3d      	ldr	r2, [pc, #244]	; (800b348 <xTaskIncrementTick+0x158>)
 800b254:	6013      	str	r3, [r2, #0]
 800b256:	f000 fad1 	bl	800b7fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b25a:	4b3c      	ldr	r3, [pc, #240]	; (800b34c <xTaskIncrementTick+0x15c>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	693a      	ldr	r2, [r7, #16]
 800b260:	429a      	cmp	r2, r3
 800b262:	d349      	bcc.n	800b2f8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b264:	4b36      	ldr	r3, [pc, #216]	; (800b340 <xTaskIncrementTick+0x150>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d104      	bne.n	800b278 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b26e:	4b37      	ldr	r3, [pc, #220]	; (800b34c <xTaskIncrementTick+0x15c>)
 800b270:	f04f 32ff 	mov.w	r2, #4294967295
 800b274:	601a      	str	r2, [r3, #0]
					break;
 800b276:	e03f      	b.n	800b2f8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b278:	4b31      	ldr	r3, [pc, #196]	; (800b340 <xTaskIncrementTick+0x150>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	68db      	ldr	r3, [r3, #12]
 800b27e:	68db      	ldr	r3, [r3, #12]
 800b280:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	685b      	ldr	r3, [r3, #4]
 800b286:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b288:	693a      	ldr	r2, [r7, #16]
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	429a      	cmp	r2, r3
 800b28e:	d203      	bcs.n	800b298 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b290:	4a2e      	ldr	r2, [pc, #184]	; (800b34c <xTaskIncrementTick+0x15c>)
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b296:	e02f      	b.n	800b2f8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	3304      	adds	r3, #4
 800b29c:	4618      	mov	r0, r3
 800b29e:	f7fe ff99 	bl	800a1d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d004      	beq.n	800b2b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	3318      	adds	r3, #24
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f7fe ff90 	bl	800a1d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2b8:	4b25      	ldr	r3, [pc, #148]	; (800b350 <xTaskIncrementTick+0x160>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	429a      	cmp	r2, r3
 800b2be:	d903      	bls.n	800b2c8 <xTaskIncrementTick+0xd8>
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2c4:	4a22      	ldr	r2, [pc, #136]	; (800b350 <xTaskIncrementTick+0x160>)
 800b2c6:	6013      	str	r3, [r2, #0]
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2cc:	4613      	mov	r3, r2
 800b2ce:	009b      	lsls	r3, r3, #2
 800b2d0:	4413      	add	r3, r2
 800b2d2:	009b      	lsls	r3, r3, #2
 800b2d4:	4a1f      	ldr	r2, [pc, #124]	; (800b354 <xTaskIncrementTick+0x164>)
 800b2d6:	441a      	add	r2, r3
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	3304      	adds	r3, #4
 800b2dc:	4619      	mov	r1, r3
 800b2de:	4610      	mov	r0, r2
 800b2e0:	f7fe ff1b 	bl	800a11a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2e8:	4b1b      	ldr	r3, [pc, #108]	; (800b358 <xTaskIncrementTick+0x168>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2ee:	429a      	cmp	r2, r3
 800b2f0:	d3b8      	bcc.n	800b264 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b2f6:	e7b5      	b.n	800b264 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b2f8:	4b17      	ldr	r3, [pc, #92]	; (800b358 <xTaskIncrementTick+0x168>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2fe:	4915      	ldr	r1, [pc, #84]	; (800b354 <xTaskIncrementTick+0x164>)
 800b300:	4613      	mov	r3, r2
 800b302:	009b      	lsls	r3, r3, #2
 800b304:	4413      	add	r3, r2
 800b306:	009b      	lsls	r3, r3, #2
 800b308:	440b      	add	r3, r1
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	2b01      	cmp	r3, #1
 800b30e:	d901      	bls.n	800b314 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b310:	2301      	movs	r3, #1
 800b312:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b314:	4b11      	ldr	r3, [pc, #68]	; (800b35c <xTaskIncrementTick+0x16c>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d007      	beq.n	800b32c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b31c:	2301      	movs	r3, #1
 800b31e:	617b      	str	r3, [r7, #20]
 800b320:	e004      	b.n	800b32c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b322:	4b0f      	ldr	r3, [pc, #60]	; (800b360 <xTaskIncrementTick+0x170>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	3301      	adds	r3, #1
 800b328:	4a0d      	ldr	r2, [pc, #52]	; (800b360 <xTaskIncrementTick+0x170>)
 800b32a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b32c:	697b      	ldr	r3, [r7, #20]
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3718      	adds	r7, #24
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}
 800b336:	bf00      	nop
 800b338:	20001460 	.word	0x20001460
 800b33c:	2000143c 	.word	0x2000143c
 800b340:	200013f0 	.word	0x200013f0
 800b344:	200013f4 	.word	0x200013f4
 800b348:	20001450 	.word	0x20001450
 800b34c:	20001458 	.word	0x20001458
 800b350:	20001440 	.word	0x20001440
 800b354:	20000f68 	.word	0x20000f68
 800b358:	20000f64 	.word	0x20000f64
 800b35c:	2000144c 	.word	0x2000144c
 800b360:	20001448 	.word	0x20001448

0800b364 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b364:	b480      	push	{r7}
 800b366:	b085      	sub	sp, #20
 800b368:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b36a:	4b28      	ldr	r3, [pc, #160]	; (800b40c <vTaskSwitchContext+0xa8>)
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d003      	beq.n	800b37a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b372:	4b27      	ldr	r3, [pc, #156]	; (800b410 <vTaskSwitchContext+0xac>)
 800b374:	2201      	movs	r2, #1
 800b376:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b378:	e041      	b.n	800b3fe <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b37a:	4b25      	ldr	r3, [pc, #148]	; (800b410 <vTaskSwitchContext+0xac>)
 800b37c:	2200      	movs	r2, #0
 800b37e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b380:	4b24      	ldr	r3, [pc, #144]	; (800b414 <vTaskSwitchContext+0xb0>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	60fb      	str	r3, [r7, #12]
 800b386:	e010      	b.n	800b3aa <vTaskSwitchContext+0x46>
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d10a      	bne.n	800b3a4 <vTaskSwitchContext+0x40>
	__asm volatile
 800b38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b392:	f383 8811 	msr	BASEPRI, r3
 800b396:	f3bf 8f6f 	isb	sy
 800b39a:	f3bf 8f4f 	dsb	sy
 800b39e:	607b      	str	r3, [r7, #4]
}
 800b3a0:	bf00      	nop
 800b3a2:	e7fe      	b.n	800b3a2 <vTaskSwitchContext+0x3e>
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	3b01      	subs	r3, #1
 800b3a8:	60fb      	str	r3, [r7, #12]
 800b3aa:	491b      	ldr	r1, [pc, #108]	; (800b418 <vTaskSwitchContext+0xb4>)
 800b3ac:	68fa      	ldr	r2, [r7, #12]
 800b3ae:	4613      	mov	r3, r2
 800b3b0:	009b      	lsls	r3, r3, #2
 800b3b2:	4413      	add	r3, r2
 800b3b4:	009b      	lsls	r3, r3, #2
 800b3b6:	440b      	add	r3, r1
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d0e4      	beq.n	800b388 <vTaskSwitchContext+0x24>
 800b3be:	68fa      	ldr	r2, [r7, #12]
 800b3c0:	4613      	mov	r3, r2
 800b3c2:	009b      	lsls	r3, r3, #2
 800b3c4:	4413      	add	r3, r2
 800b3c6:	009b      	lsls	r3, r3, #2
 800b3c8:	4a13      	ldr	r2, [pc, #76]	; (800b418 <vTaskSwitchContext+0xb4>)
 800b3ca:	4413      	add	r3, r2
 800b3cc:	60bb      	str	r3, [r7, #8]
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	685b      	ldr	r3, [r3, #4]
 800b3d2:	685a      	ldr	r2, [r3, #4]
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	605a      	str	r2, [r3, #4]
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	685a      	ldr	r2, [r3, #4]
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	3308      	adds	r3, #8
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d104      	bne.n	800b3ee <vTaskSwitchContext+0x8a>
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	685b      	ldr	r3, [r3, #4]
 800b3e8:	685a      	ldr	r2, [r3, #4]
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	605a      	str	r2, [r3, #4]
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	685b      	ldr	r3, [r3, #4]
 800b3f2:	68db      	ldr	r3, [r3, #12]
 800b3f4:	4a09      	ldr	r2, [pc, #36]	; (800b41c <vTaskSwitchContext+0xb8>)
 800b3f6:	6013      	str	r3, [r2, #0]
 800b3f8:	4a06      	ldr	r2, [pc, #24]	; (800b414 <vTaskSwitchContext+0xb0>)
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	6013      	str	r3, [r2, #0]
}
 800b3fe:	bf00      	nop
 800b400:	3714      	adds	r7, #20
 800b402:	46bd      	mov	sp, r7
 800b404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b408:	4770      	bx	lr
 800b40a:	bf00      	nop
 800b40c:	20001460 	.word	0x20001460
 800b410:	2000144c 	.word	0x2000144c
 800b414:	20001440 	.word	0x20001440
 800b418:	20000f68 	.word	0x20000f68
 800b41c:	20000f64 	.word	0x20000f64

0800b420 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b084      	sub	sp, #16
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
 800b428:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d10a      	bne.n	800b446 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b430:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b434:	f383 8811 	msr	BASEPRI, r3
 800b438:	f3bf 8f6f 	isb	sy
 800b43c:	f3bf 8f4f 	dsb	sy
 800b440:	60fb      	str	r3, [r7, #12]
}
 800b442:	bf00      	nop
 800b444:	e7fe      	b.n	800b444 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b446:	4b07      	ldr	r3, [pc, #28]	; (800b464 <vTaskPlaceOnEventList+0x44>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	3318      	adds	r3, #24
 800b44c:	4619      	mov	r1, r3
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f7fe fe87 	bl	800a162 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b454:	2101      	movs	r1, #1
 800b456:	6838      	ldr	r0, [r7, #0]
 800b458:	f000 fa7c 	bl	800b954 <prvAddCurrentTaskToDelayedList>
}
 800b45c:	bf00      	nop
 800b45e:	3710      	adds	r7, #16
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}
 800b464:	20000f64 	.word	0x20000f64

0800b468 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b086      	sub	sp, #24
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	60f8      	str	r0, [r7, #12]
 800b470:	60b9      	str	r1, [r7, #8]
 800b472:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d10a      	bne.n	800b490 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b47a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b47e:	f383 8811 	msr	BASEPRI, r3
 800b482:	f3bf 8f6f 	isb	sy
 800b486:	f3bf 8f4f 	dsb	sy
 800b48a:	617b      	str	r3, [r7, #20]
}
 800b48c:	bf00      	nop
 800b48e:	e7fe      	b.n	800b48e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b490:	4b0a      	ldr	r3, [pc, #40]	; (800b4bc <vTaskPlaceOnEventListRestricted+0x54>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	3318      	adds	r3, #24
 800b496:	4619      	mov	r1, r3
 800b498:	68f8      	ldr	r0, [r7, #12]
 800b49a:	f7fe fe3e 	bl	800a11a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d002      	beq.n	800b4aa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b4a4:	f04f 33ff 	mov.w	r3, #4294967295
 800b4a8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b4aa:	6879      	ldr	r1, [r7, #4]
 800b4ac:	68b8      	ldr	r0, [r7, #8]
 800b4ae:	f000 fa51 	bl	800b954 <prvAddCurrentTaskToDelayedList>
	}
 800b4b2:	bf00      	nop
 800b4b4:	3718      	adds	r7, #24
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}
 800b4ba:	bf00      	nop
 800b4bc:	20000f64 	.word	0x20000f64

0800b4c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b086      	sub	sp, #24
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	68db      	ldr	r3, [r3, #12]
 800b4cc:	68db      	ldr	r3, [r3, #12]
 800b4ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d10a      	bne.n	800b4ec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b4d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4da:	f383 8811 	msr	BASEPRI, r3
 800b4de:	f3bf 8f6f 	isb	sy
 800b4e2:	f3bf 8f4f 	dsb	sy
 800b4e6:	60fb      	str	r3, [r7, #12]
}
 800b4e8:	bf00      	nop
 800b4ea:	e7fe      	b.n	800b4ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b4ec:	693b      	ldr	r3, [r7, #16]
 800b4ee:	3318      	adds	r3, #24
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f7fe fe6f 	bl	800a1d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b4f6:	4b1e      	ldr	r3, [pc, #120]	; (800b570 <xTaskRemoveFromEventList+0xb0>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d11d      	bne.n	800b53a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b4fe:	693b      	ldr	r3, [r7, #16]
 800b500:	3304      	adds	r3, #4
 800b502:	4618      	mov	r0, r3
 800b504:	f7fe fe66 	bl	800a1d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b508:	693b      	ldr	r3, [r7, #16]
 800b50a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b50c:	4b19      	ldr	r3, [pc, #100]	; (800b574 <xTaskRemoveFromEventList+0xb4>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	429a      	cmp	r2, r3
 800b512:	d903      	bls.n	800b51c <xTaskRemoveFromEventList+0x5c>
 800b514:	693b      	ldr	r3, [r7, #16]
 800b516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b518:	4a16      	ldr	r2, [pc, #88]	; (800b574 <xTaskRemoveFromEventList+0xb4>)
 800b51a:	6013      	str	r3, [r2, #0]
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b520:	4613      	mov	r3, r2
 800b522:	009b      	lsls	r3, r3, #2
 800b524:	4413      	add	r3, r2
 800b526:	009b      	lsls	r3, r3, #2
 800b528:	4a13      	ldr	r2, [pc, #76]	; (800b578 <xTaskRemoveFromEventList+0xb8>)
 800b52a:	441a      	add	r2, r3
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	3304      	adds	r3, #4
 800b530:	4619      	mov	r1, r3
 800b532:	4610      	mov	r0, r2
 800b534:	f7fe fdf1 	bl	800a11a <vListInsertEnd>
 800b538:	e005      	b.n	800b546 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	3318      	adds	r3, #24
 800b53e:	4619      	mov	r1, r3
 800b540:	480e      	ldr	r0, [pc, #56]	; (800b57c <xTaskRemoveFromEventList+0xbc>)
 800b542:	f7fe fdea 	bl	800a11a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b546:	693b      	ldr	r3, [r7, #16]
 800b548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b54a:	4b0d      	ldr	r3, [pc, #52]	; (800b580 <xTaskRemoveFromEventList+0xc0>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b550:	429a      	cmp	r2, r3
 800b552:	d905      	bls.n	800b560 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b554:	2301      	movs	r3, #1
 800b556:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b558:	4b0a      	ldr	r3, [pc, #40]	; (800b584 <xTaskRemoveFromEventList+0xc4>)
 800b55a:	2201      	movs	r2, #1
 800b55c:	601a      	str	r2, [r3, #0]
 800b55e:	e001      	b.n	800b564 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b560:	2300      	movs	r3, #0
 800b562:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b564:	697b      	ldr	r3, [r7, #20]
}
 800b566:	4618      	mov	r0, r3
 800b568:	3718      	adds	r7, #24
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd80      	pop	{r7, pc}
 800b56e:	bf00      	nop
 800b570:	20001460 	.word	0x20001460
 800b574:	20001440 	.word	0x20001440
 800b578:	20000f68 	.word	0x20000f68
 800b57c:	200013f8 	.word	0x200013f8
 800b580:	20000f64 	.word	0x20000f64
 800b584:	2000144c 	.word	0x2000144c

0800b588 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b588:	b480      	push	{r7}
 800b58a:	b083      	sub	sp, #12
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b590:	4b06      	ldr	r3, [pc, #24]	; (800b5ac <vTaskInternalSetTimeOutState+0x24>)
 800b592:	681a      	ldr	r2, [r3, #0]
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b598:	4b05      	ldr	r3, [pc, #20]	; (800b5b0 <vTaskInternalSetTimeOutState+0x28>)
 800b59a:	681a      	ldr	r2, [r3, #0]
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	605a      	str	r2, [r3, #4]
}
 800b5a0:	bf00      	nop
 800b5a2:	370c      	adds	r7, #12
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5aa:	4770      	bx	lr
 800b5ac:	20001450 	.word	0x20001450
 800b5b0:	2000143c 	.word	0x2000143c

0800b5b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b088      	sub	sp, #32
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
 800b5bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d10a      	bne.n	800b5da <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b5c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c8:	f383 8811 	msr	BASEPRI, r3
 800b5cc:	f3bf 8f6f 	isb	sy
 800b5d0:	f3bf 8f4f 	dsb	sy
 800b5d4:	613b      	str	r3, [r7, #16]
}
 800b5d6:	bf00      	nop
 800b5d8:	e7fe      	b.n	800b5d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d10a      	bne.n	800b5f6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b5e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5e4:	f383 8811 	msr	BASEPRI, r3
 800b5e8:	f3bf 8f6f 	isb	sy
 800b5ec:	f3bf 8f4f 	dsb	sy
 800b5f0:	60fb      	str	r3, [r7, #12]
}
 800b5f2:	bf00      	nop
 800b5f4:	e7fe      	b.n	800b5f4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b5f6:	f000 fe7d 	bl	800c2f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b5fa:	4b1d      	ldr	r3, [pc, #116]	; (800b670 <xTaskCheckForTimeOut+0xbc>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	685b      	ldr	r3, [r3, #4]
 800b604:	69ba      	ldr	r2, [r7, #24]
 800b606:	1ad3      	subs	r3, r2, r3
 800b608:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b612:	d102      	bne.n	800b61a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b614:	2300      	movs	r3, #0
 800b616:	61fb      	str	r3, [r7, #28]
 800b618:	e023      	b.n	800b662 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681a      	ldr	r2, [r3, #0]
 800b61e:	4b15      	ldr	r3, [pc, #84]	; (800b674 <xTaskCheckForTimeOut+0xc0>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	429a      	cmp	r2, r3
 800b624:	d007      	beq.n	800b636 <xTaskCheckForTimeOut+0x82>
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	685b      	ldr	r3, [r3, #4]
 800b62a:	69ba      	ldr	r2, [r7, #24]
 800b62c:	429a      	cmp	r2, r3
 800b62e:	d302      	bcc.n	800b636 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b630:	2301      	movs	r3, #1
 800b632:	61fb      	str	r3, [r7, #28]
 800b634:	e015      	b.n	800b662 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	697a      	ldr	r2, [r7, #20]
 800b63c:	429a      	cmp	r2, r3
 800b63e:	d20b      	bcs.n	800b658 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	681a      	ldr	r2, [r3, #0]
 800b644:	697b      	ldr	r3, [r7, #20]
 800b646:	1ad2      	subs	r2, r2, r3
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f7ff ff9b 	bl	800b588 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b652:	2300      	movs	r3, #0
 800b654:	61fb      	str	r3, [r7, #28]
 800b656:	e004      	b.n	800b662 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	2200      	movs	r2, #0
 800b65c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b65e:	2301      	movs	r3, #1
 800b660:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b662:	f000 fe77 	bl	800c354 <vPortExitCritical>

	return xReturn;
 800b666:	69fb      	ldr	r3, [r7, #28]
}
 800b668:	4618      	mov	r0, r3
 800b66a:	3720      	adds	r7, #32
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}
 800b670:	2000143c 	.word	0x2000143c
 800b674:	20001450 	.word	0x20001450

0800b678 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b678:	b480      	push	{r7}
 800b67a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b67c:	4b03      	ldr	r3, [pc, #12]	; (800b68c <vTaskMissedYield+0x14>)
 800b67e:	2201      	movs	r2, #1
 800b680:	601a      	str	r2, [r3, #0]
}
 800b682:	bf00      	nop
 800b684:	46bd      	mov	sp, r7
 800b686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68a:	4770      	bx	lr
 800b68c:	2000144c 	.word	0x2000144c

0800b690 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b082      	sub	sp, #8
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b698:	f000 f852 	bl	800b740 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b69c:	4b06      	ldr	r3, [pc, #24]	; (800b6b8 <prvIdleTask+0x28>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	2b01      	cmp	r3, #1
 800b6a2:	d9f9      	bls.n	800b698 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b6a4:	4b05      	ldr	r3, [pc, #20]	; (800b6bc <prvIdleTask+0x2c>)
 800b6a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6aa:	601a      	str	r2, [r3, #0]
 800b6ac:	f3bf 8f4f 	dsb	sy
 800b6b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b6b4:	e7f0      	b.n	800b698 <prvIdleTask+0x8>
 800b6b6:	bf00      	nop
 800b6b8:	20000f68 	.word	0x20000f68
 800b6bc:	e000ed04 	.word	0xe000ed04

0800b6c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b082      	sub	sp, #8
 800b6c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	607b      	str	r3, [r7, #4]
 800b6ca:	e00c      	b.n	800b6e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b6cc:	687a      	ldr	r2, [r7, #4]
 800b6ce:	4613      	mov	r3, r2
 800b6d0:	009b      	lsls	r3, r3, #2
 800b6d2:	4413      	add	r3, r2
 800b6d4:	009b      	lsls	r3, r3, #2
 800b6d6:	4a12      	ldr	r2, [pc, #72]	; (800b720 <prvInitialiseTaskLists+0x60>)
 800b6d8:	4413      	add	r3, r2
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f7fe fcf0 	bl	800a0c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	3301      	adds	r3, #1
 800b6e4:	607b      	str	r3, [r7, #4]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2b37      	cmp	r3, #55	; 0x37
 800b6ea:	d9ef      	bls.n	800b6cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b6ec:	480d      	ldr	r0, [pc, #52]	; (800b724 <prvInitialiseTaskLists+0x64>)
 800b6ee:	f7fe fce7 	bl	800a0c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b6f2:	480d      	ldr	r0, [pc, #52]	; (800b728 <prvInitialiseTaskLists+0x68>)
 800b6f4:	f7fe fce4 	bl	800a0c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b6f8:	480c      	ldr	r0, [pc, #48]	; (800b72c <prvInitialiseTaskLists+0x6c>)
 800b6fa:	f7fe fce1 	bl	800a0c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b6fe:	480c      	ldr	r0, [pc, #48]	; (800b730 <prvInitialiseTaskLists+0x70>)
 800b700:	f7fe fcde 	bl	800a0c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b704:	480b      	ldr	r0, [pc, #44]	; (800b734 <prvInitialiseTaskLists+0x74>)
 800b706:	f7fe fcdb 	bl	800a0c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b70a:	4b0b      	ldr	r3, [pc, #44]	; (800b738 <prvInitialiseTaskLists+0x78>)
 800b70c:	4a05      	ldr	r2, [pc, #20]	; (800b724 <prvInitialiseTaskLists+0x64>)
 800b70e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b710:	4b0a      	ldr	r3, [pc, #40]	; (800b73c <prvInitialiseTaskLists+0x7c>)
 800b712:	4a05      	ldr	r2, [pc, #20]	; (800b728 <prvInitialiseTaskLists+0x68>)
 800b714:	601a      	str	r2, [r3, #0]
}
 800b716:	bf00      	nop
 800b718:	3708      	adds	r7, #8
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	bf00      	nop
 800b720:	20000f68 	.word	0x20000f68
 800b724:	200013c8 	.word	0x200013c8
 800b728:	200013dc 	.word	0x200013dc
 800b72c:	200013f8 	.word	0x200013f8
 800b730:	2000140c 	.word	0x2000140c
 800b734:	20001424 	.word	0x20001424
 800b738:	200013f0 	.word	0x200013f0
 800b73c:	200013f4 	.word	0x200013f4

0800b740 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b082      	sub	sp, #8
 800b744:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b746:	e019      	b.n	800b77c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b748:	f000 fdd4 	bl	800c2f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b74c:	4b10      	ldr	r3, [pc, #64]	; (800b790 <prvCheckTasksWaitingTermination+0x50>)
 800b74e:	68db      	ldr	r3, [r3, #12]
 800b750:	68db      	ldr	r3, [r3, #12]
 800b752:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	3304      	adds	r3, #4
 800b758:	4618      	mov	r0, r3
 800b75a:	f7fe fd3b 	bl	800a1d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b75e:	4b0d      	ldr	r3, [pc, #52]	; (800b794 <prvCheckTasksWaitingTermination+0x54>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	3b01      	subs	r3, #1
 800b764:	4a0b      	ldr	r2, [pc, #44]	; (800b794 <prvCheckTasksWaitingTermination+0x54>)
 800b766:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b768:	4b0b      	ldr	r3, [pc, #44]	; (800b798 <prvCheckTasksWaitingTermination+0x58>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	3b01      	subs	r3, #1
 800b76e:	4a0a      	ldr	r2, [pc, #40]	; (800b798 <prvCheckTasksWaitingTermination+0x58>)
 800b770:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b772:	f000 fdef 	bl	800c354 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	f000 f810 	bl	800b79c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b77c:	4b06      	ldr	r3, [pc, #24]	; (800b798 <prvCheckTasksWaitingTermination+0x58>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d1e1      	bne.n	800b748 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b784:	bf00      	nop
 800b786:	bf00      	nop
 800b788:	3708      	adds	r7, #8
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}
 800b78e:	bf00      	nop
 800b790:	2000140c 	.word	0x2000140c
 800b794:	20001438 	.word	0x20001438
 800b798:	20001420 	.word	0x20001420

0800b79c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b084      	sub	sp, #16
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d108      	bne.n	800b7c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f000 ff8c 	bl	800c6d0 <vPortFree>
				vPortFree( pxTCB );
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f000 ff89 	bl	800c6d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b7be:	e018      	b.n	800b7f2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b7c6:	2b01      	cmp	r3, #1
 800b7c8:	d103      	bne.n	800b7d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f000 ff80 	bl	800c6d0 <vPortFree>
	}
 800b7d0:	e00f      	b.n	800b7f2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b7d8:	2b02      	cmp	r3, #2
 800b7da:	d00a      	beq.n	800b7f2 <prvDeleteTCB+0x56>
	__asm volatile
 800b7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e0:	f383 8811 	msr	BASEPRI, r3
 800b7e4:	f3bf 8f6f 	isb	sy
 800b7e8:	f3bf 8f4f 	dsb	sy
 800b7ec:	60fb      	str	r3, [r7, #12]
}
 800b7ee:	bf00      	nop
 800b7f0:	e7fe      	b.n	800b7f0 <prvDeleteTCB+0x54>
	}
 800b7f2:	bf00      	nop
 800b7f4:	3710      	adds	r7, #16
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}
	...

0800b7fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b083      	sub	sp, #12
 800b800:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b802:	4b0c      	ldr	r3, [pc, #48]	; (800b834 <prvResetNextTaskUnblockTime+0x38>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d104      	bne.n	800b816 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b80c:	4b0a      	ldr	r3, [pc, #40]	; (800b838 <prvResetNextTaskUnblockTime+0x3c>)
 800b80e:	f04f 32ff 	mov.w	r2, #4294967295
 800b812:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b814:	e008      	b.n	800b828 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b816:	4b07      	ldr	r3, [pc, #28]	; (800b834 <prvResetNextTaskUnblockTime+0x38>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	68db      	ldr	r3, [r3, #12]
 800b81c:	68db      	ldr	r3, [r3, #12]
 800b81e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	685b      	ldr	r3, [r3, #4]
 800b824:	4a04      	ldr	r2, [pc, #16]	; (800b838 <prvResetNextTaskUnblockTime+0x3c>)
 800b826:	6013      	str	r3, [r2, #0]
}
 800b828:	bf00      	nop
 800b82a:	370c      	adds	r7, #12
 800b82c:	46bd      	mov	sp, r7
 800b82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b832:	4770      	bx	lr
 800b834:	200013f0 	.word	0x200013f0
 800b838:	20001458 	.word	0x20001458

0800b83c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b83c:	b480      	push	{r7}
 800b83e:	b083      	sub	sp, #12
 800b840:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b842:	4b0b      	ldr	r3, [pc, #44]	; (800b870 <xTaskGetSchedulerState+0x34>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d102      	bne.n	800b850 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b84a:	2301      	movs	r3, #1
 800b84c:	607b      	str	r3, [r7, #4]
 800b84e:	e008      	b.n	800b862 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b850:	4b08      	ldr	r3, [pc, #32]	; (800b874 <xTaskGetSchedulerState+0x38>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d102      	bne.n	800b85e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b858:	2302      	movs	r3, #2
 800b85a:	607b      	str	r3, [r7, #4]
 800b85c:	e001      	b.n	800b862 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b85e:	2300      	movs	r3, #0
 800b860:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b862:	687b      	ldr	r3, [r7, #4]
	}
 800b864:	4618      	mov	r0, r3
 800b866:	370c      	adds	r7, #12
 800b868:	46bd      	mov	sp, r7
 800b86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86e:	4770      	bx	lr
 800b870:	20001444 	.word	0x20001444
 800b874:	20001460 	.word	0x20001460

0800b878 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b086      	sub	sp, #24
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b884:	2300      	movs	r3, #0
 800b886:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d056      	beq.n	800b93c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b88e:	4b2e      	ldr	r3, [pc, #184]	; (800b948 <xTaskPriorityDisinherit+0xd0>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	693a      	ldr	r2, [r7, #16]
 800b894:	429a      	cmp	r2, r3
 800b896:	d00a      	beq.n	800b8ae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b89c:	f383 8811 	msr	BASEPRI, r3
 800b8a0:	f3bf 8f6f 	isb	sy
 800b8a4:	f3bf 8f4f 	dsb	sy
 800b8a8:	60fb      	str	r3, [r7, #12]
}
 800b8aa:	bf00      	nop
 800b8ac:	e7fe      	b.n	800b8ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d10a      	bne.n	800b8cc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b8b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ba:	f383 8811 	msr	BASEPRI, r3
 800b8be:	f3bf 8f6f 	isb	sy
 800b8c2:	f3bf 8f4f 	dsb	sy
 800b8c6:	60bb      	str	r3, [r7, #8]
}
 800b8c8:	bf00      	nop
 800b8ca:	e7fe      	b.n	800b8ca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b8cc:	693b      	ldr	r3, [r7, #16]
 800b8ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8d0:	1e5a      	subs	r2, r3, #1
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b8d6:	693b      	ldr	r3, [r7, #16]
 800b8d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8da:	693b      	ldr	r3, [r7, #16]
 800b8dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8de:	429a      	cmp	r2, r3
 800b8e0:	d02c      	beq.n	800b93c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d128      	bne.n	800b93c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b8ea:	693b      	ldr	r3, [r7, #16]
 800b8ec:	3304      	adds	r3, #4
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f7fe fc70 	bl	800a1d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b900:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b904:	693b      	ldr	r3, [r7, #16]
 800b906:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b908:	693b      	ldr	r3, [r7, #16]
 800b90a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b90c:	4b0f      	ldr	r3, [pc, #60]	; (800b94c <xTaskPriorityDisinherit+0xd4>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	429a      	cmp	r2, r3
 800b912:	d903      	bls.n	800b91c <xTaskPriorityDisinherit+0xa4>
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b918:	4a0c      	ldr	r2, [pc, #48]	; (800b94c <xTaskPriorityDisinherit+0xd4>)
 800b91a:	6013      	str	r3, [r2, #0]
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b920:	4613      	mov	r3, r2
 800b922:	009b      	lsls	r3, r3, #2
 800b924:	4413      	add	r3, r2
 800b926:	009b      	lsls	r3, r3, #2
 800b928:	4a09      	ldr	r2, [pc, #36]	; (800b950 <xTaskPriorityDisinherit+0xd8>)
 800b92a:	441a      	add	r2, r3
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	3304      	adds	r3, #4
 800b930:	4619      	mov	r1, r3
 800b932:	4610      	mov	r0, r2
 800b934:	f7fe fbf1 	bl	800a11a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b938:	2301      	movs	r3, #1
 800b93a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b93c:	697b      	ldr	r3, [r7, #20]
	}
 800b93e:	4618      	mov	r0, r3
 800b940:	3718      	adds	r7, #24
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}
 800b946:	bf00      	nop
 800b948:	20000f64 	.word	0x20000f64
 800b94c:	20001440 	.word	0x20001440
 800b950:	20000f68 	.word	0x20000f68

0800b954 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b084      	sub	sp, #16
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
 800b95c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b95e:	4b21      	ldr	r3, [pc, #132]	; (800b9e4 <prvAddCurrentTaskToDelayedList+0x90>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b964:	4b20      	ldr	r3, [pc, #128]	; (800b9e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	3304      	adds	r3, #4
 800b96a:	4618      	mov	r0, r3
 800b96c:	f7fe fc32 	bl	800a1d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b976:	d10a      	bne.n	800b98e <prvAddCurrentTaskToDelayedList+0x3a>
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d007      	beq.n	800b98e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b97e:	4b1a      	ldr	r3, [pc, #104]	; (800b9e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	3304      	adds	r3, #4
 800b984:	4619      	mov	r1, r3
 800b986:	4819      	ldr	r0, [pc, #100]	; (800b9ec <prvAddCurrentTaskToDelayedList+0x98>)
 800b988:	f7fe fbc7 	bl	800a11a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b98c:	e026      	b.n	800b9dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b98e:	68fa      	ldr	r2, [r7, #12]
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	4413      	add	r3, r2
 800b994:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b996:	4b14      	ldr	r3, [pc, #80]	; (800b9e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	68ba      	ldr	r2, [r7, #8]
 800b99c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b99e:	68ba      	ldr	r2, [r7, #8]
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	429a      	cmp	r2, r3
 800b9a4:	d209      	bcs.n	800b9ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b9a6:	4b12      	ldr	r3, [pc, #72]	; (800b9f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b9a8:	681a      	ldr	r2, [r3, #0]
 800b9aa:	4b0f      	ldr	r3, [pc, #60]	; (800b9e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	3304      	adds	r3, #4
 800b9b0:	4619      	mov	r1, r3
 800b9b2:	4610      	mov	r0, r2
 800b9b4:	f7fe fbd5 	bl	800a162 <vListInsert>
}
 800b9b8:	e010      	b.n	800b9dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b9ba:	4b0e      	ldr	r3, [pc, #56]	; (800b9f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b9bc:	681a      	ldr	r2, [r3, #0]
 800b9be:	4b0a      	ldr	r3, [pc, #40]	; (800b9e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	3304      	adds	r3, #4
 800b9c4:	4619      	mov	r1, r3
 800b9c6:	4610      	mov	r0, r2
 800b9c8:	f7fe fbcb 	bl	800a162 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b9cc:	4b0a      	ldr	r3, [pc, #40]	; (800b9f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	68ba      	ldr	r2, [r7, #8]
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	d202      	bcs.n	800b9dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b9d6:	4a08      	ldr	r2, [pc, #32]	; (800b9f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	6013      	str	r3, [r2, #0]
}
 800b9dc:	bf00      	nop
 800b9de:	3710      	adds	r7, #16
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}
 800b9e4:	2000143c 	.word	0x2000143c
 800b9e8:	20000f64 	.word	0x20000f64
 800b9ec:	20001424 	.word	0x20001424
 800b9f0:	200013f4 	.word	0x200013f4
 800b9f4:	200013f0 	.word	0x200013f0
 800b9f8:	20001458 	.word	0x20001458

0800b9fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b08a      	sub	sp, #40	; 0x28
 800ba00:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ba02:	2300      	movs	r3, #0
 800ba04:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ba06:	f000 fb07 	bl	800c018 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ba0a:	4b1c      	ldr	r3, [pc, #112]	; (800ba7c <xTimerCreateTimerTask+0x80>)
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d021      	beq.n	800ba56 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ba12:	2300      	movs	r3, #0
 800ba14:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ba16:	2300      	movs	r3, #0
 800ba18:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ba1a:	1d3a      	adds	r2, r7, #4
 800ba1c:	f107 0108 	add.w	r1, r7, #8
 800ba20:	f107 030c 	add.w	r3, r7, #12
 800ba24:	4618      	mov	r0, r3
 800ba26:	f7fe fb31 	bl	800a08c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ba2a:	6879      	ldr	r1, [r7, #4]
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	68fa      	ldr	r2, [r7, #12]
 800ba30:	9202      	str	r2, [sp, #8]
 800ba32:	9301      	str	r3, [sp, #4]
 800ba34:	2302      	movs	r3, #2
 800ba36:	9300      	str	r3, [sp, #0]
 800ba38:	2300      	movs	r3, #0
 800ba3a:	460a      	mov	r2, r1
 800ba3c:	4910      	ldr	r1, [pc, #64]	; (800ba80 <xTimerCreateTimerTask+0x84>)
 800ba3e:	4811      	ldr	r0, [pc, #68]	; (800ba84 <xTimerCreateTimerTask+0x88>)
 800ba40:	f7ff f8de 	bl	800ac00 <xTaskCreateStatic>
 800ba44:	4603      	mov	r3, r0
 800ba46:	4a10      	ldr	r2, [pc, #64]	; (800ba88 <xTimerCreateTimerTask+0x8c>)
 800ba48:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ba4a:	4b0f      	ldr	r3, [pc, #60]	; (800ba88 <xTimerCreateTimerTask+0x8c>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d001      	beq.n	800ba56 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ba52:	2301      	movs	r3, #1
 800ba54:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d10a      	bne.n	800ba72 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ba5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba60:	f383 8811 	msr	BASEPRI, r3
 800ba64:	f3bf 8f6f 	isb	sy
 800ba68:	f3bf 8f4f 	dsb	sy
 800ba6c:	613b      	str	r3, [r7, #16]
}
 800ba6e:	bf00      	nop
 800ba70:	e7fe      	b.n	800ba70 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ba72:	697b      	ldr	r3, [r7, #20]
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	3718      	adds	r7, #24
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}
 800ba7c:	20001494 	.word	0x20001494
 800ba80:	0800e3e0 	.word	0x0800e3e0
 800ba84:	0800bbc1 	.word	0x0800bbc1
 800ba88:	20001498 	.word	0x20001498

0800ba8c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b08a      	sub	sp, #40	; 0x28
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	60f8      	str	r0, [r7, #12]
 800ba94:	60b9      	str	r1, [r7, #8]
 800ba96:	607a      	str	r2, [r7, #4]
 800ba98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d10a      	bne.n	800baba <xTimerGenericCommand+0x2e>
	__asm volatile
 800baa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa8:	f383 8811 	msr	BASEPRI, r3
 800baac:	f3bf 8f6f 	isb	sy
 800bab0:	f3bf 8f4f 	dsb	sy
 800bab4:	623b      	str	r3, [r7, #32]
}
 800bab6:	bf00      	nop
 800bab8:	e7fe      	b.n	800bab8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800baba:	4b1a      	ldr	r3, [pc, #104]	; (800bb24 <xTimerGenericCommand+0x98>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d02a      	beq.n	800bb18 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	2b05      	cmp	r3, #5
 800bad2:	dc18      	bgt.n	800bb06 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bad4:	f7ff feb2 	bl	800b83c <xTaskGetSchedulerState>
 800bad8:	4603      	mov	r3, r0
 800bada:	2b02      	cmp	r3, #2
 800badc:	d109      	bne.n	800baf2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bade:	4b11      	ldr	r3, [pc, #68]	; (800bb24 <xTimerGenericCommand+0x98>)
 800bae0:	6818      	ldr	r0, [r3, #0]
 800bae2:	f107 0110 	add.w	r1, r7, #16
 800bae6:	2300      	movs	r3, #0
 800bae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800baea:	f7fe fca1 	bl	800a430 <xQueueGenericSend>
 800baee:	6278      	str	r0, [r7, #36]	; 0x24
 800baf0:	e012      	b.n	800bb18 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800baf2:	4b0c      	ldr	r3, [pc, #48]	; (800bb24 <xTimerGenericCommand+0x98>)
 800baf4:	6818      	ldr	r0, [r3, #0]
 800baf6:	f107 0110 	add.w	r1, r7, #16
 800bafa:	2300      	movs	r3, #0
 800bafc:	2200      	movs	r2, #0
 800bafe:	f7fe fc97 	bl	800a430 <xQueueGenericSend>
 800bb02:	6278      	str	r0, [r7, #36]	; 0x24
 800bb04:	e008      	b.n	800bb18 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bb06:	4b07      	ldr	r3, [pc, #28]	; (800bb24 <xTimerGenericCommand+0x98>)
 800bb08:	6818      	ldr	r0, [r3, #0]
 800bb0a:	f107 0110 	add.w	r1, r7, #16
 800bb0e:	2300      	movs	r3, #0
 800bb10:	683a      	ldr	r2, [r7, #0]
 800bb12:	f7fe fd8b 	bl	800a62c <xQueueGenericSendFromISR>
 800bb16:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bb18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3728      	adds	r7, #40	; 0x28
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}
 800bb22:	bf00      	nop
 800bb24:	20001494 	.word	0x20001494

0800bb28 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b088      	sub	sp, #32
 800bb2c:	af02      	add	r7, sp, #8
 800bb2e:	6078      	str	r0, [r7, #4]
 800bb30:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb32:	4b22      	ldr	r3, [pc, #136]	; (800bbbc <prvProcessExpiredTimer+0x94>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	68db      	ldr	r3, [r3, #12]
 800bb38:	68db      	ldr	r3, [r3, #12]
 800bb3a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	3304      	adds	r3, #4
 800bb40:	4618      	mov	r0, r3
 800bb42:	f7fe fb47 	bl	800a1d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bb46:	697b      	ldr	r3, [r7, #20]
 800bb48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb4c:	f003 0304 	and.w	r3, r3, #4
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d022      	beq.n	800bb9a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bb54:	697b      	ldr	r3, [r7, #20]
 800bb56:	699a      	ldr	r2, [r3, #24]
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	18d1      	adds	r1, r2, r3
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	683a      	ldr	r2, [r7, #0]
 800bb60:	6978      	ldr	r0, [r7, #20]
 800bb62:	f000 f8d1 	bl	800bd08 <prvInsertTimerInActiveList>
 800bb66:	4603      	mov	r3, r0
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d01f      	beq.n	800bbac <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	9300      	str	r3, [sp, #0]
 800bb70:	2300      	movs	r3, #0
 800bb72:	687a      	ldr	r2, [r7, #4]
 800bb74:	2100      	movs	r1, #0
 800bb76:	6978      	ldr	r0, [r7, #20]
 800bb78:	f7ff ff88 	bl	800ba8c <xTimerGenericCommand>
 800bb7c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bb7e:	693b      	ldr	r3, [r7, #16]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d113      	bne.n	800bbac <prvProcessExpiredTimer+0x84>
	__asm volatile
 800bb84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb88:	f383 8811 	msr	BASEPRI, r3
 800bb8c:	f3bf 8f6f 	isb	sy
 800bb90:	f3bf 8f4f 	dsb	sy
 800bb94:	60fb      	str	r3, [r7, #12]
}
 800bb96:	bf00      	nop
 800bb98:	e7fe      	b.n	800bb98 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bba0:	f023 0301 	bic.w	r3, r3, #1
 800bba4:	b2da      	uxtb	r2, r3
 800bba6:	697b      	ldr	r3, [r7, #20]
 800bba8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bbac:	697b      	ldr	r3, [r7, #20]
 800bbae:	6a1b      	ldr	r3, [r3, #32]
 800bbb0:	6978      	ldr	r0, [r7, #20]
 800bbb2:	4798      	blx	r3
}
 800bbb4:	bf00      	nop
 800bbb6:	3718      	adds	r7, #24
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}
 800bbbc:	2000148c 	.word	0x2000148c

0800bbc0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b084      	sub	sp, #16
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bbc8:	f107 0308 	add.w	r3, r7, #8
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f000 f857 	bl	800bc80 <prvGetNextExpireTime>
 800bbd2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	4619      	mov	r1, r3
 800bbd8:	68f8      	ldr	r0, [r7, #12]
 800bbda:	f000 f803 	bl	800bbe4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bbde:	f000 f8d5 	bl	800bd8c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bbe2:	e7f1      	b.n	800bbc8 <prvTimerTask+0x8>

0800bbe4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b084      	sub	sp, #16
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
 800bbec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bbee:	f7ff fa43 	bl	800b078 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bbf2:	f107 0308 	add.w	r3, r7, #8
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f000 f866 	bl	800bcc8 <prvSampleTimeNow>
 800bbfc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d130      	bne.n	800bc66 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d10a      	bne.n	800bc20 <prvProcessTimerOrBlockTask+0x3c>
 800bc0a:	687a      	ldr	r2, [r7, #4]
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	429a      	cmp	r2, r3
 800bc10:	d806      	bhi.n	800bc20 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bc12:	f7ff fa3f 	bl	800b094 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bc16:	68f9      	ldr	r1, [r7, #12]
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f7ff ff85 	bl	800bb28 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bc1e:	e024      	b.n	800bc6a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d008      	beq.n	800bc38 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bc26:	4b13      	ldr	r3, [pc, #76]	; (800bc74 <prvProcessTimerOrBlockTask+0x90>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d101      	bne.n	800bc34 <prvProcessTimerOrBlockTask+0x50>
 800bc30:	2301      	movs	r3, #1
 800bc32:	e000      	b.n	800bc36 <prvProcessTimerOrBlockTask+0x52>
 800bc34:	2300      	movs	r3, #0
 800bc36:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bc38:	4b0f      	ldr	r3, [pc, #60]	; (800bc78 <prvProcessTimerOrBlockTask+0x94>)
 800bc3a:	6818      	ldr	r0, [r3, #0]
 800bc3c:	687a      	ldr	r2, [r7, #4]
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	1ad3      	subs	r3, r2, r3
 800bc42:	683a      	ldr	r2, [r7, #0]
 800bc44:	4619      	mov	r1, r3
 800bc46:	f7fe ffa7 	bl	800ab98 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bc4a:	f7ff fa23 	bl	800b094 <xTaskResumeAll>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d10a      	bne.n	800bc6a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bc54:	4b09      	ldr	r3, [pc, #36]	; (800bc7c <prvProcessTimerOrBlockTask+0x98>)
 800bc56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc5a:	601a      	str	r2, [r3, #0]
 800bc5c:	f3bf 8f4f 	dsb	sy
 800bc60:	f3bf 8f6f 	isb	sy
}
 800bc64:	e001      	b.n	800bc6a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bc66:	f7ff fa15 	bl	800b094 <xTaskResumeAll>
}
 800bc6a:	bf00      	nop
 800bc6c:	3710      	adds	r7, #16
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}
 800bc72:	bf00      	nop
 800bc74:	20001490 	.word	0x20001490
 800bc78:	20001494 	.word	0x20001494
 800bc7c:	e000ed04 	.word	0xe000ed04

0800bc80 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bc80:	b480      	push	{r7}
 800bc82:	b085      	sub	sp, #20
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bc88:	4b0e      	ldr	r3, [pc, #56]	; (800bcc4 <prvGetNextExpireTime+0x44>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d101      	bne.n	800bc96 <prvGetNextExpireTime+0x16>
 800bc92:	2201      	movs	r2, #1
 800bc94:	e000      	b.n	800bc98 <prvGetNextExpireTime+0x18>
 800bc96:	2200      	movs	r2, #0
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d105      	bne.n	800bcb0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bca4:	4b07      	ldr	r3, [pc, #28]	; (800bcc4 <prvGetNextExpireTime+0x44>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	68db      	ldr	r3, [r3, #12]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	60fb      	str	r3, [r7, #12]
 800bcae:	e001      	b.n	800bcb4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3714      	adds	r7, #20
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc0:	4770      	bx	lr
 800bcc2:	bf00      	nop
 800bcc4:	2000148c 	.word	0x2000148c

0800bcc8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b084      	sub	sp, #16
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bcd0:	f7ff fa7e 	bl	800b1d0 <xTaskGetTickCount>
 800bcd4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bcd6:	4b0b      	ldr	r3, [pc, #44]	; (800bd04 <prvSampleTimeNow+0x3c>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	68fa      	ldr	r2, [r7, #12]
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d205      	bcs.n	800bcec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bce0:	f000 f936 	bl	800bf50 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2201      	movs	r2, #1
 800bce8:	601a      	str	r2, [r3, #0]
 800bcea:	e002      	b.n	800bcf2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2200      	movs	r2, #0
 800bcf0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bcf2:	4a04      	ldr	r2, [pc, #16]	; (800bd04 <prvSampleTimeNow+0x3c>)
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3710      	adds	r7, #16
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}
 800bd02:	bf00      	nop
 800bd04:	2000149c 	.word	0x2000149c

0800bd08 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b086      	sub	sp, #24
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	60f8      	str	r0, [r7, #12]
 800bd10:	60b9      	str	r1, [r7, #8]
 800bd12:	607a      	str	r2, [r7, #4]
 800bd14:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bd16:	2300      	movs	r3, #0
 800bd18:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	68ba      	ldr	r2, [r7, #8]
 800bd1e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	68fa      	ldr	r2, [r7, #12]
 800bd24:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bd26:	68ba      	ldr	r2, [r7, #8]
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	429a      	cmp	r2, r3
 800bd2c:	d812      	bhi.n	800bd54 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd2e:	687a      	ldr	r2, [r7, #4]
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	1ad2      	subs	r2, r2, r3
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	699b      	ldr	r3, [r3, #24]
 800bd38:	429a      	cmp	r2, r3
 800bd3a:	d302      	bcc.n	800bd42 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bd3c:	2301      	movs	r3, #1
 800bd3e:	617b      	str	r3, [r7, #20]
 800bd40:	e01b      	b.n	800bd7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bd42:	4b10      	ldr	r3, [pc, #64]	; (800bd84 <prvInsertTimerInActiveList+0x7c>)
 800bd44:	681a      	ldr	r2, [r3, #0]
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	3304      	adds	r3, #4
 800bd4a:	4619      	mov	r1, r3
 800bd4c:	4610      	mov	r0, r2
 800bd4e:	f7fe fa08 	bl	800a162 <vListInsert>
 800bd52:	e012      	b.n	800bd7a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bd54:	687a      	ldr	r2, [r7, #4]
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	429a      	cmp	r2, r3
 800bd5a:	d206      	bcs.n	800bd6a <prvInsertTimerInActiveList+0x62>
 800bd5c:	68ba      	ldr	r2, [r7, #8]
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	429a      	cmp	r2, r3
 800bd62:	d302      	bcc.n	800bd6a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bd64:	2301      	movs	r3, #1
 800bd66:	617b      	str	r3, [r7, #20]
 800bd68:	e007      	b.n	800bd7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bd6a:	4b07      	ldr	r3, [pc, #28]	; (800bd88 <prvInsertTimerInActiveList+0x80>)
 800bd6c:	681a      	ldr	r2, [r3, #0]
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	3304      	adds	r3, #4
 800bd72:	4619      	mov	r1, r3
 800bd74:	4610      	mov	r0, r2
 800bd76:	f7fe f9f4 	bl	800a162 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bd7a:	697b      	ldr	r3, [r7, #20]
}
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	3718      	adds	r7, #24
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}
 800bd84:	20001490 	.word	0x20001490
 800bd88:	2000148c 	.word	0x2000148c

0800bd8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b08e      	sub	sp, #56	; 0x38
 800bd90:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bd92:	e0ca      	b.n	800bf2a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	da18      	bge.n	800bdcc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bd9a:	1d3b      	adds	r3, r7, #4
 800bd9c:	3304      	adds	r3, #4
 800bd9e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bda0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d10a      	bne.n	800bdbc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bda6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdaa:	f383 8811 	msr	BASEPRI, r3
 800bdae:	f3bf 8f6f 	isb	sy
 800bdb2:	f3bf 8f4f 	dsb	sy
 800bdb6:	61fb      	str	r3, [r7, #28]
}
 800bdb8:	bf00      	nop
 800bdba:	e7fe      	b.n	800bdba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bdbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bdc2:	6850      	ldr	r0, [r2, #4]
 800bdc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bdc6:	6892      	ldr	r2, [r2, #8]
 800bdc8:	4611      	mov	r1, r2
 800bdca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	f2c0 80ab 	blt.w	800bf2a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bdd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdda:	695b      	ldr	r3, [r3, #20]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d004      	beq.n	800bdea <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bde0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bde2:	3304      	adds	r3, #4
 800bde4:	4618      	mov	r0, r3
 800bde6:	f7fe f9f5 	bl	800a1d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bdea:	463b      	mov	r3, r7
 800bdec:	4618      	mov	r0, r3
 800bdee:	f7ff ff6b 	bl	800bcc8 <prvSampleTimeNow>
 800bdf2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2b09      	cmp	r3, #9
 800bdf8:	f200 8096 	bhi.w	800bf28 <prvProcessReceivedCommands+0x19c>
 800bdfc:	a201      	add	r2, pc, #4	; (adr r2, 800be04 <prvProcessReceivedCommands+0x78>)
 800bdfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be02:	bf00      	nop
 800be04:	0800be2d 	.word	0x0800be2d
 800be08:	0800be2d 	.word	0x0800be2d
 800be0c:	0800be2d 	.word	0x0800be2d
 800be10:	0800bea1 	.word	0x0800bea1
 800be14:	0800beb5 	.word	0x0800beb5
 800be18:	0800beff 	.word	0x0800beff
 800be1c:	0800be2d 	.word	0x0800be2d
 800be20:	0800be2d 	.word	0x0800be2d
 800be24:	0800bea1 	.word	0x0800bea1
 800be28:	0800beb5 	.word	0x0800beb5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800be2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be32:	f043 0301 	orr.w	r3, r3, #1
 800be36:	b2da      	uxtb	r2, r3
 800be38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800be3e:	68ba      	ldr	r2, [r7, #8]
 800be40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be42:	699b      	ldr	r3, [r3, #24]
 800be44:	18d1      	adds	r1, r2, r3
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be4c:	f7ff ff5c 	bl	800bd08 <prvInsertTimerInActiveList>
 800be50:	4603      	mov	r3, r0
 800be52:	2b00      	cmp	r3, #0
 800be54:	d069      	beq.n	800bf2a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be58:	6a1b      	ldr	r3, [r3, #32]
 800be5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be5c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be64:	f003 0304 	and.w	r3, r3, #4
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d05e      	beq.n	800bf2a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800be6c:	68ba      	ldr	r2, [r7, #8]
 800be6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be70:	699b      	ldr	r3, [r3, #24]
 800be72:	441a      	add	r2, r3
 800be74:	2300      	movs	r3, #0
 800be76:	9300      	str	r3, [sp, #0]
 800be78:	2300      	movs	r3, #0
 800be7a:	2100      	movs	r1, #0
 800be7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be7e:	f7ff fe05 	bl	800ba8c <xTimerGenericCommand>
 800be82:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800be84:	6a3b      	ldr	r3, [r7, #32]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d14f      	bne.n	800bf2a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800be8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be8e:	f383 8811 	msr	BASEPRI, r3
 800be92:	f3bf 8f6f 	isb	sy
 800be96:	f3bf 8f4f 	dsb	sy
 800be9a:	61bb      	str	r3, [r7, #24]
}
 800be9c:	bf00      	nop
 800be9e:	e7fe      	b.n	800be9e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bea6:	f023 0301 	bic.w	r3, r3, #1
 800beaa:	b2da      	uxtb	r2, r3
 800beac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800beb2:	e03a      	b.n	800bf2a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800beb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800beba:	f043 0301 	orr.w	r3, r3, #1
 800bebe:	b2da      	uxtb	r2, r3
 800bec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bec2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bec6:	68ba      	ldr	r2, [r7, #8]
 800bec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800becc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bece:	699b      	ldr	r3, [r3, #24]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d10a      	bne.n	800beea <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed8:	f383 8811 	msr	BASEPRI, r3
 800bedc:	f3bf 8f6f 	isb	sy
 800bee0:	f3bf 8f4f 	dsb	sy
 800bee4:	617b      	str	r3, [r7, #20]
}
 800bee6:	bf00      	nop
 800bee8:	e7fe      	b.n	800bee8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800beea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beec:	699a      	ldr	r2, [r3, #24]
 800beee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef0:	18d1      	adds	r1, r2, r3
 800bef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bef6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bef8:	f7ff ff06 	bl	800bd08 <prvInsertTimerInActiveList>
					break;
 800befc:	e015      	b.n	800bf2a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800befe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf04:	f003 0302 	and.w	r3, r3, #2
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d103      	bne.n	800bf14 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bf0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf0e:	f000 fbdf 	bl	800c6d0 <vPortFree>
 800bf12:	e00a      	b.n	800bf2a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bf14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf1a:	f023 0301 	bic.w	r3, r3, #1
 800bf1e:	b2da      	uxtb	r2, r3
 800bf20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bf26:	e000      	b.n	800bf2a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800bf28:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bf2a:	4b08      	ldr	r3, [pc, #32]	; (800bf4c <prvProcessReceivedCommands+0x1c0>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	1d39      	adds	r1, r7, #4
 800bf30:	2200      	movs	r2, #0
 800bf32:	4618      	mov	r0, r3
 800bf34:	f7fe fc16 	bl	800a764 <xQueueReceive>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	f47f af2a 	bne.w	800bd94 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bf40:	bf00      	nop
 800bf42:	bf00      	nop
 800bf44:	3730      	adds	r7, #48	; 0x30
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}
 800bf4a:	bf00      	nop
 800bf4c:	20001494 	.word	0x20001494

0800bf50 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b088      	sub	sp, #32
 800bf54:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bf56:	e048      	b.n	800bfea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf58:	4b2d      	ldr	r3, [pc, #180]	; (800c010 <prvSwitchTimerLists+0xc0>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	68db      	ldr	r3, [r3, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf62:	4b2b      	ldr	r3, [pc, #172]	; (800c010 <prvSwitchTimerLists+0xc0>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	68db      	ldr	r3, [r3, #12]
 800bf68:	68db      	ldr	r3, [r3, #12]
 800bf6a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	3304      	adds	r3, #4
 800bf70:	4618      	mov	r0, r3
 800bf72:	f7fe f92f 	bl	800a1d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	6a1b      	ldr	r3, [r3, #32]
 800bf7a:	68f8      	ldr	r0, [r7, #12]
 800bf7c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf84:	f003 0304 	and.w	r3, r3, #4
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d02e      	beq.n	800bfea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	699b      	ldr	r3, [r3, #24]
 800bf90:	693a      	ldr	r2, [r7, #16]
 800bf92:	4413      	add	r3, r2
 800bf94:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bf96:	68ba      	ldr	r2, [r7, #8]
 800bf98:	693b      	ldr	r3, [r7, #16]
 800bf9a:	429a      	cmp	r2, r3
 800bf9c:	d90e      	bls.n	800bfbc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	68ba      	ldr	r2, [r7, #8]
 800bfa2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	68fa      	ldr	r2, [r7, #12]
 800bfa8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bfaa:	4b19      	ldr	r3, [pc, #100]	; (800c010 <prvSwitchTimerLists+0xc0>)
 800bfac:	681a      	ldr	r2, [r3, #0]
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	3304      	adds	r3, #4
 800bfb2:	4619      	mov	r1, r3
 800bfb4:	4610      	mov	r0, r2
 800bfb6:	f7fe f8d4 	bl	800a162 <vListInsert>
 800bfba:	e016      	b.n	800bfea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	9300      	str	r3, [sp, #0]
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	693a      	ldr	r2, [r7, #16]
 800bfc4:	2100      	movs	r1, #0
 800bfc6:	68f8      	ldr	r0, [r7, #12]
 800bfc8:	f7ff fd60 	bl	800ba8c <xTimerGenericCommand>
 800bfcc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d10a      	bne.n	800bfea <prvSwitchTimerLists+0x9a>
	__asm volatile
 800bfd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd8:	f383 8811 	msr	BASEPRI, r3
 800bfdc:	f3bf 8f6f 	isb	sy
 800bfe0:	f3bf 8f4f 	dsb	sy
 800bfe4:	603b      	str	r3, [r7, #0]
}
 800bfe6:	bf00      	nop
 800bfe8:	e7fe      	b.n	800bfe8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bfea:	4b09      	ldr	r3, [pc, #36]	; (800c010 <prvSwitchTimerLists+0xc0>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d1b1      	bne.n	800bf58 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bff4:	4b06      	ldr	r3, [pc, #24]	; (800c010 <prvSwitchTimerLists+0xc0>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bffa:	4b06      	ldr	r3, [pc, #24]	; (800c014 <prvSwitchTimerLists+0xc4>)
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	4a04      	ldr	r2, [pc, #16]	; (800c010 <prvSwitchTimerLists+0xc0>)
 800c000:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c002:	4a04      	ldr	r2, [pc, #16]	; (800c014 <prvSwitchTimerLists+0xc4>)
 800c004:	697b      	ldr	r3, [r7, #20]
 800c006:	6013      	str	r3, [r2, #0]
}
 800c008:	bf00      	nop
 800c00a:	3718      	adds	r7, #24
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}
 800c010:	2000148c 	.word	0x2000148c
 800c014:	20001490 	.word	0x20001490

0800c018 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b082      	sub	sp, #8
 800c01c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c01e:	f000 f969 	bl	800c2f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c022:	4b15      	ldr	r3, [pc, #84]	; (800c078 <prvCheckForValidListAndQueue+0x60>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d120      	bne.n	800c06c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c02a:	4814      	ldr	r0, [pc, #80]	; (800c07c <prvCheckForValidListAndQueue+0x64>)
 800c02c:	f7fe f848 	bl	800a0c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c030:	4813      	ldr	r0, [pc, #76]	; (800c080 <prvCheckForValidListAndQueue+0x68>)
 800c032:	f7fe f845 	bl	800a0c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c036:	4b13      	ldr	r3, [pc, #76]	; (800c084 <prvCheckForValidListAndQueue+0x6c>)
 800c038:	4a10      	ldr	r2, [pc, #64]	; (800c07c <prvCheckForValidListAndQueue+0x64>)
 800c03a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c03c:	4b12      	ldr	r3, [pc, #72]	; (800c088 <prvCheckForValidListAndQueue+0x70>)
 800c03e:	4a10      	ldr	r2, [pc, #64]	; (800c080 <prvCheckForValidListAndQueue+0x68>)
 800c040:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c042:	2300      	movs	r3, #0
 800c044:	9300      	str	r3, [sp, #0]
 800c046:	4b11      	ldr	r3, [pc, #68]	; (800c08c <prvCheckForValidListAndQueue+0x74>)
 800c048:	4a11      	ldr	r2, [pc, #68]	; (800c090 <prvCheckForValidListAndQueue+0x78>)
 800c04a:	2110      	movs	r1, #16
 800c04c:	200a      	movs	r0, #10
 800c04e:	f7fe f953 	bl	800a2f8 <xQueueGenericCreateStatic>
 800c052:	4603      	mov	r3, r0
 800c054:	4a08      	ldr	r2, [pc, #32]	; (800c078 <prvCheckForValidListAndQueue+0x60>)
 800c056:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c058:	4b07      	ldr	r3, [pc, #28]	; (800c078 <prvCheckForValidListAndQueue+0x60>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d005      	beq.n	800c06c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c060:	4b05      	ldr	r3, [pc, #20]	; (800c078 <prvCheckForValidListAndQueue+0x60>)
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	490b      	ldr	r1, [pc, #44]	; (800c094 <prvCheckForValidListAndQueue+0x7c>)
 800c066:	4618      	mov	r0, r3
 800c068:	f7fe fd6c 	bl	800ab44 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c06c:	f000 f972 	bl	800c354 <vPortExitCritical>
}
 800c070:	bf00      	nop
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}
 800c076:	bf00      	nop
 800c078:	20001494 	.word	0x20001494
 800c07c:	20001464 	.word	0x20001464
 800c080:	20001478 	.word	0x20001478
 800c084:	2000148c 	.word	0x2000148c
 800c088:	20001490 	.word	0x20001490
 800c08c:	20001540 	.word	0x20001540
 800c090:	200014a0 	.word	0x200014a0
 800c094:	0800e3e8 	.word	0x0800e3e8

0800c098 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c098:	b480      	push	{r7}
 800c09a:	b085      	sub	sp, #20
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	60f8      	str	r0, [r7, #12]
 800c0a0:	60b9      	str	r1, [r7, #8]
 800c0a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	3b04      	subs	r3, #4
 800c0a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c0b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	3b04      	subs	r3, #4
 800c0b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c0b8:	68bb      	ldr	r3, [r7, #8]
 800c0ba:	f023 0201 	bic.w	r2, r3, #1
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	3b04      	subs	r3, #4
 800c0c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c0c8:	4a0c      	ldr	r2, [pc, #48]	; (800c0fc <pxPortInitialiseStack+0x64>)
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	3b14      	subs	r3, #20
 800c0d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c0d4:	687a      	ldr	r2, [r7, #4]
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	3b04      	subs	r3, #4
 800c0de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	f06f 0202 	mvn.w	r2, #2
 800c0e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	3b20      	subs	r3, #32
 800c0ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	3714      	adds	r7, #20
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fa:	4770      	bx	lr
 800c0fc:	0800c101 	.word	0x0800c101

0800c100 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c100:	b480      	push	{r7}
 800c102:	b085      	sub	sp, #20
 800c104:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c106:	2300      	movs	r3, #0
 800c108:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c10a:	4b12      	ldr	r3, [pc, #72]	; (800c154 <prvTaskExitError+0x54>)
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c112:	d00a      	beq.n	800c12a <prvTaskExitError+0x2a>
	__asm volatile
 800c114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c118:	f383 8811 	msr	BASEPRI, r3
 800c11c:	f3bf 8f6f 	isb	sy
 800c120:	f3bf 8f4f 	dsb	sy
 800c124:	60fb      	str	r3, [r7, #12]
}
 800c126:	bf00      	nop
 800c128:	e7fe      	b.n	800c128 <prvTaskExitError+0x28>
	__asm volatile
 800c12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c12e:	f383 8811 	msr	BASEPRI, r3
 800c132:	f3bf 8f6f 	isb	sy
 800c136:	f3bf 8f4f 	dsb	sy
 800c13a:	60bb      	str	r3, [r7, #8]
}
 800c13c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c13e:	bf00      	nop
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2b00      	cmp	r3, #0
 800c144:	d0fc      	beq.n	800c140 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c146:	bf00      	nop
 800c148:	bf00      	nop
 800c14a:	3714      	adds	r7, #20
 800c14c:	46bd      	mov	sp, r7
 800c14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c152:	4770      	bx	lr
 800c154:	20000018 	.word	0x20000018
	...

0800c160 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c160:	4b07      	ldr	r3, [pc, #28]	; (800c180 <pxCurrentTCBConst2>)
 800c162:	6819      	ldr	r1, [r3, #0]
 800c164:	6808      	ldr	r0, [r1, #0]
 800c166:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c16a:	f380 8809 	msr	PSP, r0
 800c16e:	f3bf 8f6f 	isb	sy
 800c172:	f04f 0000 	mov.w	r0, #0
 800c176:	f380 8811 	msr	BASEPRI, r0
 800c17a:	4770      	bx	lr
 800c17c:	f3af 8000 	nop.w

0800c180 <pxCurrentTCBConst2>:
 800c180:	20000f64 	.word	0x20000f64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c184:	bf00      	nop
 800c186:	bf00      	nop

0800c188 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c188:	4808      	ldr	r0, [pc, #32]	; (800c1ac <prvPortStartFirstTask+0x24>)
 800c18a:	6800      	ldr	r0, [r0, #0]
 800c18c:	6800      	ldr	r0, [r0, #0]
 800c18e:	f380 8808 	msr	MSP, r0
 800c192:	f04f 0000 	mov.w	r0, #0
 800c196:	f380 8814 	msr	CONTROL, r0
 800c19a:	b662      	cpsie	i
 800c19c:	b661      	cpsie	f
 800c19e:	f3bf 8f4f 	dsb	sy
 800c1a2:	f3bf 8f6f 	isb	sy
 800c1a6:	df00      	svc	0
 800c1a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c1aa:	bf00      	nop
 800c1ac:	e000ed08 	.word	0xe000ed08

0800c1b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b086      	sub	sp, #24
 800c1b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c1b6:	4b46      	ldr	r3, [pc, #280]	; (800c2d0 <xPortStartScheduler+0x120>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	4a46      	ldr	r2, [pc, #280]	; (800c2d4 <xPortStartScheduler+0x124>)
 800c1bc:	4293      	cmp	r3, r2
 800c1be:	d10a      	bne.n	800c1d6 <xPortStartScheduler+0x26>
	__asm volatile
 800c1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c4:	f383 8811 	msr	BASEPRI, r3
 800c1c8:	f3bf 8f6f 	isb	sy
 800c1cc:	f3bf 8f4f 	dsb	sy
 800c1d0:	613b      	str	r3, [r7, #16]
}
 800c1d2:	bf00      	nop
 800c1d4:	e7fe      	b.n	800c1d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c1d6:	4b3e      	ldr	r3, [pc, #248]	; (800c2d0 <xPortStartScheduler+0x120>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	4a3f      	ldr	r2, [pc, #252]	; (800c2d8 <xPortStartScheduler+0x128>)
 800c1dc:	4293      	cmp	r3, r2
 800c1de:	d10a      	bne.n	800c1f6 <xPortStartScheduler+0x46>
	__asm volatile
 800c1e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e4:	f383 8811 	msr	BASEPRI, r3
 800c1e8:	f3bf 8f6f 	isb	sy
 800c1ec:	f3bf 8f4f 	dsb	sy
 800c1f0:	60fb      	str	r3, [r7, #12]
}
 800c1f2:	bf00      	nop
 800c1f4:	e7fe      	b.n	800c1f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c1f6:	4b39      	ldr	r3, [pc, #228]	; (800c2dc <xPortStartScheduler+0x12c>)
 800c1f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c1fa:	697b      	ldr	r3, [r7, #20]
 800c1fc:	781b      	ldrb	r3, [r3, #0]
 800c1fe:	b2db      	uxtb	r3, r3
 800c200:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	22ff      	movs	r2, #255	; 0xff
 800c206:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	781b      	ldrb	r3, [r3, #0]
 800c20c:	b2db      	uxtb	r3, r3
 800c20e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c210:	78fb      	ldrb	r3, [r7, #3]
 800c212:	b2db      	uxtb	r3, r3
 800c214:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c218:	b2da      	uxtb	r2, r3
 800c21a:	4b31      	ldr	r3, [pc, #196]	; (800c2e0 <xPortStartScheduler+0x130>)
 800c21c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c21e:	4b31      	ldr	r3, [pc, #196]	; (800c2e4 <xPortStartScheduler+0x134>)
 800c220:	2207      	movs	r2, #7
 800c222:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c224:	e009      	b.n	800c23a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c226:	4b2f      	ldr	r3, [pc, #188]	; (800c2e4 <xPortStartScheduler+0x134>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	3b01      	subs	r3, #1
 800c22c:	4a2d      	ldr	r2, [pc, #180]	; (800c2e4 <xPortStartScheduler+0x134>)
 800c22e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c230:	78fb      	ldrb	r3, [r7, #3]
 800c232:	b2db      	uxtb	r3, r3
 800c234:	005b      	lsls	r3, r3, #1
 800c236:	b2db      	uxtb	r3, r3
 800c238:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c23a:	78fb      	ldrb	r3, [r7, #3]
 800c23c:	b2db      	uxtb	r3, r3
 800c23e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c242:	2b80      	cmp	r3, #128	; 0x80
 800c244:	d0ef      	beq.n	800c226 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c246:	4b27      	ldr	r3, [pc, #156]	; (800c2e4 <xPortStartScheduler+0x134>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	f1c3 0307 	rsb	r3, r3, #7
 800c24e:	2b04      	cmp	r3, #4
 800c250:	d00a      	beq.n	800c268 <xPortStartScheduler+0xb8>
	__asm volatile
 800c252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c256:	f383 8811 	msr	BASEPRI, r3
 800c25a:	f3bf 8f6f 	isb	sy
 800c25e:	f3bf 8f4f 	dsb	sy
 800c262:	60bb      	str	r3, [r7, #8]
}
 800c264:	bf00      	nop
 800c266:	e7fe      	b.n	800c266 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c268:	4b1e      	ldr	r3, [pc, #120]	; (800c2e4 <xPortStartScheduler+0x134>)
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	021b      	lsls	r3, r3, #8
 800c26e:	4a1d      	ldr	r2, [pc, #116]	; (800c2e4 <xPortStartScheduler+0x134>)
 800c270:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c272:	4b1c      	ldr	r3, [pc, #112]	; (800c2e4 <xPortStartScheduler+0x134>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c27a:	4a1a      	ldr	r2, [pc, #104]	; (800c2e4 <xPortStartScheduler+0x134>)
 800c27c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	b2da      	uxtb	r2, r3
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c286:	4b18      	ldr	r3, [pc, #96]	; (800c2e8 <xPortStartScheduler+0x138>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	4a17      	ldr	r2, [pc, #92]	; (800c2e8 <xPortStartScheduler+0x138>)
 800c28c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c290:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c292:	4b15      	ldr	r3, [pc, #84]	; (800c2e8 <xPortStartScheduler+0x138>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	4a14      	ldr	r2, [pc, #80]	; (800c2e8 <xPortStartScheduler+0x138>)
 800c298:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c29c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c29e:	f000 f8dd 	bl	800c45c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c2a2:	4b12      	ldr	r3, [pc, #72]	; (800c2ec <xPortStartScheduler+0x13c>)
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c2a8:	f000 f8fc 	bl	800c4a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c2ac:	4b10      	ldr	r3, [pc, #64]	; (800c2f0 <xPortStartScheduler+0x140>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	4a0f      	ldr	r2, [pc, #60]	; (800c2f0 <xPortStartScheduler+0x140>)
 800c2b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c2b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c2b8:	f7ff ff66 	bl	800c188 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c2bc:	f7ff f852 	bl	800b364 <vTaskSwitchContext>
	prvTaskExitError();
 800c2c0:	f7ff ff1e 	bl	800c100 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c2c4:	2300      	movs	r3, #0
}
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	3718      	adds	r7, #24
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}
 800c2ce:	bf00      	nop
 800c2d0:	e000ed00 	.word	0xe000ed00
 800c2d4:	410fc271 	.word	0x410fc271
 800c2d8:	410fc270 	.word	0x410fc270
 800c2dc:	e000e400 	.word	0xe000e400
 800c2e0:	20001590 	.word	0x20001590
 800c2e4:	20001594 	.word	0x20001594
 800c2e8:	e000ed20 	.word	0xe000ed20
 800c2ec:	20000018 	.word	0x20000018
 800c2f0:	e000ef34 	.word	0xe000ef34

0800c2f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c2f4:	b480      	push	{r7}
 800c2f6:	b083      	sub	sp, #12
 800c2f8:	af00      	add	r7, sp, #0
	__asm volatile
 800c2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2fe:	f383 8811 	msr	BASEPRI, r3
 800c302:	f3bf 8f6f 	isb	sy
 800c306:	f3bf 8f4f 	dsb	sy
 800c30a:	607b      	str	r3, [r7, #4]
}
 800c30c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c30e:	4b0f      	ldr	r3, [pc, #60]	; (800c34c <vPortEnterCritical+0x58>)
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	3301      	adds	r3, #1
 800c314:	4a0d      	ldr	r2, [pc, #52]	; (800c34c <vPortEnterCritical+0x58>)
 800c316:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c318:	4b0c      	ldr	r3, [pc, #48]	; (800c34c <vPortEnterCritical+0x58>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	2b01      	cmp	r3, #1
 800c31e:	d10f      	bne.n	800c340 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c320:	4b0b      	ldr	r3, [pc, #44]	; (800c350 <vPortEnterCritical+0x5c>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	b2db      	uxtb	r3, r3
 800c326:	2b00      	cmp	r3, #0
 800c328:	d00a      	beq.n	800c340 <vPortEnterCritical+0x4c>
	__asm volatile
 800c32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c32e:	f383 8811 	msr	BASEPRI, r3
 800c332:	f3bf 8f6f 	isb	sy
 800c336:	f3bf 8f4f 	dsb	sy
 800c33a:	603b      	str	r3, [r7, #0]
}
 800c33c:	bf00      	nop
 800c33e:	e7fe      	b.n	800c33e <vPortEnterCritical+0x4a>
	}
}
 800c340:	bf00      	nop
 800c342:	370c      	adds	r7, #12
 800c344:	46bd      	mov	sp, r7
 800c346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34a:	4770      	bx	lr
 800c34c:	20000018 	.word	0x20000018
 800c350:	e000ed04 	.word	0xe000ed04

0800c354 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c354:	b480      	push	{r7}
 800c356:	b083      	sub	sp, #12
 800c358:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c35a:	4b12      	ldr	r3, [pc, #72]	; (800c3a4 <vPortExitCritical+0x50>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d10a      	bne.n	800c378 <vPortExitCritical+0x24>
	__asm volatile
 800c362:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c366:	f383 8811 	msr	BASEPRI, r3
 800c36a:	f3bf 8f6f 	isb	sy
 800c36e:	f3bf 8f4f 	dsb	sy
 800c372:	607b      	str	r3, [r7, #4]
}
 800c374:	bf00      	nop
 800c376:	e7fe      	b.n	800c376 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c378:	4b0a      	ldr	r3, [pc, #40]	; (800c3a4 <vPortExitCritical+0x50>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	3b01      	subs	r3, #1
 800c37e:	4a09      	ldr	r2, [pc, #36]	; (800c3a4 <vPortExitCritical+0x50>)
 800c380:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c382:	4b08      	ldr	r3, [pc, #32]	; (800c3a4 <vPortExitCritical+0x50>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d105      	bne.n	800c396 <vPortExitCritical+0x42>
 800c38a:	2300      	movs	r3, #0
 800c38c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	f383 8811 	msr	BASEPRI, r3
}
 800c394:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c396:	bf00      	nop
 800c398:	370c      	adds	r7, #12
 800c39a:	46bd      	mov	sp, r7
 800c39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a0:	4770      	bx	lr
 800c3a2:	bf00      	nop
 800c3a4:	20000018 	.word	0x20000018
	...

0800c3b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c3b0:	f3ef 8009 	mrs	r0, PSP
 800c3b4:	f3bf 8f6f 	isb	sy
 800c3b8:	4b15      	ldr	r3, [pc, #84]	; (800c410 <pxCurrentTCBConst>)
 800c3ba:	681a      	ldr	r2, [r3, #0]
 800c3bc:	f01e 0f10 	tst.w	lr, #16
 800c3c0:	bf08      	it	eq
 800c3c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c3c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3ca:	6010      	str	r0, [r2, #0]
 800c3cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c3d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c3d4:	f380 8811 	msr	BASEPRI, r0
 800c3d8:	f3bf 8f4f 	dsb	sy
 800c3dc:	f3bf 8f6f 	isb	sy
 800c3e0:	f7fe ffc0 	bl	800b364 <vTaskSwitchContext>
 800c3e4:	f04f 0000 	mov.w	r0, #0
 800c3e8:	f380 8811 	msr	BASEPRI, r0
 800c3ec:	bc09      	pop	{r0, r3}
 800c3ee:	6819      	ldr	r1, [r3, #0]
 800c3f0:	6808      	ldr	r0, [r1, #0]
 800c3f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3f6:	f01e 0f10 	tst.w	lr, #16
 800c3fa:	bf08      	it	eq
 800c3fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c400:	f380 8809 	msr	PSP, r0
 800c404:	f3bf 8f6f 	isb	sy
 800c408:	4770      	bx	lr
 800c40a:	bf00      	nop
 800c40c:	f3af 8000 	nop.w

0800c410 <pxCurrentTCBConst>:
 800c410:	20000f64 	.word	0x20000f64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c414:	bf00      	nop
 800c416:	bf00      	nop

0800c418 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b082      	sub	sp, #8
 800c41c:	af00      	add	r7, sp, #0
	__asm volatile
 800c41e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c422:	f383 8811 	msr	BASEPRI, r3
 800c426:	f3bf 8f6f 	isb	sy
 800c42a:	f3bf 8f4f 	dsb	sy
 800c42e:	607b      	str	r3, [r7, #4]
}
 800c430:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c432:	f7fe fedd 	bl	800b1f0 <xTaskIncrementTick>
 800c436:	4603      	mov	r3, r0
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d003      	beq.n	800c444 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c43c:	4b06      	ldr	r3, [pc, #24]	; (800c458 <xPortSysTickHandler+0x40>)
 800c43e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c442:	601a      	str	r2, [r3, #0]
 800c444:	2300      	movs	r3, #0
 800c446:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	f383 8811 	msr	BASEPRI, r3
}
 800c44e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c450:	bf00      	nop
 800c452:	3708      	adds	r7, #8
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}
 800c458:	e000ed04 	.word	0xe000ed04

0800c45c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c45c:	b480      	push	{r7}
 800c45e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c460:	4b0b      	ldr	r3, [pc, #44]	; (800c490 <vPortSetupTimerInterrupt+0x34>)
 800c462:	2200      	movs	r2, #0
 800c464:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c466:	4b0b      	ldr	r3, [pc, #44]	; (800c494 <vPortSetupTimerInterrupt+0x38>)
 800c468:	2200      	movs	r2, #0
 800c46a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c46c:	4b0a      	ldr	r3, [pc, #40]	; (800c498 <vPortSetupTimerInterrupt+0x3c>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	4a0a      	ldr	r2, [pc, #40]	; (800c49c <vPortSetupTimerInterrupt+0x40>)
 800c472:	fba2 2303 	umull	r2, r3, r2, r3
 800c476:	099b      	lsrs	r3, r3, #6
 800c478:	4a09      	ldr	r2, [pc, #36]	; (800c4a0 <vPortSetupTimerInterrupt+0x44>)
 800c47a:	3b01      	subs	r3, #1
 800c47c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c47e:	4b04      	ldr	r3, [pc, #16]	; (800c490 <vPortSetupTimerInterrupt+0x34>)
 800c480:	2207      	movs	r2, #7
 800c482:	601a      	str	r2, [r3, #0]
}
 800c484:	bf00      	nop
 800c486:	46bd      	mov	sp, r7
 800c488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48c:	4770      	bx	lr
 800c48e:	bf00      	nop
 800c490:	e000e010 	.word	0xe000e010
 800c494:	e000e018 	.word	0xe000e018
 800c498:	2000000c 	.word	0x2000000c
 800c49c:	10624dd3 	.word	0x10624dd3
 800c4a0:	e000e014 	.word	0xe000e014

0800c4a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c4a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c4b4 <vPortEnableVFP+0x10>
 800c4a8:	6801      	ldr	r1, [r0, #0]
 800c4aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c4ae:	6001      	str	r1, [r0, #0]
 800c4b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c4b2:	bf00      	nop
 800c4b4:	e000ed88 	.word	0xe000ed88

0800c4b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c4b8:	b480      	push	{r7}
 800c4ba:	b085      	sub	sp, #20
 800c4bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c4be:	f3ef 8305 	mrs	r3, IPSR
 800c4c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	2b0f      	cmp	r3, #15
 800c4c8:	d914      	bls.n	800c4f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c4ca:	4a17      	ldr	r2, [pc, #92]	; (800c528 <vPortValidateInterruptPriority+0x70>)
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	4413      	add	r3, r2
 800c4d0:	781b      	ldrb	r3, [r3, #0]
 800c4d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c4d4:	4b15      	ldr	r3, [pc, #84]	; (800c52c <vPortValidateInterruptPriority+0x74>)
 800c4d6:	781b      	ldrb	r3, [r3, #0]
 800c4d8:	7afa      	ldrb	r2, [r7, #11]
 800c4da:	429a      	cmp	r2, r3
 800c4dc:	d20a      	bcs.n	800c4f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c4de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e2:	f383 8811 	msr	BASEPRI, r3
 800c4e6:	f3bf 8f6f 	isb	sy
 800c4ea:	f3bf 8f4f 	dsb	sy
 800c4ee:	607b      	str	r3, [r7, #4]
}
 800c4f0:	bf00      	nop
 800c4f2:	e7fe      	b.n	800c4f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c4f4:	4b0e      	ldr	r3, [pc, #56]	; (800c530 <vPortValidateInterruptPriority+0x78>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c4fc:	4b0d      	ldr	r3, [pc, #52]	; (800c534 <vPortValidateInterruptPriority+0x7c>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	429a      	cmp	r2, r3
 800c502:	d90a      	bls.n	800c51a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c508:	f383 8811 	msr	BASEPRI, r3
 800c50c:	f3bf 8f6f 	isb	sy
 800c510:	f3bf 8f4f 	dsb	sy
 800c514:	603b      	str	r3, [r7, #0]
}
 800c516:	bf00      	nop
 800c518:	e7fe      	b.n	800c518 <vPortValidateInterruptPriority+0x60>
	}
 800c51a:	bf00      	nop
 800c51c:	3714      	adds	r7, #20
 800c51e:	46bd      	mov	sp, r7
 800c520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c524:	4770      	bx	lr
 800c526:	bf00      	nop
 800c528:	e000e3f0 	.word	0xe000e3f0
 800c52c:	20001590 	.word	0x20001590
 800c530:	e000ed0c 	.word	0xe000ed0c
 800c534:	20001594 	.word	0x20001594

0800c538 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b08a      	sub	sp, #40	; 0x28
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c540:	2300      	movs	r3, #0
 800c542:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c544:	f7fe fd98 	bl	800b078 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c548:	4b5b      	ldr	r3, [pc, #364]	; (800c6b8 <pvPortMalloc+0x180>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d101      	bne.n	800c554 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c550:	f000 f920 	bl	800c794 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c554:	4b59      	ldr	r3, [pc, #356]	; (800c6bc <pvPortMalloc+0x184>)
 800c556:	681a      	ldr	r2, [r3, #0]
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	4013      	ands	r3, r2
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	f040 8093 	bne.w	800c688 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d01d      	beq.n	800c5a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c568:	2208      	movs	r2, #8
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	4413      	add	r3, r2
 800c56e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f003 0307 	and.w	r3, r3, #7
 800c576:	2b00      	cmp	r3, #0
 800c578:	d014      	beq.n	800c5a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	f023 0307 	bic.w	r3, r3, #7
 800c580:	3308      	adds	r3, #8
 800c582:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f003 0307 	and.w	r3, r3, #7
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d00a      	beq.n	800c5a4 <pvPortMalloc+0x6c>
	__asm volatile
 800c58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c592:	f383 8811 	msr	BASEPRI, r3
 800c596:	f3bf 8f6f 	isb	sy
 800c59a:	f3bf 8f4f 	dsb	sy
 800c59e:	617b      	str	r3, [r7, #20]
}
 800c5a0:	bf00      	nop
 800c5a2:	e7fe      	b.n	800c5a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d06e      	beq.n	800c688 <pvPortMalloc+0x150>
 800c5aa:	4b45      	ldr	r3, [pc, #276]	; (800c6c0 <pvPortMalloc+0x188>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	687a      	ldr	r2, [r7, #4]
 800c5b0:	429a      	cmp	r2, r3
 800c5b2:	d869      	bhi.n	800c688 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c5b4:	4b43      	ldr	r3, [pc, #268]	; (800c6c4 <pvPortMalloc+0x18c>)
 800c5b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c5b8:	4b42      	ldr	r3, [pc, #264]	; (800c6c4 <pvPortMalloc+0x18c>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c5be:	e004      	b.n	800c5ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c5c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5cc:	685b      	ldr	r3, [r3, #4]
 800c5ce:	687a      	ldr	r2, [r7, #4]
 800c5d0:	429a      	cmp	r2, r3
 800c5d2:	d903      	bls.n	800c5dc <pvPortMalloc+0xa4>
 800c5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d1f1      	bne.n	800c5c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c5dc:	4b36      	ldr	r3, [pc, #216]	; (800c6b8 <pvPortMalloc+0x180>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5e2:	429a      	cmp	r2, r3
 800c5e4:	d050      	beq.n	800c688 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c5e6:	6a3b      	ldr	r3, [r7, #32]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	2208      	movs	r2, #8
 800c5ec:	4413      	add	r3, r2
 800c5ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5f2:	681a      	ldr	r2, [r3, #0]
 800c5f4:	6a3b      	ldr	r3, [r7, #32]
 800c5f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5fa:	685a      	ldr	r2, [r3, #4]
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	1ad2      	subs	r2, r2, r3
 800c600:	2308      	movs	r3, #8
 800c602:	005b      	lsls	r3, r3, #1
 800c604:	429a      	cmp	r2, r3
 800c606:	d91f      	bls.n	800c648 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	4413      	add	r3, r2
 800c60e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c610:	69bb      	ldr	r3, [r7, #24]
 800c612:	f003 0307 	and.w	r3, r3, #7
 800c616:	2b00      	cmp	r3, #0
 800c618:	d00a      	beq.n	800c630 <pvPortMalloc+0xf8>
	__asm volatile
 800c61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c61e:	f383 8811 	msr	BASEPRI, r3
 800c622:	f3bf 8f6f 	isb	sy
 800c626:	f3bf 8f4f 	dsb	sy
 800c62a:	613b      	str	r3, [r7, #16]
}
 800c62c:	bf00      	nop
 800c62e:	e7fe      	b.n	800c62e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c632:	685a      	ldr	r2, [r3, #4]
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	1ad2      	subs	r2, r2, r3
 800c638:	69bb      	ldr	r3, [r7, #24]
 800c63a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c63e:	687a      	ldr	r2, [r7, #4]
 800c640:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c642:	69b8      	ldr	r0, [r7, #24]
 800c644:	f000 f908 	bl	800c858 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c648:	4b1d      	ldr	r3, [pc, #116]	; (800c6c0 <pvPortMalloc+0x188>)
 800c64a:	681a      	ldr	r2, [r3, #0]
 800c64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c64e:	685b      	ldr	r3, [r3, #4]
 800c650:	1ad3      	subs	r3, r2, r3
 800c652:	4a1b      	ldr	r2, [pc, #108]	; (800c6c0 <pvPortMalloc+0x188>)
 800c654:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c656:	4b1a      	ldr	r3, [pc, #104]	; (800c6c0 <pvPortMalloc+0x188>)
 800c658:	681a      	ldr	r2, [r3, #0]
 800c65a:	4b1b      	ldr	r3, [pc, #108]	; (800c6c8 <pvPortMalloc+0x190>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	429a      	cmp	r2, r3
 800c660:	d203      	bcs.n	800c66a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c662:	4b17      	ldr	r3, [pc, #92]	; (800c6c0 <pvPortMalloc+0x188>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	4a18      	ldr	r2, [pc, #96]	; (800c6c8 <pvPortMalloc+0x190>)
 800c668:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c66c:	685a      	ldr	r2, [r3, #4]
 800c66e:	4b13      	ldr	r3, [pc, #76]	; (800c6bc <pvPortMalloc+0x184>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	431a      	orrs	r2, r3
 800c674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c676:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c67a:	2200      	movs	r2, #0
 800c67c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c67e:	4b13      	ldr	r3, [pc, #76]	; (800c6cc <pvPortMalloc+0x194>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	3301      	adds	r3, #1
 800c684:	4a11      	ldr	r2, [pc, #68]	; (800c6cc <pvPortMalloc+0x194>)
 800c686:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c688:	f7fe fd04 	bl	800b094 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c68c:	69fb      	ldr	r3, [r7, #28]
 800c68e:	f003 0307 	and.w	r3, r3, #7
 800c692:	2b00      	cmp	r3, #0
 800c694:	d00a      	beq.n	800c6ac <pvPortMalloc+0x174>
	__asm volatile
 800c696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c69a:	f383 8811 	msr	BASEPRI, r3
 800c69e:	f3bf 8f6f 	isb	sy
 800c6a2:	f3bf 8f4f 	dsb	sy
 800c6a6:	60fb      	str	r3, [r7, #12]
}
 800c6a8:	bf00      	nop
 800c6aa:	e7fe      	b.n	800c6aa <pvPortMalloc+0x172>
	return pvReturn;
 800c6ac:	69fb      	ldr	r3, [r7, #28]
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	3728      	adds	r7, #40	; 0x28
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}
 800c6b6:	bf00      	nop
 800c6b8:	200051a0 	.word	0x200051a0
 800c6bc:	200051b4 	.word	0x200051b4
 800c6c0:	200051a4 	.word	0x200051a4
 800c6c4:	20005198 	.word	0x20005198
 800c6c8:	200051a8 	.word	0x200051a8
 800c6cc:	200051ac 	.word	0x200051ac

0800c6d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b086      	sub	sp, #24
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d04d      	beq.n	800c77e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c6e2:	2308      	movs	r3, #8
 800c6e4:	425b      	negs	r3, r3
 800c6e6:	697a      	ldr	r2, [r7, #20]
 800c6e8:	4413      	add	r3, r2
 800c6ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c6ec:	697b      	ldr	r3, [r7, #20]
 800c6ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	685a      	ldr	r2, [r3, #4]
 800c6f4:	4b24      	ldr	r3, [pc, #144]	; (800c788 <vPortFree+0xb8>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	4013      	ands	r3, r2
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d10a      	bne.n	800c714 <vPortFree+0x44>
	__asm volatile
 800c6fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c702:	f383 8811 	msr	BASEPRI, r3
 800c706:	f3bf 8f6f 	isb	sy
 800c70a:	f3bf 8f4f 	dsb	sy
 800c70e:	60fb      	str	r3, [r7, #12]
}
 800c710:	bf00      	nop
 800c712:	e7fe      	b.n	800c712 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c714:	693b      	ldr	r3, [r7, #16]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d00a      	beq.n	800c732 <vPortFree+0x62>
	__asm volatile
 800c71c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c720:	f383 8811 	msr	BASEPRI, r3
 800c724:	f3bf 8f6f 	isb	sy
 800c728:	f3bf 8f4f 	dsb	sy
 800c72c:	60bb      	str	r3, [r7, #8]
}
 800c72e:	bf00      	nop
 800c730:	e7fe      	b.n	800c730 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	685a      	ldr	r2, [r3, #4]
 800c736:	4b14      	ldr	r3, [pc, #80]	; (800c788 <vPortFree+0xb8>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	4013      	ands	r3, r2
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d01e      	beq.n	800c77e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c740:	693b      	ldr	r3, [r7, #16]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d11a      	bne.n	800c77e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c748:	693b      	ldr	r3, [r7, #16]
 800c74a:	685a      	ldr	r2, [r3, #4]
 800c74c:	4b0e      	ldr	r3, [pc, #56]	; (800c788 <vPortFree+0xb8>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	43db      	mvns	r3, r3
 800c752:	401a      	ands	r2, r3
 800c754:	693b      	ldr	r3, [r7, #16]
 800c756:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c758:	f7fe fc8e 	bl	800b078 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c75c:	693b      	ldr	r3, [r7, #16]
 800c75e:	685a      	ldr	r2, [r3, #4]
 800c760:	4b0a      	ldr	r3, [pc, #40]	; (800c78c <vPortFree+0xbc>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	4413      	add	r3, r2
 800c766:	4a09      	ldr	r2, [pc, #36]	; (800c78c <vPortFree+0xbc>)
 800c768:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c76a:	6938      	ldr	r0, [r7, #16]
 800c76c:	f000 f874 	bl	800c858 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c770:	4b07      	ldr	r3, [pc, #28]	; (800c790 <vPortFree+0xc0>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	3301      	adds	r3, #1
 800c776:	4a06      	ldr	r2, [pc, #24]	; (800c790 <vPortFree+0xc0>)
 800c778:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c77a:	f7fe fc8b 	bl	800b094 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c77e:	bf00      	nop
 800c780:	3718      	adds	r7, #24
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}
 800c786:	bf00      	nop
 800c788:	200051b4 	.word	0x200051b4
 800c78c:	200051a4 	.word	0x200051a4
 800c790:	200051b0 	.word	0x200051b0

0800c794 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c794:	b480      	push	{r7}
 800c796:	b085      	sub	sp, #20
 800c798:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c79a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c79e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c7a0:	4b27      	ldr	r3, [pc, #156]	; (800c840 <prvHeapInit+0xac>)
 800c7a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	f003 0307 	and.w	r3, r3, #7
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d00c      	beq.n	800c7c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	3307      	adds	r3, #7
 800c7b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	f023 0307 	bic.w	r3, r3, #7
 800c7ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c7bc:	68ba      	ldr	r2, [r7, #8]
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	1ad3      	subs	r3, r2, r3
 800c7c2:	4a1f      	ldr	r2, [pc, #124]	; (800c840 <prvHeapInit+0xac>)
 800c7c4:	4413      	add	r3, r2
 800c7c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c7cc:	4a1d      	ldr	r2, [pc, #116]	; (800c844 <prvHeapInit+0xb0>)
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c7d2:	4b1c      	ldr	r3, [pc, #112]	; (800c844 <prvHeapInit+0xb0>)
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	68ba      	ldr	r2, [r7, #8]
 800c7dc:	4413      	add	r3, r2
 800c7de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c7e0:	2208      	movs	r2, #8
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	1a9b      	subs	r3, r3, r2
 800c7e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	f023 0307 	bic.w	r3, r3, #7
 800c7ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	4a15      	ldr	r2, [pc, #84]	; (800c848 <prvHeapInit+0xb4>)
 800c7f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c7f6:	4b14      	ldr	r3, [pc, #80]	; (800c848 <prvHeapInit+0xb4>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c7fe:	4b12      	ldr	r3, [pc, #72]	; (800c848 <prvHeapInit+0xb4>)
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	2200      	movs	r2, #0
 800c804:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	68fa      	ldr	r2, [r7, #12]
 800c80e:	1ad2      	subs	r2, r2, r3
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c814:	4b0c      	ldr	r3, [pc, #48]	; (800c848 <prvHeapInit+0xb4>)
 800c816:	681a      	ldr	r2, [r3, #0]
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	685b      	ldr	r3, [r3, #4]
 800c820:	4a0a      	ldr	r2, [pc, #40]	; (800c84c <prvHeapInit+0xb8>)
 800c822:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	685b      	ldr	r3, [r3, #4]
 800c828:	4a09      	ldr	r2, [pc, #36]	; (800c850 <prvHeapInit+0xbc>)
 800c82a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c82c:	4b09      	ldr	r3, [pc, #36]	; (800c854 <prvHeapInit+0xc0>)
 800c82e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c832:	601a      	str	r2, [r3, #0]
}
 800c834:	bf00      	nop
 800c836:	3714      	adds	r7, #20
 800c838:	46bd      	mov	sp, r7
 800c83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83e:	4770      	bx	lr
 800c840:	20001598 	.word	0x20001598
 800c844:	20005198 	.word	0x20005198
 800c848:	200051a0 	.word	0x200051a0
 800c84c:	200051a8 	.word	0x200051a8
 800c850:	200051a4 	.word	0x200051a4
 800c854:	200051b4 	.word	0x200051b4

0800c858 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c858:	b480      	push	{r7}
 800c85a:	b085      	sub	sp, #20
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c860:	4b28      	ldr	r3, [pc, #160]	; (800c904 <prvInsertBlockIntoFreeList+0xac>)
 800c862:	60fb      	str	r3, [r7, #12]
 800c864:	e002      	b.n	800c86c <prvInsertBlockIntoFreeList+0x14>
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	60fb      	str	r3, [r7, #12]
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	687a      	ldr	r2, [r7, #4]
 800c872:	429a      	cmp	r2, r3
 800c874:	d8f7      	bhi.n	800c866 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	685b      	ldr	r3, [r3, #4]
 800c87e:	68ba      	ldr	r2, [r7, #8]
 800c880:	4413      	add	r3, r2
 800c882:	687a      	ldr	r2, [r7, #4]
 800c884:	429a      	cmp	r2, r3
 800c886:	d108      	bne.n	800c89a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	685a      	ldr	r2, [r3, #4]
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	685b      	ldr	r3, [r3, #4]
 800c890:	441a      	add	r2, r3
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	685b      	ldr	r3, [r3, #4]
 800c8a2:	68ba      	ldr	r2, [r7, #8]
 800c8a4:	441a      	add	r2, r3
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	429a      	cmp	r2, r3
 800c8ac:	d118      	bne.n	800c8e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	681a      	ldr	r2, [r3, #0]
 800c8b2:	4b15      	ldr	r3, [pc, #84]	; (800c908 <prvInsertBlockIntoFreeList+0xb0>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	d00d      	beq.n	800c8d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	685a      	ldr	r2, [r3, #4]
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	685b      	ldr	r3, [r3, #4]
 800c8c4:	441a      	add	r2, r3
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	681a      	ldr	r2, [r3, #0]
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	601a      	str	r2, [r3, #0]
 800c8d4:	e008      	b.n	800c8e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c8d6:	4b0c      	ldr	r3, [pc, #48]	; (800c908 <prvInsertBlockIntoFreeList+0xb0>)
 800c8d8:	681a      	ldr	r2, [r3, #0]
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	601a      	str	r2, [r3, #0]
 800c8de:	e003      	b.n	800c8e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	681a      	ldr	r2, [r3, #0]
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c8e8:	68fa      	ldr	r2, [r7, #12]
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	429a      	cmp	r2, r3
 800c8ee:	d002      	beq.n	800c8f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	687a      	ldr	r2, [r7, #4]
 800c8f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c8f6:	bf00      	nop
 800c8f8:	3714      	adds	r7, #20
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c900:	4770      	bx	lr
 800c902:	bf00      	nop
 800c904:	20005198 	.word	0x20005198
 800c908:	200051a0 	.word	0x200051a0

0800c90c <sbrk_aligned>:
 800c90c:	b570      	push	{r4, r5, r6, lr}
 800c90e:	4e0e      	ldr	r6, [pc, #56]	; (800c948 <sbrk_aligned+0x3c>)
 800c910:	460c      	mov	r4, r1
 800c912:	6831      	ldr	r1, [r6, #0]
 800c914:	4605      	mov	r5, r0
 800c916:	b911      	cbnz	r1, 800c91e <sbrk_aligned+0x12>
 800c918:	f000 f8e0 	bl	800cadc <_sbrk_r>
 800c91c:	6030      	str	r0, [r6, #0]
 800c91e:	4621      	mov	r1, r4
 800c920:	4628      	mov	r0, r5
 800c922:	f000 f8db 	bl	800cadc <_sbrk_r>
 800c926:	1c43      	adds	r3, r0, #1
 800c928:	d00a      	beq.n	800c940 <sbrk_aligned+0x34>
 800c92a:	1cc4      	adds	r4, r0, #3
 800c92c:	f024 0403 	bic.w	r4, r4, #3
 800c930:	42a0      	cmp	r0, r4
 800c932:	d007      	beq.n	800c944 <sbrk_aligned+0x38>
 800c934:	1a21      	subs	r1, r4, r0
 800c936:	4628      	mov	r0, r5
 800c938:	f000 f8d0 	bl	800cadc <_sbrk_r>
 800c93c:	3001      	adds	r0, #1
 800c93e:	d101      	bne.n	800c944 <sbrk_aligned+0x38>
 800c940:	f04f 34ff 	mov.w	r4, #4294967295
 800c944:	4620      	mov	r0, r4
 800c946:	bd70      	pop	{r4, r5, r6, pc}
 800c948:	200051bc 	.word	0x200051bc

0800c94c <_malloc_r>:
 800c94c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c950:	1ccd      	adds	r5, r1, #3
 800c952:	f025 0503 	bic.w	r5, r5, #3
 800c956:	3508      	adds	r5, #8
 800c958:	2d0c      	cmp	r5, #12
 800c95a:	bf38      	it	cc
 800c95c:	250c      	movcc	r5, #12
 800c95e:	2d00      	cmp	r5, #0
 800c960:	4607      	mov	r7, r0
 800c962:	db01      	blt.n	800c968 <_malloc_r+0x1c>
 800c964:	42a9      	cmp	r1, r5
 800c966:	d905      	bls.n	800c974 <_malloc_r+0x28>
 800c968:	230c      	movs	r3, #12
 800c96a:	603b      	str	r3, [r7, #0]
 800c96c:	2600      	movs	r6, #0
 800c96e:	4630      	mov	r0, r6
 800c970:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c974:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ca48 <_malloc_r+0xfc>
 800c978:	f000 f868 	bl	800ca4c <__malloc_lock>
 800c97c:	f8d8 3000 	ldr.w	r3, [r8]
 800c980:	461c      	mov	r4, r3
 800c982:	bb5c      	cbnz	r4, 800c9dc <_malloc_r+0x90>
 800c984:	4629      	mov	r1, r5
 800c986:	4638      	mov	r0, r7
 800c988:	f7ff ffc0 	bl	800c90c <sbrk_aligned>
 800c98c:	1c43      	adds	r3, r0, #1
 800c98e:	4604      	mov	r4, r0
 800c990:	d155      	bne.n	800ca3e <_malloc_r+0xf2>
 800c992:	f8d8 4000 	ldr.w	r4, [r8]
 800c996:	4626      	mov	r6, r4
 800c998:	2e00      	cmp	r6, #0
 800c99a:	d145      	bne.n	800ca28 <_malloc_r+0xdc>
 800c99c:	2c00      	cmp	r4, #0
 800c99e:	d048      	beq.n	800ca32 <_malloc_r+0xe6>
 800c9a0:	6823      	ldr	r3, [r4, #0]
 800c9a2:	4631      	mov	r1, r6
 800c9a4:	4638      	mov	r0, r7
 800c9a6:	eb04 0903 	add.w	r9, r4, r3
 800c9aa:	f000 f897 	bl	800cadc <_sbrk_r>
 800c9ae:	4581      	cmp	r9, r0
 800c9b0:	d13f      	bne.n	800ca32 <_malloc_r+0xe6>
 800c9b2:	6821      	ldr	r1, [r4, #0]
 800c9b4:	1a6d      	subs	r5, r5, r1
 800c9b6:	4629      	mov	r1, r5
 800c9b8:	4638      	mov	r0, r7
 800c9ba:	f7ff ffa7 	bl	800c90c <sbrk_aligned>
 800c9be:	3001      	adds	r0, #1
 800c9c0:	d037      	beq.n	800ca32 <_malloc_r+0xe6>
 800c9c2:	6823      	ldr	r3, [r4, #0]
 800c9c4:	442b      	add	r3, r5
 800c9c6:	6023      	str	r3, [r4, #0]
 800c9c8:	f8d8 3000 	ldr.w	r3, [r8]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d038      	beq.n	800ca42 <_malloc_r+0xf6>
 800c9d0:	685a      	ldr	r2, [r3, #4]
 800c9d2:	42a2      	cmp	r2, r4
 800c9d4:	d12b      	bne.n	800ca2e <_malloc_r+0xe2>
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	605a      	str	r2, [r3, #4]
 800c9da:	e00f      	b.n	800c9fc <_malloc_r+0xb0>
 800c9dc:	6822      	ldr	r2, [r4, #0]
 800c9de:	1b52      	subs	r2, r2, r5
 800c9e0:	d41f      	bmi.n	800ca22 <_malloc_r+0xd6>
 800c9e2:	2a0b      	cmp	r2, #11
 800c9e4:	d917      	bls.n	800ca16 <_malloc_r+0xca>
 800c9e6:	1961      	adds	r1, r4, r5
 800c9e8:	42a3      	cmp	r3, r4
 800c9ea:	6025      	str	r5, [r4, #0]
 800c9ec:	bf18      	it	ne
 800c9ee:	6059      	strne	r1, [r3, #4]
 800c9f0:	6863      	ldr	r3, [r4, #4]
 800c9f2:	bf08      	it	eq
 800c9f4:	f8c8 1000 	streq.w	r1, [r8]
 800c9f8:	5162      	str	r2, [r4, r5]
 800c9fa:	604b      	str	r3, [r1, #4]
 800c9fc:	4638      	mov	r0, r7
 800c9fe:	f104 060b 	add.w	r6, r4, #11
 800ca02:	f000 f829 	bl	800ca58 <__malloc_unlock>
 800ca06:	f026 0607 	bic.w	r6, r6, #7
 800ca0a:	1d23      	adds	r3, r4, #4
 800ca0c:	1af2      	subs	r2, r6, r3
 800ca0e:	d0ae      	beq.n	800c96e <_malloc_r+0x22>
 800ca10:	1b9b      	subs	r3, r3, r6
 800ca12:	50a3      	str	r3, [r4, r2]
 800ca14:	e7ab      	b.n	800c96e <_malloc_r+0x22>
 800ca16:	42a3      	cmp	r3, r4
 800ca18:	6862      	ldr	r2, [r4, #4]
 800ca1a:	d1dd      	bne.n	800c9d8 <_malloc_r+0x8c>
 800ca1c:	f8c8 2000 	str.w	r2, [r8]
 800ca20:	e7ec      	b.n	800c9fc <_malloc_r+0xb0>
 800ca22:	4623      	mov	r3, r4
 800ca24:	6864      	ldr	r4, [r4, #4]
 800ca26:	e7ac      	b.n	800c982 <_malloc_r+0x36>
 800ca28:	4634      	mov	r4, r6
 800ca2a:	6876      	ldr	r6, [r6, #4]
 800ca2c:	e7b4      	b.n	800c998 <_malloc_r+0x4c>
 800ca2e:	4613      	mov	r3, r2
 800ca30:	e7cc      	b.n	800c9cc <_malloc_r+0x80>
 800ca32:	230c      	movs	r3, #12
 800ca34:	603b      	str	r3, [r7, #0]
 800ca36:	4638      	mov	r0, r7
 800ca38:	f000 f80e 	bl	800ca58 <__malloc_unlock>
 800ca3c:	e797      	b.n	800c96e <_malloc_r+0x22>
 800ca3e:	6025      	str	r5, [r4, #0]
 800ca40:	e7dc      	b.n	800c9fc <_malloc_r+0xb0>
 800ca42:	605b      	str	r3, [r3, #4]
 800ca44:	deff      	udf	#255	; 0xff
 800ca46:	bf00      	nop
 800ca48:	200051b8 	.word	0x200051b8

0800ca4c <__malloc_lock>:
 800ca4c:	4801      	ldr	r0, [pc, #4]	; (800ca54 <__malloc_lock+0x8>)
 800ca4e:	f000 b87f 	b.w	800cb50 <__retarget_lock_acquire_recursive>
 800ca52:	bf00      	nop
 800ca54:	200052fc 	.word	0x200052fc

0800ca58 <__malloc_unlock>:
 800ca58:	4801      	ldr	r0, [pc, #4]	; (800ca60 <__malloc_unlock+0x8>)
 800ca5a:	f000 b87a 	b.w	800cb52 <__retarget_lock_release_recursive>
 800ca5e:	bf00      	nop
 800ca60:	200052fc 	.word	0x200052fc

0800ca64 <siprintf>:
 800ca64:	b40e      	push	{r1, r2, r3}
 800ca66:	b500      	push	{lr}
 800ca68:	b09c      	sub	sp, #112	; 0x70
 800ca6a:	ab1d      	add	r3, sp, #116	; 0x74
 800ca6c:	9002      	str	r0, [sp, #8]
 800ca6e:	9006      	str	r0, [sp, #24]
 800ca70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ca74:	4809      	ldr	r0, [pc, #36]	; (800ca9c <siprintf+0x38>)
 800ca76:	9107      	str	r1, [sp, #28]
 800ca78:	9104      	str	r1, [sp, #16]
 800ca7a:	4909      	ldr	r1, [pc, #36]	; (800caa0 <siprintf+0x3c>)
 800ca7c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca80:	9105      	str	r1, [sp, #20]
 800ca82:	6800      	ldr	r0, [r0, #0]
 800ca84:	9301      	str	r3, [sp, #4]
 800ca86:	a902      	add	r1, sp, #8
 800ca88:	f000 f918 	bl	800ccbc <_svfiprintf_r>
 800ca8c:	9b02      	ldr	r3, [sp, #8]
 800ca8e:	2200      	movs	r2, #0
 800ca90:	701a      	strb	r2, [r3, #0]
 800ca92:	b01c      	add	sp, #112	; 0x70
 800ca94:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca98:	b003      	add	sp, #12
 800ca9a:	4770      	bx	lr
 800ca9c:	20000068 	.word	0x20000068
 800caa0:	ffff0208 	.word	0xffff0208

0800caa4 <memset>:
 800caa4:	4402      	add	r2, r0
 800caa6:	4603      	mov	r3, r0
 800caa8:	4293      	cmp	r3, r2
 800caaa:	d100      	bne.n	800caae <memset+0xa>
 800caac:	4770      	bx	lr
 800caae:	f803 1b01 	strb.w	r1, [r3], #1
 800cab2:	e7f9      	b.n	800caa8 <memset+0x4>

0800cab4 <strncpy>:
 800cab4:	b510      	push	{r4, lr}
 800cab6:	3901      	subs	r1, #1
 800cab8:	4603      	mov	r3, r0
 800caba:	b132      	cbz	r2, 800caca <strncpy+0x16>
 800cabc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cac0:	f803 4b01 	strb.w	r4, [r3], #1
 800cac4:	3a01      	subs	r2, #1
 800cac6:	2c00      	cmp	r4, #0
 800cac8:	d1f7      	bne.n	800caba <strncpy+0x6>
 800caca:	441a      	add	r2, r3
 800cacc:	2100      	movs	r1, #0
 800cace:	4293      	cmp	r3, r2
 800cad0:	d100      	bne.n	800cad4 <strncpy+0x20>
 800cad2:	bd10      	pop	{r4, pc}
 800cad4:	f803 1b01 	strb.w	r1, [r3], #1
 800cad8:	e7f9      	b.n	800cace <strncpy+0x1a>
	...

0800cadc <_sbrk_r>:
 800cadc:	b538      	push	{r3, r4, r5, lr}
 800cade:	4d06      	ldr	r5, [pc, #24]	; (800caf8 <_sbrk_r+0x1c>)
 800cae0:	2300      	movs	r3, #0
 800cae2:	4604      	mov	r4, r0
 800cae4:	4608      	mov	r0, r1
 800cae6:	602b      	str	r3, [r5, #0]
 800cae8:	f7f7 ffd4 	bl	8004a94 <_sbrk>
 800caec:	1c43      	adds	r3, r0, #1
 800caee:	d102      	bne.n	800caf6 <_sbrk_r+0x1a>
 800caf0:	682b      	ldr	r3, [r5, #0]
 800caf2:	b103      	cbz	r3, 800caf6 <_sbrk_r+0x1a>
 800caf4:	6023      	str	r3, [r4, #0]
 800caf6:	bd38      	pop	{r3, r4, r5, pc}
 800caf8:	200052f8 	.word	0x200052f8

0800cafc <__errno>:
 800cafc:	4b01      	ldr	r3, [pc, #4]	; (800cb04 <__errno+0x8>)
 800cafe:	6818      	ldr	r0, [r3, #0]
 800cb00:	4770      	bx	lr
 800cb02:	bf00      	nop
 800cb04:	20000068 	.word	0x20000068

0800cb08 <__libc_init_array>:
 800cb08:	b570      	push	{r4, r5, r6, lr}
 800cb0a:	4d0d      	ldr	r5, [pc, #52]	; (800cb40 <__libc_init_array+0x38>)
 800cb0c:	4c0d      	ldr	r4, [pc, #52]	; (800cb44 <__libc_init_array+0x3c>)
 800cb0e:	1b64      	subs	r4, r4, r5
 800cb10:	10a4      	asrs	r4, r4, #2
 800cb12:	2600      	movs	r6, #0
 800cb14:	42a6      	cmp	r6, r4
 800cb16:	d109      	bne.n	800cb2c <__libc_init_array+0x24>
 800cb18:	4d0b      	ldr	r5, [pc, #44]	; (800cb48 <__libc_init_array+0x40>)
 800cb1a:	4c0c      	ldr	r4, [pc, #48]	; (800cb4c <__libc_init_array+0x44>)
 800cb1c:	f001 fb68 	bl	800e1f0 <_init>
 800cb20:	1b64      	subs	r4, r4, r5
 800cb22:	10a4      	asrs	r4, r4, #2
 800cb24:	2600      	movs	r6, #0
 800cb26:	42a6      	cmp	r6, r4
 800cb28:	d105      	bne.n	800cb36 <__libc_init_array+0x2e>
 800cb2a:	bd70      	pop	{r4, r5, r6, pc}
 800cb2c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb30:	4798      	blx	r3
 800cb32:	3601      	adds	r6, #1
 800cb34:	e7ee      	b.n	800cb14 <__libc_init_array+0xc>
 800cb36:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb3a:	4798      	blx	r3
 800cb3c:	3601      	adds	r6, #1
 800cb3e:	e7f2      	b.n	800cb26 <__libc_init_array+0x1e>
 800cb40:	0800eff8 	.word	0x0800eff8
 800cb44:	0800eff8 	.word	0x0800eff8
 800cb48:	0800eff8 	.word	0x0800eff8
 800cb4c:	0800effc 	.word	0x0800effc

0800cb50 <__retarget_lock_acquire_recursive>:
 800cb50:	4770      	bx	lr

0800cb52 <__retarget_lock_release_recursive>:
 800cb52:	4770      	bx	lr

0800cb54 <memcpy>:
 800cb54:	440a      	add	r2, r1
 800cb56:	4291      	cmp	r1, r2
 800cb58:	f100 33ff 	add.w	r3, r0, #4294967295
 800cb5c:	d100      	bne.n	800cb60 <memcpy+0xc>
 800cb5e:	4770      	bx	lr
 800cb60:	b510      	push	{r4, lr}
 800cb62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb66:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb6a:	4291      	cmp	r1, r2
 800cb6c:	d1f9      	bne.n	800cb62 <memcpy+0xe>
 800cb6e:	bd10      	pop	{r4, pc}

0800cb70 <_free_r>:
 800cb70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb72:	2900      	cmp	r1, #0
 800cb74:	d044      	beq.n	800cc00 <_free_r+0x90>
 800cb76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb7a:	9001      	str	r0, [sp, #4]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	f1a1 0404 	sub.w	r4, r1, #4
 800cb82:	bfb8      	it	lt
 800cb84:	18e4      	addlt	r4, r4, r3
 800cb86:	f7ff ff61 	bl	800ca4c <__malloc_lock>
 800cb8a:	4a1e      	ldr	r2, [pc, #120]	; (800cc04 <_free_r+0x94>)
 800cb8c:	9801      	ldr	r0, [sp, #4]
 800cb8e:	6813      	ldr	r3, [r2, #0]
 800cb90:	b933      	cbnz	r3, 800cba0 <_free_r+0x30>
 800cb92:	6063      	str	r3, [r4, #4]
 800cb94:	6014      	str	r4, [r2, #0]
 800cb96:	b003      	add	sp, #12
 800cb98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cb9c:	f7ff bf5c 	b.w	800ca58 <__malloc_unlock>
 800cba0:	42a3      	cmp	r3, r4
 800cba2:	d908      	bls.n	800cbb6 <_free_r+0x46>
 800cba4:	6825      	ldr	r5, [r4, #0]
 800cba6:	1961      	adds	r1, r4, r5
 800cba8:	428b      	cmp	r3, r1
 800cbaa:	bf01      	itttt	eq
 800cbac:	6819      	ldreq	r1, [r3, #0]
 800cbae:	685b      	ldreq	r3, [r3, #4]
 800cbb0:	1949      	addeq	r1, r1, r5
 800cbb2:	6021      	streq	r1, [r4, #0]
 800cbb4:	e7ed      	b.n	800cb92 <_free_r+0x22>
 800cbb6:	461a      	mov	r2, r3
 800cbb8:	685b      	ldr	r3, [r3, #4]
 800cbba:	b10b      	cbz	r3, 800cbc0 <_free_r+0x50>
 800cbbc:	42a3      	cmp	r3, r4
 800cbbe:	d9fa      	bls.n	800cbb6 <_free_r+0x46>
 800cbc0:	6811      	ldr	r1, [r2, #0]
 800cbc2:	1855      	adds	r5, r2, r1
 800cbc4:	42a5      	cmp	r5, r4
 800cbc6:	d10b      	bne.n	800cbe0 <_free_r+0x70>
 800cbc8:	6824      	ldr	r4, [r4, #0]
 800cbca:	4421      	add	r1, r4
 800cbcc:	1854      	adds	r4, r2, r1
 800cbce:	42a3      	cmp	r3, r4
 800cbd0:	6011      	str	r1, [r2, #0]
 800cbd2:	d1e0      	bne.n	800cb96 <_free_r+0x26>
 800cbd4:	681c      	ldr	r4, [r3, #0]
 800cbd6:	685b      	ldr	r3, [r3, #4]
 800cbd8:	6053      	str	r3, [r2, #4]
 800cbda:	440c      	add	r4, r1
 800cbdc:	6014      	str	r4, [r2, #0]
 800cbde:	e7da      	b.n	800cb96 <_free_r+0x26>
 800cbe0:	d902      	bls.n	800cbe8 <_free_r+0x78>
 800cbe2:	230c      	movs	r3, #12
 800cbe4:	6003      	str	r3, [r0, #0]
 800cbe6:	e7d6      	b.n	800cb96 <_free_r+0x26>
 800cbe8:	6825      	ldr	r5, [r4, #0]
 800cbea:	1961      	adds	r1, r4, r5
 800cbec:	428b      	cmp	r3, r1
 800cbee:	bf04      	itt	eq
 800cbf0:	6819      	ldreq	r1, [r3, #0]
 800cbf2:	685b      	ldreq	r3, [r3, #4]
 800cbf4:	6063      	str	r3, [r4, #4]
 800cbf6:	bf04      	itt	eq
 800cbf8:	1949      	addeq	r1, r1, r5
 800cbfa:	6021      	streq	r1, [r4, #0]
 800cbfc:	6054      	str	r4, [r2, #4]
 800cbfe:	e7ca      	b.n	800cb96 <_free_r+0x26>
 800cc00:	b003      	add	sp, #12
 800cc02:	bd30      	pop	{r4, r5, pc}
 800cc04:	200051b8 	.word	0x200051b8

0800cc08 <__ssputs_r>:
 800cc08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc0c:	688e      	ldr	r6, [r1, #8]
 800cc0e:	461f      	mov	r7, r3
 800cc10:	42be      	cmp	r6, r7
 800cc12:	680b      	ldr	r3, [r1, #0]
 800cc14:	4682      	mov	sl, r0
 800cc16:	460c      	mov	r4, r1
 800cc18:	4690      	mov	r8, r2
 800cc1a:	d82c      	bhi.n	800cc76 <__ssputs_r+0x6e>
 800cc1c:	898a      	ldrh	r2, [r1, #12]
 800cc1e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cc22:	d026      	beq.n	800cc72 <__ssputs_r+0x6a>
 800cc24:	6965      	ldr	r5, [r4, #20]
 800cc26:	6909      	ldr	r1, [r1, #16]
 800cc28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cc2c:	eba3 0901 	sub.w	r9, r3, r1
 800cc30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cc34:	1c7b      	adds	r3, r7, #1
 800cc36:	444b      	add	r3, r9
 800cc38:	106d      	asrs	r5, r5, #1
 800cc3a:	429d      	cmp	r5, r3
 800cc3c:	bf38      	it	cc
 800cc3e:	461d      	movcc	r5, r3
 800cc40:	0553      	lsls	r3, r2, #21
 800cc42:	d527      	bpl.n	800cc94 <__ssputs_r+0x8c>
 800cc44:	4629      	mov	r1, r5
 800cc46:	f7ff fe81 	bl	800c94c <_malloc_r>
 800cc4a:	4606      	mov	r6, r0
 800cc4c:	b360      	cbz	r0, 800cca8 <__ssputs_r+0xa0>
 800cc4e:	6921      	ldr	r1, [r4, #16]
 800cc50:	464a      	mov	r2, r9
 800cc52:	f7ff ff7f 	bl	800cb54 <memcpy>
 800cc56:	89a3      	ldrh	r3, [r4, #12]
 800cc58:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cc5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc60:	81a3      	strh	r3, [r4, #12]
 800cc62:	6126      	str	r6, [r4, #16]
 800cc64:	6165      	str	r5, [r4, #20]
 800cc66:	444e      	add	r6, r9
 800cc68:	eba5 0509 	sub.w	r5, r5, r9
 800cc6c:	6026      	str	r6, [r4, #0]
 800cc6e:	60a5      	str	r5, [r4, #8]
 800cc70:	463e      	mov	r6, r7
 800cc72:	42be      	cmp	r6, r7
 800cc74:	d900      	bls.n	800cc78 <__ssputs_r+0x70>
 800cc76:	463e      	mov	r6, r7
 800cc78:	6820      	ldr	r0, [r4, #0]
 800cc7a:	4632      	mov	r2, r6
 800cc7c:	4641      	mov	r1, r8
 800cc7e:	f000 faab 	bl	800d1d8 <memmove>
 800cc82:	68a3      	ldr	r3, [r4, #8]
 800cc84:	1b9b      	subs	r3, r3, r6
 800cc86:	60a3      	str	r3, [r4, #8]
 800cc88:	6823      	ldr	r3, [r4, #0]
 800cc8a:	4433      	add	r3, r6
 800cc8c:	6023      	str	r3, [r4, #0]
 800cc8e:	2000      	movs	r0, #0
 800cc90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc94:	462a      	mov	r2, r5
 800cc96:	f000 fab9 	bl	800d20c <_realloc_r>
 800cc9a:	4606      	mov	r6, r0
 800cc9c:	2800      	cmp	r0, #0
 800cc9e:	d1e0      	bne.n	800cc62 <__ssputs_r+0x5a>
 800cca0:	6921      	ldr	r1, [r4, #16]
 800cca2:	4650      	mov	r0, sl
 800cca4:	f7ff ff64 	bl	800cb70 <_free_r>
 800cca8:	230c      	movs	r3, #12
 800ccaa:	f8ca 3000 	str.w	r3, [sl]
 800ccae:	89a3      	ldrh	r3, [r4, #12]
 800ccb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccb4:	81a3      	strh	r3, [r4, #12]
 800ccb6:	f04f 30ff 	mov.w	r0, #4294967295
 800ccba:	e7e9      	b.n	800cc90 <__ssputs_r+0x88>

0800ccbc <_svfiprintf_r>:
 800ccbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccc0:	4698      	mov	r8, r3
 800ccc2:	898b      	ldrh	r3, [r1, #12]
 800ccc4:	061b      	lsls	r3, r3, #24
 800ccc6:	b09d      	sub	sp, #116	; 0x74
 800ccc8:	4607      	mov	r7, r0
 800ccca:	460d      	mov	r5, r1
 800cccc:	4614      	mov	r4, r2
 800ccce:	d50e      	bpl.n	800ccee <_svfiprintf_r+0x32>
 800ccd0:	690b      	ldr	r3, [r1, #16]
 800ccd2:	b963      	cbnz	r3, 800ccee <_svfiprintf_r+0x32>
 800ccd4:	2140      	movs	r1, #64	; 0x40
 800ccd6:	f7ff fe39 	bl	800c94c <_malloc_r>
 800ccda:	6028      	str	r0, [r5, #0]
 800ccdc:	6128      	str	r0, [r5, #16]
 800ccde:	b920      	cbnz	r0, 800ccea <_svfiprintf_r+0x2e>
 800cce0:	230c      	movs	r3, #12
 800cce2:	603b      	str	r3, [r7, #0]
 800cce4:	f04f 30ff 	mov.w	r0, #4294967295
 800cce8:	e0d0      	b.n	800ce8c <_svfiprintf_r+0x1d0>
 800ccea:	2340      	movs	r3, #64	; 0x40
 800ccec:	616b      	str	r3, [r5, #20]
 800ccee:	2300      	movs	r3, #0
 800ccf0:	9309      	str	r3, [sp, #36]	; 0x24
 800ccf2:	2320      	movs	r3, #32
 800ccf4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ccf8:	f8cd 800c 	str.w	r8, [sp, #12]
 800ccfc:	2330      	movs	r3, #48	; 0x30
 800ccfe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cea4 <_svfiprintf_r+0x1e8>
 800cd02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd06:	f04f 0901 	mov.w	r9, #1
 800cd0a:	4623      	mov	r3, r4
 800cd0c:	469a      	mov	sl, r3
 800cd0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd12:	b10a      	cbz	r2, 800cd18 <_svfiprintf_r+0x5c>
 800cd14:	2a25      	cmp	r2, #37	; 0x25
 800cd16:	d1f9      	bne.n	800cd0c <_svfiprintf_r+0x50>
 800cd18:	ebba 0b04 	subs.w	fp, sl, r4
 800cd1c:	d00b      	beq.n	800cd36 <_svfiprintf_r+0x7a>
 800cd1e:	465b      	mov	r3, fp
 800cd20:	4622      	mov	r2, r4
 800cd22:	4629      	mov	r1, r5
 800cd24:	4638      	mov	r0, r7
 800cd26:	f7ff ff6f 	bl	800cc08 <__ssputs_r>
 800cd2a:	3001      	adds	r0, #1
 800cd2c:	f000 80a9 	beq.w	800ce82 <_svfiprintf_r+0x1c6>
 800cd30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd32:	445a      	add	r2, fp
 800cd34:	9209      	str	r2, [sp, #36]	; 0x24
 800cd36:	f89a 3000 	ldrb.w	r3, [sl]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	f000 80a1 	beq.w	800ce82 <_svfiprintf_r+0x1c6>
 800cd40:	2300      	movs	r3, #0
 800cd42:	f04f 32ff 	mov.w	r2, #4294967295
 800cd46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd4a:	f10a 0a01 	add.w	sl, sl, #1
 800cd4e:	9304      	str	r3, [sp, #16]
 800cd50:	9307      	str	r3, [sp, #28]
 800cd52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd56:	931a      	str	r3, [sp, #104]	; 0x68
 800cd58:	4654      	mov	r4, sl
 800cd5a:	2205      	movs	r2, #5
 800cd5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd60:	4850      	ldr	r0, [pc, #320]	; (800cea4 <_svfiprintf_r+0x1e8>)
 800cd62:	f7f3 fa4d 	bl	8000200 <memchr>
 800cd66:	9a04      	ldr	r2, [sp, #16]
 800cd68:	b9d8      	cbnz	r0, 800cda2 <_svfiprintf_r+0xe6>
 800cd6a:	06d0      	lsls	r0, r2, #27
 800cd6c:	bf44      	itt	mi
 800cd6e:	2320      	movmi	r3, #32
 800cd70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd74:	0711      	lsls	r1, r2, #28
 800cd76:	bf44      	itt	mi
 800cd78:	232b      	movmi	r3, #43	; 0x2b
 800cd7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd7e:	f89a 3000 	ldrb.w	r3, [sl]
 800cd82:	2b2a      	cmp	r3, #42	; 0x2a
 800cd84:	d015      	beq.n	800cdb2 <_svfiprintf_r+0xf6>
 800cd86:	9a07      	ldr	r2, [sp, #28]
 800cd88:	4654      	mov	r4, sl
 800cd8a:	2000      	movs	r0, #0
 800cd8c:	f04f 0c0a 	mov.w	ip, #10
 800cd90:	4621      	mov	r1, r4
 800cd92:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd96:	3b30      	subs	r3, #48	; 0x30
 800cd98:	2b09      	cmp	r3, #9
 800cd9a:	d94d      	bls.n	800ce38 <_svfiprintf_r+0x17c>
 800cd9c:	b1b0      	cbz	r0, 800cdcc <_svfiprintf_r+0x110>
 800cd9e:	9207      	str	r2, [sp, #28]
 800cda0:	e014      	b.n	800cdcc <_svfiprintf_r+0x110>
 800cda2:	eba0 0308 	sub.w	r3, r0, r8
 800cda6:	fa09 f303 	lsl.w	r3, r9, r3
 800cdaa:	4313      	orrs	r3, r2
 800cdac:	9304      	str	r3, [sp, #16]
 800cdae:	46a2      	mov	sl, r4
 800cdb0:	e7d2      	b.n	800cd58 <_svfiprintf_r+0x9c>
 800cdb2:	9b03      	ldr	r3, [sp, #12]
 800cdb4:	1d19      	adds	r1, r3, #4
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	9103      	str	r1, [sp, #12]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	bfbb      	ittet	lt
 800cdbe:	425b      	neglt	r3, r3
 800cdc0:	f042 0202 	orrlt.w	r2, r2, #2
 800cdc4:	9307      	strge	r3, [sp, #28]
 800cdc6:	9307      	strlt	r3, [sp, #28]
 800cdc8:	bfb8      	it	lt
 800cdca:	9204      	strlt	r2, [sp, #16]
 800cdcc:	7823      	ldrb	r3, [r4, #0]
 800cdce:	2b2e      	cmp	r3, #46	; 0x2e
 800cdd0:	d10c      	bne.n	800cdec <_svfiprintf_r+0x130>
 800cdd2:	7863      	ldrb	r3, [r4, #1]
 800cdd4:	2b2a      	cmp	r3, #42	; 0x2a
 800cdd6:	d134      	bne.n	800ce42 <_svfiprintf_r+0x186>
 800cdd8:	9b03      	ldr	r3, [sp, #12]
 800cdda:	1d1a      	adds	r2, r3, #4
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	9203      	str	r2, [sp, #12]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	bfb8      	it	lt
 800cde4:	f04f 33ff 	movlt.w	r3, #4294967295
 800cde8:	3402      	adds	r4, #2
 800cdea:	9305      	str	r3, [sp, #20]
 800cdec:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ceb4 <_svfiprintf_r+0x1f8>
 800cdf0:	7821      	ldrb	r1, [r4, #0]
 800cdf2:	2203      	movs	r2, #3
 800cdf4:	4650      	mov	r0, sl
 800cdf6:	f7f3 fa03 	bl	8000200 <memchr>
 800cdfa:	b138      	cbz	r0, 800ce0c <_svfiprintf_r+0x150>
 800cdfc:	9b04      	ldr	r3, [sp, #16]
 800cdfe:	eba0 000a 	sub.w	r0, r0, sl
 800ce02:	2240      	movs	r2, #64	; 0x40
 800ce04:	4082      	lsls	r2, r0
 800ce06:	4313      	orrs	r3, r2
 800ce08:	3401      	adds	r4, #1
 800ce0a:	9304      	str	r3, [sp, #16]
 800ce0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce10:	4825      	ldr	r0, [pc, #148]	; (800cea8 <_svfiprintf_r+0x1ec>)
 800ce12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce16:	2206      	movs	r2, #6
 800ce18:	f7f3 f9f2 	bl	8000200 <memchr>
 800ce1c:	2800      	cmp	r0, #0
 800ce1e:	d038      	beq.n	800ce92 <_svfiprintf_r+0x1d6>
 800ce20:	4b22      	ldr	r3, [pc, #136]	; (800ceac <_svfiprintf_r+0x1f0>)
 800ce22:	bb1b      	cbnz	r3, 800ce6c <_svfiprintf_r+0x1b0>
 800ce24:	9b03      	ldr	r3, [sp, #12]
 800ce26:	3307      	adds	r3, #7
 800ce28:	f023 0307 	bic.w	r3, r3, #7
 800ce2c:	3308      	adds	r3, #8
 800ce2e:	9303      	str	r3, [sp, #12]
 800ce30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce32:	4433      	add	r3, r6
 800ce34:	9309      	str	r3, [sp, #36]	; 0x24
 800ce36:	e768      	b.n	800cd0a <_svfiprintf_r+0x4e>
 800ce38:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce3c:	460c      	mov	r4, r1
 800ce3e:	2001      	movs	r0, #1
 800ce40:	e7a6      	b.n	800cd90 <_svfiprintf_r+0xd4>
 800ce42:	2300      	movs	r3, #0
 800ce44:	3401      	adds	r4, #1
 800ce46:	9305      	str	r3, [sp, #20]
 800ce48:	4619      	mov	r1, r3
 800ce4a:	f04f 0c0a 	mov.w	ip, #10
 800ce4e:	4620      	mov	r0, r4
 800ce50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce54:	3a30      	subs	r2, #48	; 0x30
 800ce56:	2a09      	cmp	r2, #9
 800ce58:	d903      	bls.n	800ce62 <_svfiprintf_r+0x1a6>
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d0c6      	beq.n	800cdec <_svfiprintf_r+0x130>
 800ce5e:	9105      	str	r1, [sp, #20]
 800ce60:	e7c4      	b.n	800cdec <_svfiprintf_r+0x130>
 800ce62:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce66:	4604      	mov	r4, r0
 800ce68:	2301      	movs	r3, #1
 800ce6a:	e7f0      	b.n	800ce4e <_svfiprintf_r+0x192>
 800ce6c:	ab03      	add	r3, sp, #12
 800ce6e:	9300      	str	r3, [sp, #0]
 800ce70:	462a      	mov	r2, r5
 800ce72:	4b0f      	ldr	r3, [pc, #60]	; (800ceb0 <_svfiprintf_r+0x1f4>)
 800ce74:	a904      	add	r1, sp, #16
 800ce76:	4638      	mov	r0, r7
 800ce78:	f3af 8000 	nop.w
 800ce7c:	1c42      	adds	r2, r0, #1
 800ce7e:	4606      	mov	r6, r0
 800ce80:	d1d6      	bne.n	800ce30 <_svfiprintf_r+0x174>
 800ce82:	89ab      	ldrh	r3, [r5, #12]
 800ce84:	065b      	lsls	r3, r3, #25
 800ce86:	f53f af2d 	bmi.w	800cce4 <_svfiprintf_r+0x28>
 800ce8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce8c:	b01d      	add	sp, #116	; 0x74
 800ce8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce92:	ab03      	add	r3, sp, #12
 800ce94:	9300      	str	r3, [sp, #0]
 800ce96:	462a      	mov	r2, r5
 800ce98:	4b05      	ldr	r3, [pc, #20]	; (800ceb0 <_svfiprintf_r+0x1f4>)
 800ce9a:	a904      	add	r1, sp, #16
 800ce9c:	4638      	mov	r0, r7
 800ce9e:	f000 f879 	bl	800cf94 <_printf_i>
 800cea2:	e7eb      	b.n	800ce7c <_svfiprintf_r+0x1c0>
 800cea4:	0800ef8c 	.word	0x0800ef8c
 800cea8:	0800ef96 	.word	0x0800ef96
 800ceac:	00000000 	.word	0x00000000
 800ceb0:	0800cc09 	.word	0x0800cc09
 800ceb4:	0800ef92 	.word	0x0800ef92

0800ceb8 <_printf_common>:
 800ceb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cebc:	4616      	mov	r6, r2
 800cebe:	4699      	mov	r9, r3
 800cec0:	688a      	ldr	r2, [r1, #8]
 800cec2:	690b      	ldr	r3, [r1, #16]
 800cec4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cec8:	4293      	cmp	r3, r2
 800ceca:	bfb8      	it	lt
 800cecc:	4613      	movlt	r3, r2
 800cece:	6033      	str	r3, [r6, #0]
 800ced0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ced4:	4607      	mov	r7, r0
 800ced6:	460c      	mov	r4, r1
 800ced8:	b10a      	cbz	r2, 800cede <_printf_common+0x26>
 800ceda:	3301      	adds	r3, #1
 800cedc:	6033      	str	r3, [r6, #0]
 800cede:	6823      	ldr	r3, [r4, #0]
 800cee0:	0699      	lsls	r1, r3, #26
 800cee2:	bf42      	ittt	mi
 800cee4:	6833      	ldrmi	r3, [r6, #0]
 800cee6:	3302      	addmi	r3, #2
 800cee8:	6033      	strmi	r3, [r6, #0]
 800ceea:	6825      	ldr	r5, [r4, #0]
 800ceec:	f015 0506 	ands.w	r5, r5, #6
 800cef0:	d106      	bne.n	800cf00 <_printf_common+0x48>
 800cef2:	f104 0a19 	add.w	sl, r4, #25
 800cef6:	68e3      	ldr	r3, [r4, #12]
 800cef8:	6832      	ldr	r2, [r6, #0]
 800cefa:	1a9b      	subs	r3, r3, r2
 800cefc:	42ab      	cmp	r3, r5
 800cefe:	dc26      	bgt.n	800cf4e <_printf_common+0x96>
 800cf00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cf04:	1e13      	subs	r3, r2, #0
 800cf06:	6822      	ldr	r2, [r4, #0]
 800cf08:	bf18      	it	ne
 800cf0a:	2301      	movne	r3, #1
 800cf0c:	0692      	lsls	r2, r2, #26
 800cf0e:	d42b      	bmi.n	800cf68 <_printf_common+0xb0>
 800cf10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cf14:	4649      	mov	r1, r9
 800cf16:	4638      	mov	r0, r7
 800cf18:	47c0      	blx	r8
 800cf1a:	3001      	adds	r0, #1
 800cf1c:	d01e      	beq.n	800cf5c <_printf_common+0xa4>
 800cf1e:	6823      	ldr	r3, [r4, #0]
 800cf20:	6922      	ldr	r2, [r4, #16]
 800cf22:	f003 0306 	and.w	r3, r3, #6
 800cf26:	2b04      	cmp	r3, #4
 800cf28:	bf02      	ittt	eq
 800cf2a:	68e5      	ldreq	r5, [r4, #12]
 800cf2c:	6833      	ldreq	r3, [r6, #0]
 800cf2e:	1aed      	subeq	r5, r5, r3
 800cf30:	68a3      	ldr	r3, [r4, #8]
 800cf32:	bf0c      	ite	eq
 800cf34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cf38:	2500      	movne	r5, #0
 800cf3a:	4293      	cmp	r3, r2
 800cf3c:	bfc4      	itt	gt
 800cf3e:	1a9b      	subgt	r3, r3, r2
 800cf40:	18ed      	addgt	r5, r5, r3
 800cf42:	2600      	movs	r6, #0
 800cf44:	341a      	adds	r4, #26
 800cf46:	42b5      	cmp	r5, r6
 800cf48:	d11a      	bne.n	800cf80 <_printf_common+0xc8>
 800cf4a:	2000      	movs	r0, #0
 800cf4c:	e008      	b.n	800cf60 <_printf_common+0xa8>
 800cf4e:	2301      	movs	r3, #1
 800cf50:	4652      	mov	r2, sl
 800cf52:	4649      	mov	r1, r9
 800cf54:	4638      	mov	r0, r7
 800cf56:	47c0      	blx	r8
 800cf58:	3001      	adds	r0, #1
 800cf5a:	d103      	bne.n	800cf64 <_printf_common+0xac>
 800cf5c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf64:	3501      	adds	r5, #1
 800cf66:	e7c6      	b.n	800cef6 <_printf_common+0x3e>
 800cf68:	18e1      	adds	r1, r4, r3
 800cf6a:	1c5a      	adds	r2, r3, #1
 800cf6c:	2030      	movs	r0, #48	; 0x30
 800cf6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cf72:	4422      	add	r2, r4
 800cf74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cf78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cf7c:	3302      	adds	r3, #2
 800cf7e:	e7c7      	b.n	800cf10 <_printf_common+0x58>
 800cf80:	2301      	movs	r3, #1
 800cf82:	4622      	mov	r2, r4
 800cf84:	4649      	mov	r1, r9
 800cf86:	4638      	mov	r0, r7
 800cf88:	47c0      	blx	r8
 800cf8a:	3001      	adds	r0, #1
 800cf8c:	d0e6      	beq.n	800cf5c <_printf_common+0xa4>
 800cf8e:	3601      	adds	r6, #1
 800cf90:	e7d9      	b.n	800cf46 <_printf_common+0x8e>
	...

0800cf94 <_printf_i>:
 800cf94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cf98:	7e0f      	ldrb	r7, [r1, #24]
 800cf9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cf9c:	2f78      	cmp	r7, #120	; 0x78
 800cf9e:	4691      	mov	r9, r2
 800cfa0:	4680      	mov	r8, r0
 800cfa2:	460c      	mov	r4, r1
 800cfa4:	469a      	mov	sl, r3
 800cfa6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cfaa:	d807      	bhi.n	800cfbc <_printf_i+0x28>
 800cfac:	2f62      	cmp	r7, #98	; 0x62
 800cfae:	d80a      	bhi.n	800cfc6 <_printf_i+0x32>
 800cfb0:	2f00      	cmp	r7, #0
 800cfb2:	f000 80d4 	beq.w	800d15e <_printf_i+0x1ca>
 800cfb6:	2f58      	cmp	r7, #88	; 0x58
 800cfb8:	f000 80c0 	beq.w	800d13c <_printf_i+0x1a8>
 800cfbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cfc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cfc4:	e03a      	b.n	800d03c <_printf_i+0xa8>
 800cfc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cfca:	2b15      	cmp	r3, #21
 800cfcc:	d8f6      	bhi.n	800cfbc <_printf_i+0x28>
 800cfce:	a101      	add	r1, pc, #4	; (adr r1, 800cfd4 <_printf_i+0x40>)
 800cfd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cfd4:	0800d02d 	.word	0x0800d02d
 800cfd8:	0800d041 	.word	0x0800d041
 800cfdc:	0800cfbd 	.word	0x0800cfbd
 800cfe0:	0800cfbd 	.word	0x0800cfbd
 800cfe4:	0800cfbd 	.word	0x0800cfbd
 800cfe8:	0800cfbd 	.word	0x0800cfbd
 800cfec:	0800d041 	.word	0x0800d041
 800cff0:	0800cfbd 	.word	0x0800cfbd
 800cff4:	0800cfbd 	.word	0x0800cfbd
 800cff8:	0800cfbd 	.word	0x0800cfbd
 800cffc:	0800cfbd 	.word	0x0800cfbd
 800d000:	0800d145 	.word	0x0800d145
 800d004:	0800d06d 	.word	0x0800d06d
 800d008:	0800d0ff 	.word	0x0800d0ff
 800d00c:	0800cfbd 	.word	0x0800cfbd
 800d010:	0800cfbd 	.word	0x0800cfbd
 800d014:	0800d167 	.word	0x0800d167
 800d018:	0800cfbd 	.word	0x0800cfbd
 800d01c:	0800d06d 	.word	0x0800d06d
 800d020:	0800cfbd 	.word	0x0800cfbd
 800d024:	0800cfbd 	.word	0x0800cfbd
 800d028:	0800d107 	.word	0x0800d107
 800d02c:	682b      	ldr	r3, [r5, #0]
 800d02e:	1d1a      	adds	r2, r3, #4
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	602a      	str	r2, [r5, #0]
 800d034:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d038:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d03c:	2301      	movs	r3, #1
 800d03e:	e09f      	b.n	800d180 <_printf_i+0x1ec>
 800d040:	6820      	ldr	r0, [r4, #0]
 800d042:	682b      	ldr	r3, [r5, #0]
 800d044:	0607      	lsls	r7, r0, #24
 800d046:	f103 0104 	add.w	r1, r3, #4
 800d04a:	6029      	str	r1, [r5, #0]
 800d04c:	d501      	bpl.n	800d052 <_printf_i+0xbe>
 800d04e:	681e      	ldr	r6, [r3, #0]
 800d050:	e003      	b.n	800d05a <_printf_i+0xc6>
 800d052:	0646      	lsls	r6, r0, #25
 800d054:	d5fb      	bpl.n	800d04e <_printf_i+0xba>
 800d056:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d05a:	2e00      	cmp	r6, #0
 800d05c:	da03      	bge.n	800d066 <_printf_i+0xd2>
 800d05e:	232d      	movs	r3, #45	; 0x2d
 800d060:	4276      	negs	r6, r6
 800d062:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d066:	485a      	ldr	r0, [pc, #360]	; (800d1d0 <_printf_i+0x23c>)
 800d068:	230a      	movs	r3, #10
 800d06a:	e012      	b.n	800d092 <_printf_i+0xfe>
 800d06c:	682b      	ldr	r3, [r5, #0]
 800d06e:	6820      	ldr	r0, [r4, #0]
 800d070:	1d19      	adds	r1, r3, #4
 800d072:	6029      	str	r1, [r5, #0]
 800d074:	0605      	lsls	r5, r0, #24
 800d076:	d501      	bpl.n	800d07c <_printf_i+0xe8>
 800d078:	681e      	ldr	r6, [r3, #0]
 800d07a:	e002      	b.n	800d082 <_printf_i+0xee>
 800d07c:	0641      	lsls	r1, r0, #25
 800d07e:	d5fb      	bpl.n	800d078 <_printf_i+0xe4>
 800d080:	881e      	ldrh	r6, [r3, #0]
 800d082:	4853      	ldr	r0, [pc, #332]	; (800d1d0 <_printf_i+0x23c>)
 800d084:	2f6f      	cmp	r7, #111	; 0x6f
 800d086:	bf0c      	ite	eq
 800d088:	2308      	moveq	r3, #8
 800d08a:	230a      	movne	r3, #10
 800d08c:	2100      	movs	r1, #0
 800d08e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d092:	6865      	ldr	r5, [r4, #4]
 800d094:	60a5      	str	r5, [r4, #8]
 800d096:	2d00      	cmp	r5, #0
 800d098:	bfa2      	ittt	ge
 800d09a:	6821      	ldrge	r1, [r4, #0]
 800d09c:	f021 0104 	bicge.w	r1, r1, #4
 800d0a0:	6021      	strge	r1, [r4, #0]
 800d0a2:	b90e      	cbnz	r6, 800d0a8 <_printf_i+0x114>
 800d0a4:	2d00      	cmp	r5, #0
 800d0a6:	d04b      	beq.n	800d140 <_printf_i+0x1ac>
 800d0a8:	4615      	mov	r5, r2
 800d0aa:	fbb6 f1f3 	udiv	r1, r6, r3
 800d0ae:	fb03 6711 	mls	r7, r3, r1, r6
 800d0b2:	5dc7      	ldrb	r7, [r0, r7]
 800d0b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d0b8:	4637      	mov	r7, r6
 800d0ba:	42bb      	cmp	r3, r7
 800d0bc:	460e      	mov	r6, r1
 800d0be:	d9f4      	bls.n	800d0aa <_printf_i+0x116>
 800d0c0:	2b08      	cmp	r3, #8
 800d0c2:	d10b      	bne.n	800d0dc <_printf_i+0x148>
 800d0c4:	6823      	ldr	r3, [r4, #0]
 800d0c6:	07de      	lsls	r6, r3, #31
 800d0c8:	d508      	bpl.n	800d0dc <_printf_i+0x148>
 800d0ca:	6923      	ldr	r3, [r4, #16]
 800d0cc:	6861      	ldr	r1, [r4, #4]
 800d0ce:	4299      	cmp	r1, r3
 800d0d0:	bfde      	ittt	le
 800d0d2:	2330      	movle	r3, #48	; 0x30
 800d0d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d0d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d0dc:	1b52      	subs	r2, r2, r5
 800d0de:	6122      	str	r2, [r4, #16]
 800d0e0:	f8cd a000 	str.w	sl, [sp]
 800d0e4:	464b      	mov	r3, r9
 800d0e6:	aa03      	add	r2, sp, #12
 800d0e8:	4621      	mov	r1, r4
 800d0ea:	4640      	mov	r0, r8
 800d0ec:	f7ff fee4 	bl	800ceb8 <_printf_common>
 800d0f0:	3001      	adds	r0, #1
 800d0f2:	d14a      	bne.n	800d18a <_printf_i+0x1f6>
 800d0f4:	f04f 30ff 	mov.w	r0, #4294967295
 800d0f8:	b004      	add	sp, #16
 800d0fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0fe:	6823      	ldr	r3, [r4, #0]
 800d100:	f043 0320 	orr.w	r3, r3, #32
 800d104:	6023      	str	r3, [r4, #0]
 800d106:	4833      	ldr	r0, [pc, #204]	; (800d1d4 <_printf_i+0x240>)
 800d108:	2778      	movs	r7, #120	; 0x78
 800d10a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d10e:	6823      	ldr	r3, [r4, #0]
 800d110:	6829      	ldr	r1, [r5, #0]
 800d112:	061f      	lsls	r7, r3, #24
 800d114:	f851 6b04 	ldr.w	r6, [r1], #4
 800d118:	d402      	bmi.n	800d120 <_printf_i+0x18c>
 800d11a:	065f      	lsls	r7, r3, #25
 800d11c:	bf48      	it	mi
 800d11e:	b2b6      	uxthmi	r6, r6
 800d120:	07df      	lsls	r7, r3, #31
 800d122:	bf48      	it	mi
 800d124:	f043 0320 	orrmi.w	r3, r3, #32
 800d128:	6029      	str	r1, [r5, #0]
 800d12a:	bf48      	it	mi
 800d12c:	6023      	strmi	r3, [r4, #0]
 800d12e:	b91e      	cbnz	r6, 800d138 <_printf_i+0x1a4>
 800d130:	6823      	ldr	r3, [r4, #0]
 800d132:	f023 0320 	bic.w	r3, r3, #32
 800d136:	6023      	str	r3, [r4, #0]
 800d138:	2310      	movs	r3, #16
 800d13a:	e7a7      	b.n	800d08c <_printf_i+0xf8>
 800d13c:	4824      	ldr	r0, [pc, #144]	; (800d1d0 <_printf_i+0x23c>)
 800d13e:	e7e4      	b.n	800d10a <_printf_i+0x176>
 800d140:	4615      	mov	r5, r2
 800d142:	e7bd      	b.n	800d0c0 <_printf_i+0x12c>
 800d144:	682b      	ldr	r3, [r5, #0]
 800d146:	6826      	ldr	r6, [r4, #0]
 800d148:	6961      	ldr	r1, [r4, #20]
 800d14a:	1d18      	adds	r0, r3, #4
 800d14c:	6028      	str	r0, [r5, #0]
 800d14e:	0635      	lsls	r5, r6, #24
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	d501      	bpl.n	800d158 <_printf_i+0x1c4>
 800d154:	6019      	str	r1, [r3, #0]
 800d156:	e002      	b.n	800d15e <_printf_i+0x1ca>
 800d158:	0670      	lsls	r0, r6, #25
 800d15a:	d5fb      	bpl.n	800d154 <_printf_i+0x1c0>
 800d15c:	8019      	strh	r1, [r3, #0]
 800d15e:	2300      	movs	r3, #0
 800d160:	6123      	str	r3, [r4, #16]
 800d162:	4615      	mov	r5, r2
 800d164:	e7bc      	b.n	800d0e0 <_printf_i+0x14c>
 800d166:	682b      	ldr	r3, [r5, #0]
 800d168:	1d1a      	adds	r2, r3, #4
 800d16a:	602a      	str	r2, [r5, #0]
 800d16c:	681d      	ldr	r5, [r3, #0]
 800d16e:	6862      	ldr	r2, [r4, #4]
 800d170:	2100      	movs	r1, #0
 800d172:	4628      	mov	r0, r5
 800d174:	f7f3 f844 	bl	8000200 <memchr>
 800d178:	b108      	cbz	r0, 800d17e <_printf_i+0x1ea>
 800d17a:	1b40      	subs	r0, r0, r5
 800d17c:	6060      	str	r0, [r4, #4]
 800d17e:	6863      	ldr	r3, [r4, #4]
 800d180:	6123      	str	r3, [r4, #16]
 800d182:	2300      	movs	r3, #0
 800d184:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d188:	e7aa      	b.n	800d0e0 <_printf_i+0x14c>
 800d18a:	6923      	ldr	r3, [r4, #16]
 800d18c:	462a      	mov	r2, r5
 800d18e:	4649      	mov	r1, r9
 800d190:	4640      	mov	r0, r8
 800d192:	47d0      	blx	sl
 800d194:	3001      	adds	r0, #1
 800d196:	d0ad      	beq.n	800d0f4 <_printf_i+0x160>
 800d198:	6823      	ldr	r3, [r4, #0]
 800d19a:	079b      	lsls	r3, r3, #30
 800d19c:	d413      	bmi.n	800d1c6 <_printf_i+0x232>
 800d19e:	68e0      	ldr	r0, [r4, #12]
 800d1a0:	9b03      	ldr	r3, [sp, #12]
 800d1a2:	4298      	cmp	r0, r3
 800d1a4:	bfb8      	it	lt
 800d1a6:	4618      	movlt	r0, r3
 800d1a8:	e7a6      	b.n	800d0f8 <_printf_i+0x164>
 800d1aa:	2301      	movs	r3, #1
 800d1ac:	4632      	mov	r2, r6
 800d1ae:	4649      	mov	r1, r9
 800d1b0:	4640      	mov	r0, r8
 800d1b2:	47d0      	blx	sl
 800d1b4:	3001      	adds	r0, #1
 800d1b6:	d09d      	beq.n	800d0f4 <_printf_i+0x160>
 800d1b8:	3501      	adds	r5, #1
 800d1ba:	68e3      	ldr	r3, [r4, #12]
 800d1bc:	9903      	ldr	r1, [sp, #12]
 800d1be:	1a5b      	subs	r3, r3, r1
 800d1c0:	42ab      	cmp	r3, r5
 800d1c2:	dcf2      	bgt.n	800d1aa <_printf_i+0x216>
 800d1c4:	e7eb      	b.n	800d19e <_printf_i+0x20a>
 800d1c6:	2500      	movs	r5, #0
 800d1c8:	f104 0619 	add.w	r6, r4, #25
 800d1cc:	e7f5      	b.n	800d1ba <_printf_i+0x226>
 800d1ce:	bf00      	nop
 800d1d0:	0800ef9d 	.word	0x0800ef9d
 800d1d4:	0800efae 	.word	0x0800efae

0800d1d8 <memmove>:
 800d1d8:	4288      	cmp	r0, r1
 800d1da:	b510      	push	{r4, lr}
 800d1dc:	eb01 0402 	add.w	r4, r1, r2
 800d1e0:	d902      	bls.n	800d1e8 <memmove+0x10>
 800d1e2:	4284      	cmp	r4, r0
 800d1e4:	4623      	mov	r3, r4
 800d1e6:	d807      	bhi.n	800d1f8 <memmove+0x20>
 800d1e8:	1e43      	subs	r3, r0, #1
 800d1ea:	42a1      	cmp	r1, r4
 800d1ec:	d008      	beq.n	800d200 <memmove+0x28>
 800d1ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d1f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d1f6:	e7f8      	b.n	800d1ea <memmove+0x12>
 800d1f8:	4402      	add	r2, r0
 800d1fa:	4601      	mov	r1, r0
 800d1fc:	428a      	cmp	r2, r1
 800d1fe:	d100      	bne.n	800d202 <memmove+0x2a>
 800d200:	bd10      	pop	{r4, pc}
 800d202:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d206:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d20a:	e7f7      	b.n	800d1fc <memmove+0x24>

0800d20c <_realloc_r>:
 800d20c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d210:	4680      	mov	r8, r0
 800d212:	4614      	mov	r4, r2
 800d214:	460e      	mov	r6, r1
 800d216:	b921      	cbnz	r1, 800d222 <_realloc_r+0x16>
 800d218:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d21c:	4611      	mov	r1, r2
 800d21e:	f7ff bb95 	b.w	800c94c <_malloc_r>
 800d222:	b92a      	cbnz	r2, 800d230 <_realloc_r+0x24>
 800d224:	f7ff fca4 	bl	800cb70 <_free_r>
 800d228:	4625      	mov	r5, r4
 800d22a:	4628      	mov	r0, r5
 800d22c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d230:	f000 f81b 	bl	800d26a <_malloc_usable_size_r>
 800d234:	4284      	cmp	r4, r0
 800d236:	4607      	mov	r7, r0
 800d238:	d802      	bhi.n	800d240 <_realloc_r+0x34>
 800d23a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d23e:	d812      	bhi.n	800d266 <_realloc_r+0x5a>
 800d240:	4621      	mov	r1, r4
 800d242:	4640      	mov	r0, r8
 800d244:	f7ff fb82 	bl	800c94c <_malloc_r>
 800d248:	4605      	mov	r5, r0
 800d24a:	2800      	cmp	r0, #0
 800d24c:	d0ed      	beq.n	800d22a <_realloc_r+0x1e>
 800d24e:	42bc      	cmp	r4, r7
 800d250:	4622      	mov	r2, r4
 800d252:	4631      	mov	r1, r6
 800d254:	bf28      	it	cs
 800d256:	463a      	movcs	r2, r7
 800d258:	f7ff fc7c 	bl	800cb54 <memcpy>
 800d25c:	4631      	mov	r1, r6
 800d25e:	4640      	mov	r0, r8
 800d260:	f7ff fc86 	bl	800cb70 <_free_r>
 800d264:	e7e1      	b.n	800d22a <_realloc_r+0x1e>
 800d266:	4635      	mov	r5, r6
 800d268:	e7df      	b.n	800d22a <_realloc_r+0x1e>

0800d26a <_malloc_usable_size_r>:
 800d26a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d26e:	1f18      	subs	r0, r3, #4
 800d270:	2b00      	cmp	r3, #0
 800d272:	bfbc      	itt	lt
 800d274:	580b      	ldrlt	r3, [r1, r0]
 800d276:	18c0      	addlt	r0, r0, r3
 800d278:	4770      	bx	lr
	...

0800d27c <pow>:
 800d27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d27e:	ed2d 8b02 	vpush	{d8}
 800d282:	eeb0 8a40 	vmov.f32	s16, s0
 800d286:	eef0 8a60 	vmov.f32	s17, s1
 800d28a:	ec55 4b11 	vmov	r4, r5, d1
 800d28e:	f000 f8f3 	bl	800d478 <__ieee754_pow>
 800d292:	4622      	mov	r2, r4
 800d294:	462b      	mov	r3, r5
 800d296:	4620      	mov	r0, r4
 800d298:	4629      	mov	r1, r5
 800d29a:	ec57 6b10 	vmov	r6, r7, d0
 800d29e:	f7f3 fc55 	bl	8000b4c <__aeabi_dcmpun>
 800d2a2:	2800      	cmp	r0, #0
 800d2a4:	d13b      	bne.n	800d31e <pow+0xa2>
 800d2a6:	ec51 0b18 	vmov	r0, r1, d8
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	f7f3 fc1b 	bl	8000ae8 <__aeabi_dcmpeq>
 800d2b2:	b1b8      	cbz	r0, 800d2e4 <pow+0x68>
 800d2b4:	2200      	movs	r2, #0
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	4620      	mov	r0, r4
 800d2ba:	4629      	mov	r1, r5
 800d2bc:	f7f3 fc14 	bl	8000ae8 <__aeabi_dcmpeq>
 800d2c0:	2800      	cmp	r0, #0
 800d2c2:	d146      	bne.n	800d352 <pow+0xd6>
 800d2c4:	ec45 4b10 	vmov	d0, r4, r5
 800d2c8:	f000 f848 	bl	800d35c <finite>
 800d2cc:	b338      	cbz	r0, 800d31e <pow+0xa2>
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	4620      	mov	r0, r4
 800d2d4:	4629      	mov	r1, r5
 800d2d6:	f7f3 fc11 	bl	8000afc <__aeabi_dcmplt>
 800d2da:	b300      	cbz	r0, 800d31e <pow+0xa2>
 800d2dc:	f7ff fc0e 	bl	800cafc <__errno>
 800d2e0:	2322      	movs	r3, #34	; 0x22
 800d2e2:	e01b      	b.n	800d31c <pow+0xa0>
 800d2e4:	ec47 6b10 	vmov	d0, r6, r7
 800d2e8:	f000 f838 	bl	800d35c <finite>
 800d2ec:	b9e0      	cbnz	r0, 800d328 <pow+0xac>
 800d2ee:	eeb0 0a48 	vmov.f32	s0, s16
 800d2f2:	eef0 0a68 	vmov.f32	s1, s17
 800d2f6:	f000 f831 	bl	800d35c <finite>
 800d2fa:	b1a8      	cbz	r0, 800d328 <pow+0xac>
 800d2fc:	ec45 4b10 	vmov	d0, r4, r5
 800d300:	f000 f82c 	bl	800d35c <finite>
 800d304:	b180      	cbz	r0, 800d328 <pow+0xac>
 800d306:	4632      	mov	r2, r6
 800d308:	463b      	mov	r3, r7
 800d30a:	4630      	mov	r0, r6
 800d30c:	4639      	mov	r1, r7
 800d30e:	f7f3 fc1d 	bl	8000b4c <__aeabi_dcmpun>
 800d312:	2800      	cmp	r0, #0
 800d314:	d0e2      	beq.n	800d2dc <pow+0x60>
 800d316:	f7ff fbf1 	bl	800cafc <__errno>
 800d31a:	2321      	movs	r3, #33	; 0x21
 800d31c:	6003      	str	r3, [r0, #0]
 800d31e:	ecbd 8b02 	vpop	{d8}
 800d322:	ec47 6b10 	vmov	d0, r6, r7
 800d326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d328:	2200      	movs	r2, #0
 800d32a:	2300      	movs	r3, #0
 800d32c:	4630      	mov	r0, r6
 800d32e:	4639      	mov	r1, r7
 800d330:	f7f3 fbda 	bl	8000ae8 <__aeabi_dcmpeq>
 800d334:	2800      	cmp	r0, #0
 800d336:	d0f2      	beq.n	800d31e <pow+0xa2>
 800d338:	eeb0 0a48 	vmov.f32	s0, s16
 800d33c:	eef0 0a68 	vmov.f32	s1, s17
 800d340:	f000 f80c 	bl	800d35c <finite>
 800d344:	2800      	cmp	r0, #0
 800d346:	d0ea      	beq.n	800d31e <pow+0xa2>
 800d348:	ec45 4b10 	vmov	d0, r4, r5
 800d34c:	f000 f806 	bl	800d35c <finite>
 800d350:	e7c3      	b.n	800d2da <pow+0x5e>
 800d352:	4f01      	ldr	r7, [pc, #4]	; (800d358 <pow+0xdc>)
 800d354:	2600      	movs	r6, #0
 800d356:	e7e2      	b.n	800d31e <pow+0xa2>
 800d358:	3ff00000 	.word	0x3ff00000

0800d35c <finite>:
 800d35c:	b082      	sub	sp, #8
 800d35e:	ed8d 0b00 	vstr	d0, [sp]
 800d362:	9801      	ldr	r0, [sp, #4]
 800d364:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800d368:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d36c:	0fc0      	lsrs	r0, r0, #31
 800d36e:	b002      	add	sp, #8
 800d370:	4770      	bx	lr
 800d372:	0000      	movs	r0, r0
 800d374:	0000      	movs	r0, r0
	...

0800d378 <ceil>:
 800d378:	ec51 0b10 	vmov	r0, r1, d0
 800d37c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d384:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800d388:	2e13      	cmp	r6, #19
 800d38a:	ee10 5a10 	vmov	r5, s0
 800d38e:	ee10 8a10 	vmov	r8, s0
 800d392:	460c      	mov	r4, r1
 800d394:	dc2f      	bgt.n	800d3f6 <ceil+0x7e>
 800d396:	2e00      	cmp	r6, #0
 800d398:	da12      	bge.n	800d3c0 <ceil+0x48>
 800d39a:	a333      	add	r3, pc, #204	; (adr r3, 800d468 <ceil+0xf0>)
 800d39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3a0:	f7f2 ff84 	bl	80002ac <__adddf3>
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	f7f3 fbc6 	bl	8000b38 <__aeabi_dcmpgt>
 800d3ac:	b128      	cbz	r0, 800d3ba <ceil+0x42>
 800d3ae:	2c00      	cmp	r4, #0
 800d3b0:	db51      	blt.n	800d456 <ceil+0xde>
 800d3b2:	432c      	orrs	r4, r5
 800d3b4:	d053      	beq.n	800d45e <ceil+0xe6>
 800d3b6:	4c2e      	ldr	r4, [pc, #184]	; (800d470 <ceil+0xf8>)
 800d3b8:	2500      	movs	r5, #0
 800d3ba:	4621      	mov	r1, r4
 800d3bc:	4628      	mov	r0, r5
 800d3be:	e024      	b.n	800d40a <ceil+0x92>
 800d3c0:	4f2c      	ldr	r7, [pc, #176]	; (800d474 <ceil+0xfc>)
 800d3c2:	4137      	asrs	r7, r6
 800d3c4:	ea01 0307 	and.w	r3, r1, r7
 800d3c8:	4303      	orrs	r3, r0
 800d3ca:	d01e      	beq.n	800d40a <ceil+0x92>
 800d3cc:	a326      	add	r3, pc, #152	; (adr r3, 800d468 <ceil+0xf0>)
 800d3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3d2:	f7f2 ff6b 	bl	80002ac <__adddf3>
 800d3d6:	2200      	movs	r2, #0
 800d3d8:	2300      	movs	r3, #0
 800d3da:	f7f3 fbad 	bl	8000b38 <__aeabi_dcmpgt>
 800d3de:	2800      	cmp	r0, #0
 800d3e0:	d0eb      	beq.n	800d3ba <ceil+0x42>
 800d3e2:	2c00      	cmp	r4, #0
 800d3e4:	bfc2      	ittt	gt
 800d3e6:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 800d3ea:	4133      	asrgt	r3, r6
 800d3ec:	18e4      	addgt	r4, r4, r3
 800d3ee:	ea24 0407 	bic.w	r4, r4, r7
 800d3f2:	2500      	movs	r5, #0
 800d3f4:	e7e1      	b.n	800d3ba <ceil+0x42>
 800d3f6:	2e33      	cmp	r6, #51	; 0x33
 800d3f8:	dd0b      	ble.n	800d412 <ceil+0x9a>
 800d3fa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d3fe:	d104      	bne.n	800d40a <ceil+0x92>
 800d400:	ee10 2a10 	vmov	r2, s0
 800d404:	460b      	mov	r3, r1
 800d406:	f7f2 ff51 	bl	80002ac <__adddf3>
 800d40a:	ec41 0b10 	vmov	d0, r0, r1
 800d40e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d412:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800d416:	f04f 37ff 	mov.w	r7, #4294967295
 800d41a:	40df      	lsrs	r7, r3
 800d41c:	4238      	tst	r0, r7
 800d41e:	d0f4      	beq.n	800d40a <ceil+0x92>
 800d420:	a311      	add	r3, pc, #68	; (adr r3, 800d468 <ceil+0xf0>)
 800d422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d426:	f7f2 ff41 	bl	80002ac <__adddf3>
 800d42a:	2200      	movs	r2, #0
 800d42c:	2300      	movs	r3, #0
 800d42e:	f7f3 fb83 	bl	8000b38 <__aeabi_dcmpgt>
 800d432:	2800      	cmp	r0, #0
 800d434:	d0c1      	beq.n	800d3ba <ceil+0x42>
 800d436:	2c00      	cmp	r4, #0
 800d438:	dd0a      	ble.n	800d450 <ceil+0xd8>
 800d43a:	2e14      	cmp	r6, #20
 800d43c:	d101      	bne.n	800d442 <ceil+0xca>
 800d43e:	3401      	adds	r4, #1
 800d440:	e006      	b.n	800d450 <ceil+0xd8>
 800d442:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d446:	2301      	movs	r3, #1
 800d448:	40b3      	lsls	r3, r6
 800d44a:	441d      	add	r5, r3
 800d44c:	45a8      	cmp	r8, r5
 800d44e:	d8f6      	bhi.n	800d43e <ceil+0xc6>
 800d450:	ea25 0507 	bic.w	r5, r5, r7
 800d454:	e7b1      	b.n	800d3ba <ceil+0x42>
 800d456:	2500      	movs	r5, #0
 800d458:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800d45c:	e7ad      	b.n	800d3ba <ceil+0x42>
 800d45e:	4625      	mov	r5, r4
 800d460:	e7ab      	b.n	800d3ba <ceil+0x42>
 800d462:	bf00      	nop
 800d464:	f3af 8000 	nop.w
 800d468:	8800759c 	.word	0x8800759c
 800d46c:	7e37e43c 	.word	0x7e37e43c
 800d470:	3ff00000 	.word	0x3ff00000
 800d474:	000fffff 	.word	0x000fffff

0800d478 <__ieee754_pow>:
 800d478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d47c:	ed2d 8b06 	vpush	{d8-d10}
 800d480:	b089      	sub	sp, #36	; 0x24
 800d482:	ed8d 1b00 	vstr	d1, [sp]
 800d486:	e9dd 2900 	ldrd	r2, r9, [sp]
 800d48a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800d48e:	ea58 0102 	orrs.w	r1, r8, r2
 800d492:	ec57 6b10 	vmov	r6, r7, d0
 800d496:	d115      	bne.n	800d4c4 <__ieee754_pow+0x4c>
 800d498:	19b3      	adds	r3, r6, r6
 800d49a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800d49e:	4152      	adcs	r2, r2
 800d4a0:	4299      	cmp	r1, r3
 800d4a2:	4b89      	ldr	r3, [pc, #548]	; (800d6c8 <__ieee754_pow+0x250>)
 800d4a4:	4193      	sbcs	r3, r2
 800d4a6:	f080 84d1 	bcs.w	800de4c <__ieee754_pow+0x9d4>
 800d4aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d4ae:	4630      	mov	r0, r6
 800d4b0:	4639      	mov	r1, r7
 800d4b2:	f7f2 fefb 	bl	80002ac <__adddf3>
 800d4b6:	ec41 0b10 	vmov	d0, r0, r1
 800d4ba:	b009      	add	sp, #36	; 0x24
 800d4bc:	ecbd 8b06 	vpop	{d8-d10}
 800d4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4c4:	4b81      	ldr	r3, [pc, #516]	; (800d6cc <__ieee754_pow+0x254>)
 800d4c6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800d4ca:	429c      	cmp	r4, r3
 800d4cc:	ee10 aa10 	vmov	sl, s0
 800d4d0:	463d      	mov	r5, r7
 800d4d2:	dc06      	bgt.n	800d4e2 <__ieee754_pow+0x6a>
 800d4d4:	d101      	bne.n	800d4da <__ieee754_pow+0x62>
 800d4d6:	2e00      	cmp	r6, #0
 800d4d8:	d1e7      	bne.n	800d4aa <__ieee754_pow+0x32>
 800d4da:	4598      	cmp	r8, r3
 800d4dc:	dc01      	bgt.n	800d4e2 <__ieee754_pow+0x6a>
 800d4de:	d10f      	bne.n	800d500 <__ieee754_pow+0x88>
 800d4e0:	b172      	cbz	r2, 800d500 <__ieee754_pow+0x88>
 800d4e2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800d4e6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800d4ea:	ea55 050a 	orrs.w	r5, r5, sl
 800d4ee:	d1dc      	bne.n	800d4aa <__ieee754_pow+0x32>
 800d4f0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d4f4:	18db      	adds	r3, r3, r3
 800d4f6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800d4fa:	4152      	adcs	r2, r2
 800d4fc:	429d      	cmp	r5, r3
 800d4fe:	e7d0      	b.n	800d4a2 <__ieee754_pow+0x2a>
 800d500:	2d00      	cmp	r5, #0
 800d502:	da3b      	bge.n	800d57c <__ieee754_pow+0x104>
 800d504:	4b72      	ldr	r3, [pc, #456]	; (800d6d0 <__ieee754_pow+0x258>)
 800d506:	4598      	cmp	r8, r3
 800d508:	dc51      	bgt.n	800d5ae <__ieee754_pow+0x136>
 800d50a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800d50e:	4598      	cmp	r8, r3
 800d510:	f340 84ab 	ble.w	800de6a <__ieee754_pow+0x9f2>
 800d514:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d518:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d51c:	2b14      	cmp	r3, #20
 800d51e:	dd0f      	ble.n	800d540 <__ieee754_pow+0xc8>
 800d520:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800d524:	fa22 f103 	lsr.w	r1, r2, r3
 800d528:	fa01 f303 	lsl.w	r3, r1, r3
 800d52c:	4293      	cmp	r3, r2
 800d52e:	f040 849c 	bne.w	800de6a <__ieee754_pow+0x9f2>
 800d532:	f001 0101 	and.w	r1, r1, #1
 800d536:	f1c1 0302 	rsb	r3, r1, #2
 800d53a:	9304      	str	r3, [sp, #16]
 800d53c:	b182      	cbz	r2, 800d560 <__ieee754_pow+0xe8>
 800d53e:	e05f      	b.n	800d600 <__ieee754_pow+0x188>
 800d540:	2a00      	cmp	r2, #0
 800d542:	d15b      	bne.n	800d5fc <__ieee754_pow+0x184>
 800d544:	f1c3 0314 	rsb	r3, r3, #20
 800d548:	fa48 f103 	asr.w	r1, r8, r3
 800d54c:	fa01 f303 	lsl.w	r3, r1, r3
 800d550:	4543      	cmp	r3, r8
 800d552:	f040 8487 	bne.w	800de64 <__ieee754_pow+0x9ec>
 800d556:	f001 0101 	and.w	r1, r1, #1
 800d55a:	f1c1 0302 	rsb	r3, r1, #2
 800d55e:	9304      	str	r3, [sp, #16]
 800d560:	4b5c      	ldr	r3, [pc, #368]	; (800d6d4 <__ieee754_pow+0x25c>)
 800d562:	4598      	cmp	r8, r3
 800d564:	d132      	bne.n	800d5cc <__ieee754_pow+0x154>
 800d566:	f1b9 0f00 	cmp.w	r9, #0
 800d56a:	f280 8477 	bge.w	800de5c <__ieee754_pow+0x9e4>
 800d56e:	4959      	ldr	r1, [pc, #356]	; (800d6d4 <__ieee754_pow+0x25c>)
 800d570:	4632      	mov	r2, r6
 800d572:	463b      	mov	r3, r7
 800d574:	2000      	movs	r0, #0
 800d576:	f7f3 f979 	bl	800086c <__aeabi_ddiv>
 800d57a:	e79c      	b.n	800d4b6 <__ieee754_pow+0x3e>
 800d57c:	2300      	movs	r3, #0
 800d57e:	9304      	str	r3, [sp, #16]
 800d580:	2a00      	cmp	r2, #0
 800d582:	d13d      	bne.n	800d600 <__ieee754_pow+0x188>
 800d584:	4b51      	ldr	r3, [pc, #324]	; (800d6cc <__ieee754_pow+0x254>)
 800d586:	4598      	cmp	r8, r3
 800d588:	d1ea      	bne.n	800d560 <__ieee754_pow+0xe8>
 800d58a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d58e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d592:	ea53 030a 	orrs.w	r3, r3, sl
 800d596:	f000 8459 	beq.w	800de4c <__ieee754_pow+0x9d4>
 800d59a:	4b4f      	ldr	r3, [pc, #316]	; (800d6d8 <__ieee754_pow+0x260>)
 800d59c:	429c      	cmp	r4, r3
 800d59e:	dd08      	ble.n	800d5b2 <__ieee754_pow+0x13a>
 800d5a0:	f1b9 0f00 	cmp.w	r9, #0
 800d5a4:	f2c0 8456 	blt.w	800de54 <__ieee754_pow+0x9dc>
 800d5a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d5ac:	e783      	b.n	800d4b6 <__ieee754_pow+0x3e>
 800d5ae:	2302      	movs	r3, #2
 800d5b0:	e7e5      	b.n	800d57e <__ieee754_pow+0x106>
 800d5b2:	f1b9 0f00 	cmp.w	r9, #0
 800d5b6:	f04f 0000 	mov.w	r0, #0
 800d5ba:	f04f 0100 	mov.w	r1, #0
 800d5be:	f6bf af7a 	bge.w	800d4b6 <__ieee754_pow+0x3e>
 800d5c2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800d5c6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d5ca:	e774      	b.n	800d4b6 <__ieee754_pow+0x3e>
 800d5cc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800d5d0:	d106      	bne.n	800d5e0 <__ieee754_pow+0x168>
 800d5d2:	4632      	mov	r2, r6
 800d5d4:	463b      	mov	r3, r7
 800d5d6:	4630      	mov	r0, r6
 800d5d8:	4639      	mov	r1, r7
 800d5da:	f7f3 f81d 	bl	8000618 <__aeabi_dmul>
 800d5de:	e76a      	b.n	800d4b6 <__ieee754_pow+0x3e>
 800d5e0:	4b3e      	ldr	r3, [pc, #248]	; (800d6dc <__ieee754_pow+0x264>)
 800d5e2:	4599      	cmp	r9, r3
 800d5e4:	d10c      	bne.n	800d600 <__ieee754_pow+0x188>
 800d5e6:	2d00      	cmp	r5, #0
 800d5e8:	db0a      	blt.n	800d600 <__ieee754_pow+0x188>
 800d5ea:	ec47 6b10 	vmov	d0, r6, r7
 800d5ee:	b009      	add	sp, #36	; 0x24
 800d5f0:	ecbd 8b06 	vpop	{d8-d10}
 800d5f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5f8:	f000 bd20 	b.w	800e03c <__ieee754_sqrt>
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	9304      	str	r3, [sp, #16]
 800d600:	ec47 6b10 	vmov	d0, r6, r7
 800d604:	f000 fc62 	bl	800decc <fabs>
 800d608:	ec51 0b10 	vmov	r0, r1, d0
 800d60c:	f1ba 0f00 	cmp.w	sl, #0
 800d610:	d129      	bne.n	800d666 <__ieee754_pow+0x1ee>
 800d612:	b124      	cbz	r4, 800d61e <__ieee754_pow+0x1a6>
 800d614:	4b2f      	ldr	r3, [pc, #188]	; (800d6d4 <__ieee754_pow+0x25c>)
 800d616:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800d61a:	429a      	cmp	r2, r3
 800d61c:	d123      	bne.n	800d666 <__ieee754_pow+0x1ee>
 800d61e:	f1b9 0f00 	cmp.w	r9, #0
 800d622:	da05      	bge.n	800d630 <__ieee754_pow+0x1b8>
 800d624:	4602      	mov	r2, r0
 800d626:	460b      	mov	r3, r1
 800d628:	2000      	movs	r0, #0
 800d62a:	492a      	ldr	r1, [pc, #168]	; (800d6d4 <__ieee754_pow+0x25c>)
 800d62c:	f7f3 f91e 	bl	800086c <__aeabi_ddiv>
 800d630:	2d00      	cmp	r5, #0
 800d632:	f6bf af40 	bge.w	800d4b6 <__ieee754_pow+0x3e>
 800d636:	9b04      	ldr	r3, [sp, #16]
 800d638:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d63c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d640:	431c      	orrs	r4, r3
 800d642:	d108      	bne.n	800d656 <__ieee754_pow+0x1de>
 800d644:	4602      	mov	r2, r0
 800d646:	460b      	mov	r3, r1
 800d648:	4610      	mov	r0, r2
 800d64a:	4619      	mov	r1, r3
 800d64c:	f7f2 fe2c 	bl	80002a8 <__aeabi_dsub>
 800d650:	4602      	mov	r2, r0
 800d652:	460b      	mov	r3, r1
 800d654:	e78f      	b.n	800d576 <__ieee754_pow+0xfe>
 800d656:	9b04      	ldr	r3, [sp, #16]
 800d658:	2b01      	cmp	r3, #1
 800d65a:	f47f af2c 	bne.w	800d4b6 <__ieee754_pow+0x3e>
 800d65e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d662:	4619      	mov	r1, r3
 800d664:	e727      	b.n	800d4b6 <__ieee754_pow+0x3e>
 800d666:	0feb      	lsrs	r3, r5, #31
 800d668:	3b01      	subs	r3, #1
 800d66a:	9306      	str	r3, [sp, #24]
 800d66c:	9a06      	ldr	r2, [sp, #24]
 800d66e:	9b04      	ldr	r3, [sp, #16]
 800d670:	4313      	orrs	r3, r2
 800d672:	d102      	bne.n	800d67a <__ieee754_pow+0x202>
 800d674:	4632      	mov	r2, r6
 800d676:	463b      	mov	r3, r7
 800d678:	e7e6      	b.n	800d648 <__ieee754_pow+0x1d0>
 800d67a:	4b19      	ldr	r3, [pc, #100]	; (800d6e0 <__ieee754_pow+0x268>)
 800d67c:	4598      	cmp	r8, r3
 800d67e:	f340 80fb 	ble.w	800d878 <__ieee754_pow+0x400>
 800d682:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d686:	4598      	cmp	r8, r3
 800d688:	4b13      	ldr	r3, [pc, #76]	; (800d6d8 <__ieee754_pow+0x260>)
 800d68a:	dd0c      	ble.n	800d6a6 <__ieee754_pow+0x22e>
 800d68c:	429c      	cmp	r4, r3
 800d68e:	dc0f      	bgt.n	800d6b0 <__ieee754_pow+0x238>
 800d690:	f1b9 0f00 	cmp.w	r9, #0
 800d694:	da0f      	bge.n	800d6b6 <__ieee754_pow+0x23e>
 800d696:	2000      	movs	r0, #0
 800d698:	b009      	add	sp, #36	; 0x24
 800d69a:	ecbd 8b06 	vpop	{d8-d10}
 800d69e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6a2:	f000 bcc2 	b.w	800e02a <__math_oflow>
 800d6a6:	429c      	cmp	r4, r3
 800d6a8:	dbf2      	blt.n	800d690 <__ieee754_pow+0x218>
 800d6aa:	4b0a      	ldr	r3, [pc, #40]	; (800d6d4 <__ieee754_pow+0x25c>)
 800d6ac:	429c      	cmp	r4, r3
 800d6ae:	dd19      	ble.n	800d6e4 <__ieee754_pow+0x26c>
 800d6b0:	f1b9 0f00 	cmp.w	r9, #0
 800d6b4:	dcef      	bgt.n	800d696 <__ieee754_pow+0x21e>
 800d6b6:	2000      	movs	r0, #0
 800d6b8:	b009      	add	sp, #36	; 0x24
 800d6ba:	ecbd 8b06 	vpop	{d8-d10}
 800d6be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6c2:	f000 bca9 	b.w	800e018 <__math_uflow>
 800d6c6:	bf00      	nop
 800d6c8:	fff00000 	.word	0xfff00000
 800d6cc:	7ff00000 	.word	0x7ff00000
 800d6d0:	433fffff 	.word	0x433fffff
 800d6d4:	3ff00000 	.word	0x3ff00000
 800d6d8:	3fefffff 	.word	0x3fefffff
 800d6dc:	3fe00000 	.word	0x3fe00000
 800d6e0:	41e00000 	.word	0x41e00000
 800d6e4:	4b60      	ldr	r3, [pc, #384]	; (800d868 <__ieee754_pow+0x3f0>)
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	f7f2 fdde 	bl	80002a8 <__aeabi_dsub>
 800d6ec:	a354      	add	r3, pc, #336	; (adr r3, 800d840 <__ieee754_pow+0x3c8>)
 800d6ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6f2:	4604      	mov	r4, r0
 800d6f4:	460d      	mov	r5, r1
 800d6f6:	f7f2 ff8f 	bl	8000618 <__aeabi_dmul>
 800d6fa:	a353      	add	r3, pc, #332	; (adr r3, 800d848 <__ieee754_pow+0x3d0>)
 800d6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d700:	4606      	mov	r6, r0
 800d702:	460f      	mov	r7, r1
 800d704:	4620      	mov	r0, r4
 800d706:	4629      	mov	r1, r5
 800d708:	f7f2 ff86 	bl	8000618 <__aeabi_dmul>
 800d70c:	4b57      	ldr	r3, [pc, #348]	; (800d86c <__ieee754_pow+0x3f4>)
 800d70e:	4682      	mov	sl, r0
 800d710:	468b      	mov	fp, r1
 800d712:	2200      	movs	r2, #0
 800d714:	4620      	mov	r0, r4
 800d716:	4629      	mov	r1, r5
 800d718:	f7f2 ff7e 	bl	8000618 <__aeabi_dmul>
 800d71c:	4602      	mov	r2, r0
 800d71e:	460b      	mov	r3, r1
 800d720:	a14b      	add	r1, pc, #300	; (adr r1, 800d850 <__ieee754_pow+0x3d8>)
 800d722:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d726:	f7f2 fdbf 	bl	80002a8 <__aeabi_dsub>
 800d72a:	4622      	mov	r2, r4
 800d72c:	462b      	mov	r3, r5
 800d72e:	f7f2 ff73 	bl	8000618 <__aeabi_dmul>
 800d732:	4602      	mov	r2, r0
 800d734:	460b      	mov	r3, r1
 800d736:	2000      	movs	r0, #0
 800d738:	494d      	ldr	r1, [pc, #308]	; (800d870 <__ieee754_pow+0x3f8>)
 800d73a:	f7f2 fdb5 	bl	80002a8 <__aeabi_dsub>
 800d73e:	4622      	mov	r2, r4
 800d740:	4680      	mov	r8, r0
 800d742:	4689      	mov	r9, r1
 800d744:	462b      	mov	r3, r5
 800d746:	4620      	mov	r0, r4
 800d748:	4629      	mov	r1, r5
 800d74a:	f7f2 ff65 	bl	8000618 <__aeabi_dmul>
 800d74e:	4602      	mov	r2, r0
 800d750:	460b      	mov	r3, r1
 800d752:	4640      	mov	r0, r8
 800d754:	4649      	mov	r1, r9
 800d756:	f7f2 ff5f 	bl	8000618 <__aeabi_dmul>
 800d75a:	a33f      	add	r3, pc, #252	; (adr r3, 800d858 <__ieee754_pow+0x3e0>)
 800d75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d760:	f7f2 ff5a 	bl	8000618 <__aeabi_dmul>
 800d764:	4602      	mov	r2, r0
 800d766:	460b      	mov	r3, r1
 800d768:	4650      	mov	r0, sl
 800d76a:	4659      	mov	r1, fp
 800d76c:	f7f2 fd9c 	bl	80002a8 <__aeabi_dsub>
 800d770:	4602      	mov	r2, r0
 800d772:	460b      	mov	r3, r1
 800d774:	4680      	mov	r8, r0
 800d776:	4689      	mov	r9, r1
 800d778:	4630      	mov	r0, r6
 800d77a:	4639      	mov	r1, r7
 800d77c:	f7f2 fd96 	bl	80002ac <__adddf3>
 800d780:	2000      	movs	r0, #0
 800d782:	4632      	mov	r2, r6
 800d784:	463b      	mov	r3, r7
 800d786:	4604      	mov	r4, r0
 800d788:	460d      	mov	r5, r1
 800d78a:	f7f2 fd8d 	bl	80002a8 <__aeabi_dsub>
 800d78e:	4602      	mov	r2, r0
 800d790:	460b      	mov	r3, r1
 800d792:	4640      	mov	r0, r8
 800d794:	4649      	mov	r1, r9
 800d796:	f7f2 fd87 	bl	80002a8 <__aeabi_dsub>
 800d79a:	9b04      	ldr	r3, [sp, #16]
 800d79c:	9a06      	ldr	r2, [sp, #24]
 800d79e:	3b01      	subs	r3, #1
 800d7a0:	4313      	orrs	r3, r2
 800d7a2:	4682      	mov	sl, r0
 800d7a4:	468b      	mov	fp, r1
 800d7a6:	f040 81e7 	bne.w	800db78 <__ieee754_pow+0x700>
 800d7aa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800d860 <__ieee754_pow+0x3e8>
 800d7ae:	eeb0 8a47 	vmov.f32	s16, s14
 800d7b2:	eef0 8a67 	vmov.f32	s17, s15
 800d7b6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d7ba:	2600      	movs	r6, #0
 800d7bc:	4632      	mov	r2, r6
 800d7be:	463b      	mov	r3, r7
 800d7c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d7c4:	f7f2 fd70 	bl	80002a8 <__aeabi_dsub>
 800d7c8:	4622      	mov	r2, r4
 800d7ca:	462b      	mov	r3, r5
 800d7cc:	f7f2 ff24 	bl	8000618 <__aeabi_dmul>
 800d7d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d7d4:	4680      	mov	r8, r0
 800d7d6:	4689      	mov	r9, r1
 800d7d8:	4650      	mov	r0, sl
 800d7da:	4659      	mov	r1, fp
 800d7dc:	f7f2 ff1c 	bl	8000618 <__aeabi_dmul>
 800d7e0:	4602      	mov	r2, r0
 800d7e2:	460b      	mov	r3, r1
 800d7e4:	4640      	mov	r0, r8
 800d7e6:	4649      	mov	r1, r9
 800d7e8:	f7f2 fd60 	bl	80002ac <__adddf3>
 800d7ec:	4632      	mov	r2, r6
 800d7ee:	463b      	mov	r3, r7
 800d7f0:	4680      	mov	r8, r0
 800d7f2:	4689      	mov	r9, r1
 800d7f4:	4620      	mov	r0, r4
 800d7f6:	4629      	mov	r1, r5
 800d7f8:	f7f2 ff0e 	bl	8000618 <__aeabi_dmul>
 800d7fc:	460b      	mov	r3, r1
 800d7fe:	4604      	mov	r4, r0
 800d800:	460d      	mov	r5, r1
 800d802:	4602      	mov	r2, r0
 800d804:	4649      	mov	r1, r9
 800d806:	4640      	mov	r0, r8
 800d808:	f7f2 fd50 	bl	80002ac <__adddf3>
 800d80c:	4b19      	ldr	r3, [pc, #100]	; (800d874 <__ieee754_pow+0x3fc>)
 800d80e:	4299      	cmp	r1, r3
 800d810:	ec45 4b19 	vmov	d9, r4, r5
 800d814:	4606      	mov	r6, r0
 800d816:	460f      	mov	r7, r1
 800d818:	468b      	mov	fp, r1
 800d81a:	f340 82f0 	ble.w	800ddfe <__ieee754_pow+0x986>
 800d81e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d822:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d826:	4303      	orrs	r3, r0
 800d828:	f000 81e4 	beq.w	800dbf4 <__ieee754_pow+0x77c>
 800d82c:	ec51 0b18 	vmov	r0, r1, d8
 800d830:	2200      	movs	r2, #0
 800d832:	2300      	movs	r3, #0
 800d834:	f7f3 f962 	bl	8000afc <__aeabi_dcmplt>
 800d838:	3800      	subs	r0, #0
 800d83a:	bf18      	it	ne
 800d83c:	2001      	movne	r0, #1
 800d83e:	e72b      	b.n	800d698 <__ieee754_pow+0x220>
 800d840:	60000000 	.word	0x60000000
 800d844:	3ff71547 	.word	0x3ff71547
 800d848:	f85ddf44 	.word	0xf85ddf44
 800d84c:	3e54ae0b 	.word	0x3e54ae0b
 800d850:	55555555 	.word	0x55555555
 800d854:	3fd55555 	.word	0x3fd55555
 800d858:	652b82fe 	.word	0x652b82fe
 800d85c:	3ff71547 	.word	0x3ff71547
 800d860:	00000000 	.word	0x00000000
 800d864:	bff00000 	.word	0xbff00000
 800d868:	3ff00000 	.word	0x3ff00000
 800d86c:	3fd00000 	.word	0x3fd00000
 800d870:	3fe00000 	.word	0x3fe00000
 800d874:	408fffff 	.word	0x408fffff
 800d878:	4bd5      	ldr	r3, [pc, #852]	; (800dbd0 <__ieee754_pow+0x758>)
 800d87a:	402b      	ands	r3, r5
 800d87c:	2200      	movs	r2, #0
 800d87e:	b92b      	cbnz	r3, 800d88c <__ieee754_pow+0x414>
 800d880:	4bd4      	ldr	r3, [pc, #848]	; (800dbd4 <__ieee754_pow+0x75c>)
 800d882:	f7f2 fec9 	bl	8000618 <__aeabi_dmul>
 800d886:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d88a:	460c      	mov	r4, r1
 800d88c:	1523      	asrs	r3, r4, #20
 800d88e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d892:	4413      	add	r3, r2
 800d894:	9305      	str	r3, [sp, #20]
 800d896:	4bd0      	ldr	r3, [pc, #832]	; (800dbd8 <__ieee754_pow+0x760>)
 800d898:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d89c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800d8a0:	429c      	cmp	r4, r3
 800d8a2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d8a6:	dd08      	ble.n	800d8ba <__ieee754_pow+0x442>
 800d8a8:	4bcc      	ldr	r3, [pc, #816]	; (800dbdc <__ieee754_pow+0x764>)
 800d8aa:	429c      	cmp	r4, r3
 800d8ac:	f340 8162 	ble.w	800db74 <__ieee754_pow+0x6fc>
 800d8b0:	9b05      	ldr	r3, [sp, #20]
 800d8b2:	3301      	adds	r3, #1
 800d8b4:	9305      	str	r3, [sp, #20]
 800d8b6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800d8ba:	2400      	movs	r4, #0
 800d8bc:	00e3      	lsls	r3, r4, #3
 800d8be:	9307      	str	r3, [sp, #28]
 800d8c0:	4bc7      	ldr	r3, [pc, #796]	; (800dbe0 <__ieee754_pow+0x768>)
 800d8c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d8c6:	ed93 7b00 	vldr	d7, [r3]
 800d8ca:	4629      	mov	r1, r5
 800d8cc:	ec53 2b17 	vmov	r2, r3, d7
 800d8d0:	eeb0 9a47 	vmov.f32	s18, s14
 800d8d4:	eef0 9a67 	vmov.f32	s19, s15
 800d8d8:	4682      	mov	sl, r0
 800d8da:	f7f2 fce5 	bl	80002a8 <__aeabi_dsub>
 800d8de:	4652      	mov	r2, sl
 800d8e0:	4606      	mov	r6, r0
 800d8e2:	460f      	mov	r7, r1
 800d8e4:	462b      	mov	r3, r5
 800d8e6:	ec51 0b19 	vmov	r0, r1, d9
 800d8ea:	f7f2 fcdf 	bl	80002ac <__adddf3>
 800d8ee:	4602      	mov	r2, r0
 800d8f0:	460b      	mov	r3, r1
 800d8f2:	2000      	movs	r0, #0
 800d8f4:	49bb      	ldr	r1, [pc, #748]	; (800dbe4 <__ieee754_pow+0x76c>)
 800d8f6:	f7f2 ffb9 	bl	800086c <__aeabi_ddiv>
 800d8fa:	ec41 0b1a 	vmov	d10, r0, r1
 800d8fe:	4602      	mov	r2, r0
 800d900:	460b      	mov	r3, r1
 800d902:	4630      	mov	r0, r6
 800d904:	4639      	mov	r1, r7
 800d906:	f7f2 fe87 	bl	8000618 <__aeabi_dmul>
 800d90a:	2300      	movs	r3, #0
 800d90c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d910:	9302      	str	r3, [sp, #8]
 800d912:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d916:	46ab      	mov	fp, r5
 800d918:	106d      	asrs	r5, r5, #1
 800d91a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800d91e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800d922:	ec41 0b18 	vmov	d8, r0, r1
 800d926:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800d92a:	2200      	movs	r2, #0
 800d92c:	4640      	mov	r0, r8
 800d92e:	4649      	mov	r1, r9
 800d930:	4614      	mov	r4, r2
 800d932:	461d      	mov	r5, r3
 800d934:	f7f2 fe70 	bl	8000618 <__aeabi_dmul>
 800d938:	4602      	mov	r2, r0
 800d93a:	460b      	mov	r3, r1
 800d93c:	4630      	mov	r0, r6
 800d93e:	4639      	mov	r1, r7
 800d940:	f7f2 fcb2 	bl	80002a8 <__aeabi_dsub>
 800d944:	ec53 2b19 	vmov	r2, r3, d9
 800d948:	4606      	mov	r6, r0
 800d94a:	460f      	mov	r7, r1
 800d94c:	4620      	mov	r0, r4
 800d94e:	4629      	mov	r1, r5
 800d950:	f7f2 fcaa 	bl	80002a8 <__aeabi_dsub>
 800d954:	4602      	mov	r2, r0
 800d956:	460b      	mov	r3, r1
 800d958:	4650      	mov	r0, sl
 800d95a:	4659      	mov	r1, fp
 800d95c:	f7f2 fca4 	bl	80002a8 <__aeabi_dsub>
 800d960:	4642      	mov	r2, r8
 800d962:	464b      	mov	r3, r9
 800d964:	f7f2 fe58 	bl	8000618 <__aeabi_dmul>
 800d968:	4602      	mov	r2, r0
 800d96a:	460b      	mov	r3, r1
 800d96c:	4630      	mov	r0, r6
 800d96e:	4639      	mov	r1, r7
 800d970:	f7f2 fc9a 	bl	80002a8 <__aeabi_dsub>
 800d974:	ec53 2b1a 	vmov	r2, r3, d10
 800d978:	f7f2 fe4e 	bl	8000618 <__aeabi_dmul>
 800d97c:	ec53 2b18 	vmov	r2, r3, d8
 800d980:	ec41 0b19 	vmov	d9, r0, r1
 800d984:	ec51 0b18 	vmov	r0, r1, d8
 800d988:	f7f2 fe46 	bl	8000618 <__aeabi_dmul>
 800d98c:	a37c      	add	r3, pc, #496	; (adr r3, 800db80 <__ieee754_pow+0x708>)
 800d98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d992:	4604      	mov	r4, r0
 800d994:	460d      	mov	r5, r1
 800d996:	f7f2 fe3f 	bl	8000618 <__aeabi_dmul>
 800d99a:	a37b      	add	r3, pc, #492	; (adr r3, 800db88 <__ieee754_pow+0x710>)
 800d99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9a0:	f7f2 fc84 	bl	80002ac <__adddf3>
 800d9a4:	4622      	mov	r2, r4
 800d9a6:	462b      	mov	r3, r5
 800d9a8:	f7f2 fe36 	bl	8000618 <__aeabi_dmul>
 800d9ac:	a378      	add	r3, pc, #480	; (adr r3, 800db90 <__ieee754_pow+0x718>)
 800d9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9b2:	f7f2 fc7b 	bl	80002ac <__adddf3>
 800d9b6:	4622      	mov	r2, r4
 800d9b8:	462b      	mov	r3, r5
 800d9ba:	f7f2 fe2d 	bl	8000618 <__aeabi_dmul>
 800d9be:	a376      	add	r3, pc, #472	; (adr r3, 800db98 <__ieee754_pow+0x720>)
 800d9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9c4:	f7f2 fc72 	bl	80002ac <__adddf3>
 800d9c8:	4622      	mov	r2, r4
 800d9ca:	462b      	mov	r3, r5
 800d9cc:	f7f2 fe24 	bl	8000618 <__aeabi_dmul>
 800d9d0:	a373      	add	r3, pc, #460	; (adr r3, 800dba0 <__ieee754_pow+0x728>)
 800d9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9d6:	f7f2 fc69 	bl	80002ac <__adddf3>
 800d9da:	4622      	mov	r2, r4
 800d9dc:	462b      	mov	r3, r5
 800d9de:	f7f2 fe1b 	bl	8000618 <__aeabi_dmul>
 800d9e2:	a371      	add	r3, pc, #452	; (adr r3, 800dba8 <__ieee754_pow+0x730>)
 800d9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9e8:	f7f2 fc60 	bl	80002ac <__adddf3>
 800d9ec:	4622      	mov	r2, r4
 800d9ee:	4606      	mov	r6, r0
 800d9f0:	460f      	mov	r7, r1
 800d9f2:	462b      	mov	r3, r5
 800d9f4:	4620      	mov	r0, r4
 800d9f6:	4629      	mov	r1, r5
 800d9f8:	f7f2 fe0e 	bl	8000618 <__aeabi_dmul>
 800d9fc:	4602      	mov	r2, r0
 800d9fe:	460b      	mov	r3, r1
 800da00:	4630      	mov	r0, r6
 800da02:	4639      	mov	r1, r7
 800da04:	f7f2 fe08 	bl	8000618 <__aeabi_dmul>
 800da08:	4642      	mov	r2, r8
 800da0a:	4604      	mov	r4, r0
 800da0c:	460d      	mov	r5, r1
 800da0e:	464b      	mov	r3, r9
 800da10:	ec51 0b18 	vmov	r0, r1, d8
 800da14:	f7f2 fc4a 	bl	80002ac <__adddf3>
 800da18:	ec53 2b19 	vmov	r2, r3, d9
 800da1c:	f7f2 fdfc 	bl	8000618 <__aeabi_dmul>
 800da20:	4622      	mov	r2, r4
 800da22:	462b      	mov	r3, r5
 800da24:	f7f2 fc42 	bl	80002ac <__adddf3>
 800da28:	4642      	mov	r2, r8
 800da2a:	4682      	mov	sl, r0
 800da2c:	468b      	mov	fp, r1
 800da2e:	464b      	mov	r3, r9
 800da30:	4640      	mov	r0, r8
 800da32:	4649      	mov	r1, r9
 800da34:	f7f2 fdf0 	bl	8000618 <__aeabi_dmul>
 800da38:	4b6b      	ldr	r3, [pc, #428]	; (800dbe8 <__ieee754_pow+0x770>)
 800da3a:	2200      	movs	r2, #0
 800da3c:	4606      	mov	r6, r0
 800da3e:	460f      	mov	r7, r1
 800da40:	f7f2 fc34 	bl	80002ac <__adddf3>
 800da44:	4652      	mov	r2, sl
 800da46:	465b      	mov	r3, fp
 800da48:	f7f2 fc30 	bl	80002ac <__adddf3>
 800da4c:	2000      	movs	r0, #0
 800da4e:	4604      	mov	r4, r0
 800da50:	460d      	mov	r5, r1
 800da52:	4602      	mov	r2, r0
 800da54:	460b      	mov	r3, r1
 800da56:	4640      	mov	r0, r8
 800da58:	4649      	mov	r1, r9
 800da5a:	f7f2 fddd 	bl	8000618 <__aeabi_dmul>
 800da5e:	4b62      	ldr	r3, [pc, #392]	; (800dbe8 <__ieee754_pow+0x770>)
 800da60:	4680      	mov	r8, r0
 800da62:	4689      	mov	r9, r1
 800da64:	2200      	movs	r2, #0
 800da66:	4620      	mov	r0, r4
 800da68:	4629      	mov	r1, r5
 800da6a:	f7f2 fc1d 	bl	80002a8 <__aeabi_dsub>
 800da6e:	4632      	mov	r2, r6
 800da70:	463b      	mov	r3, r7
 800da72:	f7f2 fc19 	bl	80002a8 <__aeabi_dsub>
 800da76:	4602      	mov	r2, r0
 800da78:	460b      	mov	r3, r1
 800da7a:	4650      	mov	r0, sl
 800da7c:	4659      	mov	r1, fp
 800da7e:	f7f2 fc13 	bl	80002a8 <__aeabi_dsub>
 800da82:	ec53 2b18 	vmov	r2, r3, d8
 800da86:	f7f2 fdc7 	bl	8000618 <__aeabi_dmul>
 800da8a:	4622      	mov	r2, r4
 800da8c:	4606      	mov	r6, r0
 800da8e:	460f      	mov	r7, r1
 800da90:	462b      	mov	r3, r5
 800da92:	ec51 0b19 	vmov	r0, r1, d9
 800da96:	f7f2 fdbf 	bl	8000618 <__aeabi_dmul>
 800da9a:	4602      	mov	r2, r0
 800da9c:	460b      	mov	r3, r1
 800da9e:	4630      	mov	r0, r6
 800daa0:	4639      	mov	r1, r7
 800daa2:	f7f2 fc03 	bl	80002ac <__adddf3>
 800daa6:	4606      	mov	r6, r0
 800daa8:	460f      	mov	r7, r1
 800daaa:	4602      	mov	r2, r0
 800daac:	460b      	mov	r3, r1
 800daae:	4640      	mov	r0, r8
 800dab0:	4649      	mov	r1, r9
 800dab2:	f7f2 fbfb 	bl	80002ac <__adddf3>
 800dab6:	a33e      	add	r3, pc, #248	; (adr r3, 800dbb0 <__ieee754_pow+0x738>)
 800dab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dabc:	2000      	movs	r0, #0
 800dabe:	4604      	mov	r4, r0
 800dac0:	460d      	mov	r5, r1
 800dac2:	f7f2 fda9 	bl	8000618 <__aeabi_dmul>
 800dac6:	4642      	mov	r2, r8
 800dac8:	ec41 0b18 	vmov	d8, r0, r1
 800dacc:	464b      	mov	r3, r9
 800dace:	4620      	mov	r0, r4
 800dad0:	4629      	mov	r1, r5
 800dad2:	f7f2 fbe9 	bl	80002a8 <__aeabi_dsub>
 800dad6:	4602      	mov	r2, r0
 800dad8:	460b      	mov	r3, r1
 800dada:	4630      	mov	r0, r6
 800dadc:	4639      	mov	r1, r7
 800dade:	f7f2 fbe3 	bl	80002a8 <__aeabi_dsub>
 800dae2:	a335      	add	r3, pc, #212	; (adr r3, 800dbb8 <__ieee754_pow+0x740>)
 800dae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dae8:	f7f2 fd96 	bl	8000618 <__aeabi_dmul>
 800daec:	a334      	add	r3, pc, #208	; (adr r3, 800dbc0 <__ieee754_pow+0x748>)
 800daee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf2:	4606      	mov	r6, r0
 800daf4:	460f      	mov	r7, r1
 800daf6:	4620      	mov	r0, r4
 800daf8:	4629      	mov	r1, r5
 800dafa:	f7f2 fd8d 	bl	8000618 <__aeabi_dmul>
 800dafe:	4602      	mov	r2, r0
 800db00:	460b      	mov	r3, r1
 800db02:	4630      	mov	r0, r6
 800db04:	4639      	mov	r1, r7
 800db06:	f7f2 fbd1 	bl	80002ac <__adddf3>
 800db0a:	9a07      	ldr	r2, [sp, #28]
 800db0c:	4b37      	ldr	r3, [pc, #220]	; (800dbec <__ieee754_pow+0x774>)
 800db0e:	4413      	add	r3, r2
 800db10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db14:	f7f2 fbca 	bl	80002ac <__adddf3>
 800db18:	4682      	mov	sl, r0
 800db1a:	9805      	ldr	r0, [sp, #20]
 800db1c:	468b      	mov	fp, r1
 800db1e:	f7f2 fd11 	bl	8000544 <__aeabi_i2d>
 800db22:	9a07      	ldr	r2, [sp, #28]
 800db24:	4b32      	ldr	r3, [pc, #200]	; (800dbf0 <__ieee754_pow+0x778>)
 800db26:	4413      	add	r3, r2
 800db28:	e9d3 8900 	ldrd	r8, r9, [r3]
 800db2c:	4606      	mov	r6, r0
 800db2e:	460f      	mov	r7, r1
 800db30:	4652      	mov	r2, sl
 800db32:	465b      	mov	r3, fp
 800db34:	ec51 0b18 	vmov	r0, r1, d8
 800db38:	f7f2 fbb8 	bl	80002ac <__adddf3>
 800db3c:	4642      	mov	r2, r8
 800db3e:	464b      	mov	r3, r9
 800db40:	f7f2 fbb4 	bl	80002ac <__adddf3>
 800db44:	4632      	mov	r2, r6
 800db46:	463b      	mov	r3, r7
 800db48:	f7f2 fbb0 	bl	80002ac <__adddf3>
 800db4c:	2000      	movs	r0, #0
 800db4e:	4632      	mov	r2, r6
 800db50:	463b      	mov	r3, r7
 800db52:	4604      	mov	r4, r0
 800db54:	460d      	mov	r5, r1
 800db56:	f7f2 fba7 	bl	80002a8 <__aeabi_dsub>
 800db5a:	4642      	mov	r2, r8
 800db5c:	464b      	mov	r3, r9
 800db5e:	f7f2 fba3 	bl	80002a8 <__aeabi_dsub>
 800db62:	ec53 2b18 	vmov	r2, r3, d8
 800db66:	f7f2 fb9f 	bl	80002a8 <__aeabi_dsub>
 800db6a:	4602      	mov	r2, r0
 800db6c:	460b      	mov	r3, r1
 800db6e:	4650      	mov	r0, sl
 800db70:	4659      	mov	r1, fp
 800db72:	e610      	b.n	800d796 <__ieee754_pow+0x31e>
 800db74:	2401      	movs	r4, #1
 800db76:	e6a1      	b.n	800d8bc <__ieee754_pow+0x444>
 800db78:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800dbc8 <__ieee754_pow+0x750>
 800db7c:	e617      	b.n	800d7ae <__ieee754_pow+0x336>
 800db7e:	bf00      	nop
 800db80:	4a454eef 	.word	0x4a454eef
 800db84:	3fca7e28 	.word	0x3fca7e28
 800db88:	93c9db65 	.word	0x93c9db65
 800db8c:	3fcd864a 	.word	0x3fcd864a
 800db90:	a91d4101 	.word	0xa91d4101
 800db94:	3fd17460 	.word	0x3fd17460
 800db98:	518f264d 	.word	0x518f264d
 800db9c:	3fd55555 	.word	0x3fd55555
 800dba0:	db6fabff 	.word	0xdb6fabff
 800dba4:	3fdb6db6 	.word	0x3fdb6db6
 800dba8:	33333303 	.word	0x33333303
 800dbac:	3fe33333 	.word	0x3fe33333
 800dbb0:	e0000000 	.word	0xe0000000
 800dbb4:	3feec709 	.word	0x3feec709
 800dbb8:	dc3a03fd 	.word	0xdc3a03fd
 800dbbc:	3feec709 	.word	0x3feec709
 800dbc0:	145b01f5 	.word	0x145b01f5
 800dbc4:	be3e2fe0 	.word	0xbe3e2fe0
 800dbc8:	00000000 	.word	0x00000000
 800dbcc:	3ff00000 	.word	0x3ff00000
 800dbd0:	7ff00000 	.word	0x7ff00000
 800dbd4:	43400000 	.word	0x43400000
 800dbd8:	0003988e 	.word	0x0003988e
 800dbdc:	000bb679 	.word	0x000bb679
 800dbe0:	0800efc0 	.word	0x0800efc0
 800dbe4:	3ff00000 	.word	0x3ff00000
 800dbe8:	40080000 	.word	0x40080000
 800dbec:	0800efe0 	.word	0x0800efe0
 800dbf0:	0800efd0 	.word	0x0800efd0
 800dbf4:	a3b3      	add	r3, pc, #716	; (adr r3, 800dec4 <__ieee754_pow+0xa4c>)
 800dbf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbfa:	4640      	mov	r0, r8
 800dbfc:	4649      	mov	r1, r9
 800dbfe:	f7f2 fb55 	bl	80002ac <__adddf3>
 800dc02:	4622      	mov	r2, r4
 800dc04:	ec41 0b1a 	vmov	d10, r0, r1
 800dc08:	462b      	mov	r3, r5
 800dc0a:	4630      	mov	r0, r6
 800dc0c:	4639      	mov	r1, r7
 800dc0e:	f7f2 fb4b 	bl	80002a8 <__aeabi_dsub>
 800dc12:	4602      	mov	r2, r0
 800dc14:	460b      	mov	r3, r1
 800dc16:	ec51 0b1a 	vmov	r0, r1, d10
 800dc1a:	f7f2 ff8d 	bl	8000b38 <__aeabi_dcmpgt>
 800dc1e:	2800      	cmp	r0, #0
 800dc20:	f47f ae04 	bne.w	800d82c <__ieee754_pow+0x3b4>
 800dc24:	4aa2      	ldr	r2, [pc, #648]	; (800deb0 <__ieee754_pow+0xa38>)
 800dc26:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dc2a:	4293      	cmp	r3, r2
 800dc2c:	f340 8107 	ble.w	800de3e <__ieee754_pow+0x9c6>
 800dc30:	151b      	asrs	r3, r3, #20
 800dc32:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800dc36:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800dc3a:	fa4a fa03 	asr.w	sl, sl, r3
 800dc3e:	44da      	add	sl, fp
 800dc40:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800dc44:	489b      	ldr	r0, [pc, #620]	; (800deb4 <__ieee754_pow+0xa3c>)
 800dc46:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800dc4a:	4108      	asrs	r0, r1
 800dc4c:	ea00 030a 	and.w	r3, r0, sl
 800dc50:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800dc54:	f1c1 0114 	rsb	r1, r1, #20
 800dc58:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800dc5c:	fa4a fa01 	asr.w	sl, sl, r1
 800dc60:	f1bb 0f00 	cmp.w	fp, #0
 800dc64:	f04f 0200 	mov.w	r2, #0
 800dc68:	4620      	mov	r0, r4
 800dc6a:	4629      	mov	r1, r5
 800dc6c:	bfb8      	it	lt
 800dc6e:	f1ca 0a00 	rsblt	sl, sl, #0
 800dc72:	f7f2 fb19 	bl	80002a8 <__aeabi_dsub>
 800dc76:	ec41 0b19 	vmov	d9, r0, r1
 800dc7a:	4642      	mov	r2, r8
 800dc7c:	464b      	mov	r3, r9
 800dc7e:	ec51 0b19 	vmov	r0, r1, d9
 800dc82:	f7f2 fb13 	bl	80002ac <__adddf3>
 800dc86:	a37a      	add	r3, pc, #488	; (adr r3, 800de70 <__ieee754_pow+0x9f8>)
 800dc88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc8c:	2000      	movs	r0, #0
 800dc8e:	4604      	mov	r4, r0
 800dc90:	460d      	mov	r5, r1
 800dc92:	f7f2 fcc1 	bl	8000618 <__aeabi_dmul>
 800dc96:	ec53 2b19 	vmov	r2, r3, d9
 800dc9a:	4606      	mov	r6, r0
 800dc9c:	460f      	mov	r7, r1
 800dc9e:	4620      	mov	r0, r4
 800dca0:	4629      	mov	r1, r5
 800dca2:	f7f2 fb01 	bl	80002a8 <__aeabi_dsub>
 800dca6:	4602      	mov	r2, r0
 800dca8:	460b      	mov	r3, r1
 800dcaa:	4640      	mov	r0, r8
 800dcac:	4649      	mov	r1, r9
 800dcae:	f7f2 fafb 	bl	80002a8 <__aeabi_dsub>
 800dcb2:	a371      	add	r3, pc, #452	; (adr r3, 800de78 <__ieee754_pow+0xa00>)
 800dcb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcb8:	f7f2 fcae 	bl	8000618 <__aeabi_dmul>
 800dcbc:	a370      	add	r3, pc, #448	; (adr r3, 800de80 <__ieee754_pow+0xa08>)
 800dcbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcc2:	4680      	mov	r8, r0
 800dcc4:	4689      	mov	r9, r1
 800dcc6:	4620      	mov	r0, r4
 800dcc8:	4629      	mov	r1, r5
 800dcca:	f7f2 fca5 	bl	8000618 <__aeabi_dmul>
 800dcce:	4602      	mov	r2, r0
 800dcd0:	460b      	mov	r3, r1
 800dcd2:	4640      	mov	r0, r8
 800dcd4:	4649      	mov	r1, r9
 800dcd6:	f7f2 fae9 	bl	80002ac <__adddf3>
 800dcda:	4604      	mov	r4, r0
 800dcdc:	460d      	mov	r5, r1
 800dcde:	4602      	mov	r2, r0
 800dce0:	460b      	mov	r3, r1
 800dce2:	4630      	mov	r0, r6
 800dce4:	4639      	mov	r1, r7
 800dce6:	f7f2 fae1 	bl	80002ac <__adddf3>
 800dcea:	4632      	mov	r2, r6
 800dcec:	463b      	mov	r3, r7
 800dcee:	4680      	mov	r8, r0
 800dcf0:	4689      	mov	r9, r1
 800dcf2:	f7f2 fad9 	bl	80002a8 <__aeabi_dsub>
 800dcf6:	4602      	mov	r2, r0
 800dcf8:	460b      	mov	r3, r1
 800dcfa:	4620      	mov	r0, r4
 800dcfc:	4629      	mov	r1, r5
 800dcfe:	f7f2 fad3 	bl	80002a8 <__aeabi_dsub>
 800dd02:	4642      	mov	r2, r8
 800dd04:	4606      	mov	r6, r0
 800dd06:	460f      	mov	r7, r1
 800dd08:	464b      	mov	r3, r9
 800dd0a:	4640      	mov	r0, r8
 800dd0c:	4649      	mov	r1, r9
 800dd0e:	f7f2 fc83 	bl	8000618 <__aeabi_dmul>
 800dd12:	a35d      	add	r3, pc, #372	; (adr r3, 800de88 <__ieee754_pow+0xa10>)
 800dd14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd18:	4604      	mov	r4, r0
 800dd1a:	460d      	mov	r5, r1
 800dd1c:	f7f2 fc7c 	bl	8000618 <__aeabi_dmul>
 800dd20:	a35b      	add	r3, pc, #364	; (adr r3, 800de90 <__ieee754_pow+0xa18>)
 800dd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd26:	f7f2 fabf 	bl	80002a8 <__aeabi_dsub>
 800dd2a:	4622      	mov	r2, r4
 800dd2c:	462b      	mov	r3, r5
 800dd2e:	f7f2 fc73 	bl	8000618 <__aeabi_dmul>
 800dd32:	a359      	add	r3, pc, #356	; (adr r3, 800de98 <__ieee754_pow+0xa20>)
 800dd34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd38:	f7f2 fab8 	bl	80002ac <__adddf3>
 800dd3c:	4622      	mov	r2, r4
 800dd3e:	462b      	mov	r3, r5
 800dd40:	f7f2 fc6a 	bl	8000618 <__aeabi_dmul>
 800dd44:	a356      	add	r3, pc, #344	; (adr r3, 800dea0 <__ieee754_pow+0xa28>)
 800dd46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd4a:	f7f2 faad 	bl	80002a8 <__aeabi_dsub>
 800dd4e:	4622      	mov	r2, r4
 800dd50:	462b      	mov	r3, r5
 800dd52:	f7f2 fc61 	bl	8000618 <__aeabi_dmul>
 800dd56:	a354      	add	r3, pc, #336	; (adr r3, 800dea8 <__ieee754_pow+0xa30>)
 800dd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd5c:	f7f2 faa6 	bl	80002ac <__adddf3>
 800dd60:	4622      	mov	r2, r4
 800dd62:	462b      	mov	r3, r5
 800dd64:	f7f2 fc58 	bl	8000618 <__aeabi_dmul>
 800dd68:	4602      	mov	r2, r0
 800dd6a:	460b      	mov	r3, r1
 800dd6c:	4640      	mov	r0, r8
 800dd6e:	4649      	mov	r1, r9
 800dd70:	f7f2 fa9a 	bl	80002a8 <__aeabi_dsub>
 800dd74:	4604      	mov	r4, r0
 800dd76:	460d      	mov	r5, r1
 800dd78:	4602      	mov	r2, r0
 800dd7a:	460b      	mov	r3, r1
 800dd7c:	4640      	mov	r0, r8
 800dd7e:	4649      	mov	r1, r9
 800dd80:	f7f2 fc4a 	bl	8000618 <__aeabi_dmul>
 800dd84:	2200      	movs	r2, #0
 800dd86:	ec41 0b19 	vmov	d9, r0, r1
 800dd8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dd8e:	4620      	mov	r0, r4
 800dd90:	4629      	mov	r1, r5
 800dd92:	f7f2 fa89 	bl	80002a8 <__aeabi_dsub>
 800dd96:	4602      	mov	r2, r0
 800dd98:	460b      	mov	r3, r1
 800dd9a:	ec51 0b19 	vmov	r0, r1, d9
 800dd9e:	f7f2 fd65 	bl	800086c <__aeabi_ddiv>
 800dda2:	4632      	mov	r2, r6
 800dda4:	4604      	mov	r4, r0
 800dda6:	460d      	mov	r5, r1
 800dda8:	463b      	mov	r3, r7
 800ddaa:	4640      	mov	r0, r8
 800ddac:	4649      	mov	r1, r9
 800ddae:	f7f2 fc33 	bl	8000618 <__aeabi_dmul>
 800ddb2:	4632      	mov	r2, r6
 800ddb4:	463b      	mov	r3, r7
 800ddb6:	f7f2 fa79 	bl	80002ac <__adddf3>
 800ddba:	4602      	mov	r2, r0
 800ddbc:	460b      	mov	r3, r1
 800ddbe:	4620      	mov	r0, r4
 800ddc0:	4629      	mov	r1, r5
 800ddc2:	f7f2 fa71 	bl	80002a8 <__aeabi_dsub>
 800ddc6:	4642      	mov	r2, r8
 800ddc8:	464b      	mov	r3, r9
 800ddca:	f7f2 fa6d 	bl	80002a8 <__aeabi_dsub>
 800ddce:	460b      	mov	r3, r1
 800ddd0:	4602      	mov	r2, r0
 800ddd2:	4939      	ldr	r1, [pc, #228]	; (800deb8 <__ieee754_pow+0xa40>)
 800ddd4:	2000      	movs	r0, #0
 800ddd6:	f7f2 fa67 	bl	80002a8 <__aeabi_dsub>
 800ddda:	ec41 0b10 	vmov	d0, r0, r1
 800ddde:	ee10 3a90 	vmov	r3, s1
 800dde2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800dde6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ddea:	da2b      	bge.n	800de44 <__ieee754_pow+0x9cc>
 800ddec:	4650      	mov	r0, sl
 800ddee:	f000 f877 	bl	800dee0 <scalbn>
 800ddf2:	ec51 0b10 	vmov	r0, r1, d0
 800ddf6:	ec53 2b18 	vmov	r2, r3, d8
 800ddfa:	f7ff bbee 	b.w	800d5da <__ieee754_pow+0x162>
 800ddfe:	4b2f      	ldr	r3, [pc, #188]	; (800debc <__ieee754_pow+0xa44>)
 800de00:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800de04:	429e      	cmp	r6, r3
 800de06:	f77f af0d 	ble.w	800dc24 <__ieee754_pow+0x7ac>
 800de0a:	4b2d      	ldr	r3, [pc, #180]	; (800dec0 <__ieee754_pow+0xa48>)
 800de0c:	440b      	add	r3, r1
 800de0e:	4303      	orrs	r3, r0
 800de10:	d009      	beq.n	800de26 <__ieee754_pow+0x9ae>
 800de12:	ec51 0b18 	vmov	r0, r1, d8
 800de16:	2200      	movs	r2, #0
 800de18:	2300      	movs	r3, #0
 800de1a:	f7f2 fe6f 	bl	8000afc <__aeabi_dcmplt>
 800de1e:	3800      	subs	r0, #0
 800de20:	bf18      	it	ne
 800de22:	2001      	movne	r0, #1
 800de24:	e448      	b.n	800d6b8 <__ieee754_pow+0x240>
 800de26:	4622      	mov	r2, r4
 800de28:	462b      	mov	r3, r5
 800de2a:	f7f2 fa3d 	bl	80002a8 <__aeabi_dsub>
 800de2e:	4642      	mov	r2, r8
 800de30:	464b      	mov	r3, r9
 800de32:	f7f2 fe77 	bl	8000b24 <__aeabi_dcmpge>
 800de36:	2800      	cmp	r0, #0
 800de38:	f43f aef4 	beq.w	800dc24 <__ieee754_pow+0x7ac>
 800de3c:	e7e9      	b.n	800de12 <__ieee754_pow+0x99a>
 800de3e:	f04f 0a00 	mov.w	sl, #0
 800de42:	e71a      	b.n	800dc7a <__ieee754_pow+0x802>
 800de44:	ec51 0b10 	vmov	r0, r1, d0
 800de48:	4619      	mov	r1, r3
 800de4a:	e7d4      	b.n	800ddf6 <__ieee754_pow+0x97e>
 800de4c:	491a      	ldr	r1, [pc, #104]	; (800deb8 <__ieee754_pow+0xa40>)
 800de4e:	2000      	movs	r0, #0
 800de50:	f7ff bb31 	b.w	800d4b6 <__ieee754_pow+0x3e>
 800de54:	2000      	movs	r0, #0
 800de56:	2100      	movs	r1, #0
 800de58:	f7ff bb2d 	b.w	800d4b6 <__ieee754_pow+0x3e>
 800de5c:	4630      	mov	r0, r6
 800de5e:	4639      	mov	r1, r7
 800de60:	f7ff bb29 	b.w	800d4b6 <__ieee754_pow+0x3e>
 800de64:	9204      	str	r2, [sp, #16]
 800de66:	f7ff bb7b 	b.w	800d560 <__ieee754_pow+0xe8>
 800de6a:	2300      	movs	r3, #0
 800de6c:	f7ff bb65 	b.w	800d53a <__ieee754_pow+0xc2>
 800de70:	00000000 	.word	0x00000000
 800de74:	3fe62e43 	.word	0x3fe62e43
 800de78:	fefa39ef 	.word	0xfefa39ef
 800de7c:	3fe62e42 	.word	0x3fe62e42
 800de80:	0ca86c39 	.word	0x0ca86c39
 800de84:	be205c61 	.word	0xbe205c61
 800de88:	72bea4d0 	.word	0x72bea4d0
 800de8c:	3e663769 	.word	0x3e663769
 800de90:	c5d26bf1 	.word	0xc5d26bf1
 800de94:	3ebbbd41 	.word	0x3ebbbd41
 800de98:	af25de2c 	.word	0xaf25de2c
 800de9c:	3f11566a 	.word	0x3f11566a
 800dea0:	16bebd93 	.word	0x16bebd93
 800dea4:	3f66c16c 	.word	0x3f66c16c
 800dea8:	5555553e 	.word	0x5555553e
 800deac:	3fc55555 	.word	0x3fc55555
 800deb0:	3fe00000 	.word	0x3fe00000
 800deb4:	fff00000 	.word	0xfff00000
 800deb8:	3ff00000 	.word	0x3ff00000
 800debc:	4090cbff 	.word	0x4090cbff
 800dec0:	3f6f3400 	.word	0x3f6f3400
 800dec4:	652b82fe 	.word	0x652b82fe
 800dec8:	3c971547 	.word	0x3c971547

0800decc <fabs>:
 800decc:	ec51 0b10 	vmov	r0, r1, d0
 800ded0:	ee10 2a10 	vmov	r2, s0
 800ded4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ded8:	ec43 2b10 	vmov	d0, r2, r3
 800dedc:	4770      	bx	lr
	...

0800dee0 <scalbn>:
 800dee0:	b570      	push	{r4, r5, r6, lr}
 800dee2:	ec55 4b10 	vmov	r4, r5, d0
 800dee6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800deea:	4606      	mov	r6, r0
 800deec:	462b      	mov	r3, r5
 800deee:	b999      	cbnz	r1, 800df18 <scalbn+0x38>
 800def0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800def4:	4323      	orrs	r3, r4
 800def6:	d03f      	beq.n	800df78 <scalbn+0x98>
 800def8:	4b35      	ldr	r3, [pc, #212]	; (800dfd0 <scalbn+0xf0>)
 800defa:	4629      	mov	r1, r5
 800defc:	ee10 0a10 	vmov	r0, s0
 800df00:	2200      	movs	r2, #0
 800df02:	f7f2 fb89 	bl	8000618 <__aeabi_dmul>
 800df06:	4b33      	ldr	r3, [pc, #204]	; (800dfd4 <scalbn+0xf4>)
 800df08:	429e      	cmp	r6, r3
 800df0a:	4604      	mov	r4, r0
 800df0c:	460d      	mov	r5, r1
 800df0e:	da10      	bge.n	800df32 <scalbn+0x52>
 800df10:	a327      	add	r3, pc, #156	; (adr r3, 800dfb0 <scalbn+0xd0>)
 800df12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df16:	e01f      	b.n	800df58 <scalbn+0x78>
 800df18:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800df1c:	4291      	cmp	r1, r2
 800df1e:	d10c      	bne.n	800df3a <scalbn+0x5a>
 800df20:	ee10 2a10 	vmov	r2, s0
 800df24:	4620      	mov	r0, r4
 800df26:	4629      	mov	r1, r5
 800df28:	f7f2 f9c0 	bl	80002ac <__adddf3>
 800df2c:	4604      	mov	r4, r0
 800df2e:	460d      	mov	r5, r1
 800df30:	e022      	b.n	800df78 <scalbn+0x98>
 800df32:	460b      	mov	r3, r1
 800df34:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800df38:	3936      	subs	r1, #54	; 0x36
 800df3a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800df3e:	4296      	cmp	r6, r2
 800df40:	dd0d      	ble.n	800df5e <scalbn+0x7e>
 800df42:	2d00      	cmp	r5, #0
 800df44:	a11c      	add	r1, pc, #112	; (adr r1, 800dfb8 <scalbn+0xd8>)
 800df46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df4a:	da02      	bge.n	800df52 <scalbn+0x72>
 800df4c:	a11c      	add	r1, pc, #112	; (adr r1, 800dfc0 <scalbn+0xe0>)
 800df4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df52:	a319      	add	r3, pc, #100	; (adr r3, 800dfb8 <scalbn+0xd8>)
 800df54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df58:	f7f2 fb5e 	bl	8000618 <__aeabi_dmul>
 800df5c:	e7e6      	b.n	800df2c <scalbn+0x4c>
 800df5e:	1872      	adds	r2, r6, r1
 800df60:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800df64:	428a      	cmp	r2, r1
 800df66:	dcec      	bgt.n	800df42 <scalbn+0x62>
 800df68:	2a00      	cmp	r2, #0
 800df6a:	dd08      	ble.n	800df7e <scalbn+0x9e>
 800df6c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800df70:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800df74:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800df78:	ec45 4b10 	vmov	d0, r4, r5
 800df7c:	bd70      	pop	{r4, r5, r6, pc}
 800df7e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800df82:	da08      	bge.n	800df96 <scalbn+0xb6>
 800df84:	2d00      	cmp	r5, #0
 800df86:	a10a      	add	r1, pc, #40	; (adr r1, 800dfb0 <scalbn+0xd0>)
 800df88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df8c:	dac0      	bge.n	800df10 <scalbn+0x30>
 800df8e:	a10e      	add	r1, pc, #56	; (adr r1, 800dfc8 <scalbn+0xe8>)
 800df90:	e9d1 0100 	ldrd	r0, r1, [r1]
 800df94:	e7bc      	b.n	800df10 <scalbn+0x30>
 800df96:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800df9a:	3236      	adds	r2, #54	; 0x36
 800df9c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dfa0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800dfa4:	4620      	mov	r0, r4
 800dfa6:	4b0c      	ldr	r3, [pc, #48]	; (800dfd8 <scalbn+0xf8>)
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	e7d5      	b.n	800df58 <scalbn+0x78>
 800dfac:	f3af 8000 	nop.w
 800dfb0:	c2f8f359 	.word	0xc2f8f359
 800dfb4:	01a56e1f 	.word	0x01a56e1f
 800dfb8:	8800759c 	.word	0x8800759c
 800dfbc:	7e37e43c 	.word	0x7e37e43c
 800dfc0:	8800759c 	.word	0x8800759c
 800dfc4:	fe37e43c 	.word	0xfe37e43c
 800dfc8:	c2f8f359 	.word	0xc2f8f359
 800dfcc:	81a56e1f 	.word	0x81a56e1f
 800dfd0:	43500000 	.word	0x43500000
 800dfd4:	ffff3cb0 	.word	0xffff3cb0
 800dfd8:	3c900000 	.word	0x3c900000

0800dfdc <with_errno>:
 800dfdc:	b570      	push	{r4, r5, r6, lr}
 800dfde:	4604      	mov	r4, r0
 800dfe0:	460d      	mov	r5, r1
 800dfe2:	4616      	mov	r6, r2
 800dfe4:	f7fe fd8a 	bl	800cafc <__errno>
 800dfe8:	4629      	mov	r1, r5
 800dfea:	6006      	str	r6, [r0, #0]
 800dfec:	4620      	mov	r0, r4
 800dfee:	bd70      	pop	{r4, r5, r6, pc}

0800dff0 <xflow>:
 800dff0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dff2:	4614      	mov	r4, r2
 800dff4:	461d      	mov	r5, r3
 800dff6:	b108      	cbz	r0, 800dffc <xflow+0xc>
 800dff8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800dffc:	e9cd 2300 	strd	r2, r3, [sp]
 800e000:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e004:	4620      	mov	r0, r4
 800e006:	4629      	mov	r1, r5
 800e008:	f7f2 fb06 	bl	8000618 <__aeabi_dmul>
 800e00c:	2222      	movs	r2, #34	; 0x22
 800e00e:	b003      	add	sp, #12
 800e010:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e014:	f7ff bfe2 	b.w	800dfdc <with_errno>

0800e018 <__math_uflow>:
 800e018:	b508      	push	{r3, lr}
 800e01a:	2200      	movs	r2, #0
 800e01c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e020:	f7ff ffe6 	bl	800dff0 <xflow>
 800e024:	ec41 0b10 	vmov	d0, r0, r1
 800e028:	bd08      	pop	{r3, pc}

0800e02a <__math_oflow>:
 800e02a:	b508      	push	{r3, lr}
 800e02c:	2200      	movs	r2, #0
 800e02e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800e032:	f7ff ffdd 	bl	800dff0 <xflow>
 800e036:	ec41 0b10 	vmov	d0, r0, r1
 800e03a:	bd08      	pop	{r3, pc}

0800e03c <__ieee754_sqrt>:
 800e03c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e040:	ec55 4b10 	vmov	r4, r5, d0
 800e044:	4e67      	ldr	r6, [pc, #412]	; (800e1e4 <__ieee754_sqrt+0x1a8>)
 800e046:	43ae      	bics	r6, r5
 800e048:	ee10 0a10 	vmov	r0, s0
 800e04c:	ee10 2a10 	vmov	r2, s0
 800e050:	4629      	mov	r1, r5
 800e052:	462b      	mov	r3, r5
 800e054:	d10d      	bne.n	800e072 <__ieee754_sqrt+0x36>
 800e056:	f7f2 fadf 	bl	8000618 <__aeabi_dmul>
 800e05a:	4602      	mov	r2, r0
 800e05c:	460b      	mov	r3, r1
 800e05e:	4620      	mov	r0, r4
 800e060:	4629      	mov	r1, r5
 800e062:	f7f2 f923 	bl	80002ac <__adddf3>
 800e066:	4604      	mov	r4, r0
 800e068:	460d      	mov	r5, r1
 800e06a:	ec45 4b10 	vmov	d0, r4, r5
 800e06e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e072:	2d00      	cmp	r5, #0
 800e074:	dc0b      	bgt.n	800e08e <__ieee754_sqrt+0x52>
 800e076:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e07a:	4326      	orrs	r6, r4
 800e07c:	d0f5      	beq.n	800e06a <__ieee754_sqrt+0x2e>
 800e07e:	b135      	cbz	r5, 800e08e <__ieee754_sqrt+0x52>
 800e080:	f7f2 f912 	bl	80002a8 <__aeabi_dsub>
 800e084:	4602      	mov	r2, r0
 800e086:	460b      	mov	r3, r1
 800e088:	f7f2 fbf0 	bl	800086c <__aeabi_ddiv>
 800e08c:	e7eb      	b.n	800e066 <__ieee754_sqrt+0x2a>
 800e08e:	1509      	asrs	r1, r1, #20
 800e090:	f000 808d 	beq.w	800e1ae <__ieee754_sqrt+0x172>
 800e094:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e098:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800e09c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e0a0:	07c9      	lsls	r1, r1, #31
 800e0a2:	bf5c      	itt	pl
 800e0a4:	005b      	lslpl	r3, r3, #1
 800e0a6:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800e0aa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e0ae:	bf58      	it	pl
 800e0b0:	0052      	lslpl	r2, r2, #1
 800e0b2:	2500      	movs	r5, #0
 800e0b4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800e0b8:	1076      	asrs	r6, r6, #1
 800e0ba:	0052      	lsls	r2, r2, #1
 800e0bc:	f04f 0e16 	mov.w	lr, #22
 800e0c0:	46ac      	mov	ip, r5
 800e0c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e0c6:	eb0c 0001 	add.w	r0, ip, r1
 800e0ca:	4298      	cmp	r0, r3
 800e0cc:	bfde      	ittt	le
 800e0ce:	1a1b      	suble	r3, r3, r0
 800e0d0:	eb00 0c01 	addle.w	ip, r0, r1
 800e0d4:	186d      	addle	r5, r5, r1
 800e0d6:	005b      	lsls	r3, r3, #1
 800e0d8:	f1be 0e01 	subs.w	lr, lr, #1
 800e0dc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800e0e0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e0e4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800e0e8:	d1ed      	bne.n	800e0c6 <__ieee754_sqrt+0x8a>
 800e0ea:	4674      	mov	r4, lr
 800e0ec:	2720      	movs	r7, #32
 800e0ee:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800e0f2:	4563      	cmp	r3, ip
 800e0f4:	eb01 000e 	add.w	r0, r1, lr
 800e0f8:	dc02      	bgt.n	800e100 <__ieee754_sqrt+0xc4>
 800e0fa:	d113      	bne.n	800e124 <__ieee754_sqrt+0xe8>
 800e0fc:	4290      	cmp	r0, r2
 800e0fe:	d811      	bhi.n	800e124 <__ieee754_sqrt+0xe8>
 800e100:	2800      	cmp	r0, #0
 800e102:	eb00 0e01 	add.w	lr, r0, r1
 800e106:	da57      	bge.n	800e1b8 <__ieee754_sqrt+0x17c>
 800e108:	f1be 0f00 	cmp.w	lr, #0
 800e10c:	db54      	blt.n	800e1b8 <__ieee754_sqrt+0x17c>
 800e10e:	f10c 0801 	add.w	r8, ip, #1
 800e112:	eba3 030c 	sub.w	r3, r3, ip
 800e116:	4290      	cmp	r0, r2
 800e118:	bf88      	it	hi
 800e11a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800e11e:	1a12      	subs	r2, r2, r0
 800e120:	440c      	add	r4, r1
 800e122:	46c4      	mov	ip, r8
 800e124:	005b      	lsls	r3, r3, #1
 800e126:	3f01      	subs	r7, #1
 800e128:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800e12c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800e130:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800e134:	d1dd      	bne.n	800e0f2 <__ieee754_sqrt+0xb6>
 800e136:	4313      	orrs	r3, r2
 800e138:	d01b      	beq.n	800e172 <__ieee754_sqrt+0x136>
 800e13a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800e1e8 <__ieee754_sqrt+0x1ac>
 800e13e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800e1ec <__ieee754_sqrt+0x1b0>
 800e142:	e9da 0100 	ldrd	r0, r1, [sl]
 800e146:	e9db 2300 	ldrd	r2, r3, [fp]
 800e14a:	f7f2 f8ad 	bl	80002a8 <__aeabi_dsub>
 800e14e:	e9da 8900 	ldrd	r8, r9, [sl]
 800e152:	4602      	mov	r2, r0
 800e154:	460b      	mov	r3, r1
 800e156:	4640      	mov	r0, r8
 800e158:	4649      	mov	r1, r9
 800e15a:	f7f2 fcd9 	bl	8000b10 <__aeabi_dcmple>
 800e15e:	b140      	cbz	r0, 800e172 <__ieee754_sqrt+0x136>
 800e160:	f1b4 3fff 	cmp.w	r4, #4294967295
 800e164:	e9da 0100 	ldrd	r0, r1, [sl]
 800e168:	e9db 2300 	ldrd	r2, r3, [fp]
 800e16c:	d126      	bne.n	800e1bc <__ieee754_sqrt+0x180>
 800e16e:	3501      	adds	r5, #1
 800e170:	463c      	mov	r4, r7
 800e172:	106a      	asrs	r2, r5, #1
 800e174:	0863      	lsrs	r3, r4, #1
 800e176:	07e9      	lsls	r1, r5, #31
 800e178:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800e17c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800e180:	bf48      	it	mi
 800e182:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800e186:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800e18a:	461c      	mov	r4, r3
 800e18c:	e76d      	b.n	800e06a <__ieee754_sqrt+0x2e>
 800e18e:	0ad3      	lsrs	r3, r2, #11
 800e190:	3815      	subs	r0, #21
 800e192:	0552      	lsls	r2, r2, #21
 800e194:	2b00      	cmp	r3, #0
 800e196:	d0fa      	beq.n	800e18e <__ieee754_sqrt+0x152>
 800e198:	02dc      	lsls	r4, r3, #11
 800e19a:	d50a      	bpl.n	800e1b2 <__ieee754_sqrt+0x176>
 800e19c:	f1c1 0420 	rsb	r4, r1, #32
 800e1a0:	fa22 f404 	lsr.w	r4, r2, r4
 800e1a4:	1e4d      	subs	r5, r1, #1
 800e1a6:	408a      	lsls	r2, r1
 800e1a8:	4323      	orrs	r3, r4
 800e1aa:	1b41      	subs	r1, r0, r5
 800e1ac:	e772      	b.n	800e094 <__ieee754_sqrt+0x58>
 800e1ae:	4608      	mov	r0, r1
 800e1b0:	e7f0      	b.n	800e194 <__ieee754_sqrt+0x158>
 800e1b2:	005b      	lsls	r3, r3, #1
 800e1b4:	3101      	adds	r1, #1
 800e1b6:	e7ef      	b.n	800e198 <__ieee754_sqrt+0x15c>
 800e1b8:	46e0      	mov	r8, ip
 800e1ba:	e7aa      	b.n	800e112 <__ieee754_sqrt+0xd6>
 800e1bc:	f7f2 f876 	bl	80002ac <__adddf3>
 800e1c0:	e9da 8900 	ldrd	r8, r9, [sl]
 800e1c4:	4602      	mov	r2, r0
 800e1c6:	460b      	mov	r3, r1
 800e1c8:	4640      	mov	r0, r8
 800e1ca:	4649      	mov	r1, r9
 800e1cc:	f7f2 fc96 	bl	8000afc <__aeabi_dcmplt>
 800e1d0:	b120      	cbz	r0, 800e1dc <__ieee754_sqrt+0x1a0>
 800e1d2:	1ca0      	adds	r0, r4, #2
 800e1d4:	bf08      	it	eq
 800e1d6:	3501      	addeq	r5, #1
 800e1d8:	3402      	adds	r4, #2
 800e1da:	e7ca      	b.n	800e172 <__ieee754_sqrt+0x136>
 800e1dc:	3401      	adds	r4, #1
 800e1de:	f024 0401 	bic.w	r4, r4, #1
 800e1e2:	e7c6      	b.n	800e172 <__ieee754_sqrt+0x136>
 800e1e4:	7ff00000 	.word	0x7ff00000
 800e1e8:	20000070 	.word	0x20000070
 800e1ec:	20000078 	.word	0x20000078

0800e1f0 <_init>:
 800e1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1f2:	bf00      	nop
 800e1f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1f6:	bc08      	pop	{r3}
 800e1f8:	469e      	mov	lr, r3
 800e1fa:	4770      	bx	lr

0800e1fc <_fini>:
 800e1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1fe:	bf00      	nop
 800e200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e202:	bc08      	pop	{r3}
 800e204:	469e      	mov	lr, r3
 800e206:	4770      	bx	lr
